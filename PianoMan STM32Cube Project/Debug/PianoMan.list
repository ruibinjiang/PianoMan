
PianoMan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c0  0800eb40  0800eb40  0001eb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f200  0800f200  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f200  0800f200  0001f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f208  0800f208  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f208  0800f208  0001f208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f20c  0800f20c  0001f20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800f210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001224c  2000007c  0800f28c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200122c8  0800f28c  000222c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f855  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000040a6  00000000  00000000  0003f901  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001968  00000000  00000000  000439a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  00045310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264a3  00000000  00000000  00046aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016fd3  00000000  00000000  0006cf4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6a55  00000000  00000000  00083f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a973  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000713c  00000000  00000000  0015a9f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eb24 	.word	0x0800eb24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800eb24 	.word	0x0800eb24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b972 	b.w	8000e78 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14b      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	d967      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0720 	rsb	r7, r2, #32
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	ea47 0803 	orr.w	r8, r7, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be4:	fa1f fc85 	uxth.w	ip, r5
 8000be8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18eb      	adds	r3, r5, r3
 8000bfa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bfe:	f080 811b 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8118 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c08:	3f02      	subs	r7, #2
 8000c0a:	442b      	add	r3, r5
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c34:	3802      	subs	r0, #2
 8000c36:	442c      	add	r4, r5
 8000c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c3c:	eba4 040c 	sub.w	r4, r4, ip
 8000c40:	2700      	movs	r7, #0
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xbe>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80eb 	beq.w	8000e32 <__udivmoddi4+0x286>
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4639      	mov	r1, r7
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f783 	clz	r7, r3
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d147      	bne.n	8000d02 <__udivmoddi4+0x156>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd0>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80fa 	bhi.w	8000e70 <__udivmoddi4+0x2c4>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	4698      	mov	r8, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000c8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xe8>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 808f 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9e:	1b49      	subs	r1, r1, r5
 8000ca0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca4:	fa1f f885 	uxth.w	r8, r5
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x14c>
 8000ce8:	192c      	adds	r4, r5, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x14a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80b6 	bhi.w	8000e62 <__udivmoddi4+0x2b6>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e79f      	b.n	8000c42 <__udivmoddi4+0x96>
 8000d02:	f1c7 0c20 	rsb	ip, r7, #32
 8000d06:	40bb      	lsls	r3, r7
 8000d08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d10:	fa01 f407 	lsl.w	r4, r1, r7
 8000d14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d20:	4325      	orrs	r5, r4
 8000d22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	fb08 3319 	mls	r3, r8, r9, r3
 8000d2c:	fa1f fa8e 	uxth.w	sl, lr
 8000d30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d34:	fb09 f40a 	mul.w	r4, r9, sl
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1e 0303 	adds.w	r3, lr, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d4c:	f080 8087 	bcs.w	8000e5e <__udivmoddi4+0x2b2>
 8000d50:	429c      	cmp	r4, r3
 8000d52:	f240 8084 	bls.w	8000e5e <__udivmoddi4+0x2b2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4473      	add	r3, lr
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	b2ad      	uxth	r5, r5
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d70:	45a2      	cmp	sl, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1e 0404 	adds.w	r4, lr, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	d26b      	bcs.n	8000e56 <__udivmoddi4+0x2aa>
 8000d7e:	45a2      	cmp	sl, r4
 8000d80:	d969      	bls.n	8000e56 <__udivmoddi4+0x2aa>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4474      	add	r4, lr
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	eba4 040a 	sub.w	r4, r4, sl
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c2      	mov	sl, r8
 8000d96:	464b      	mov	r3, r9
 8000d98:	d354      	bcc.n	8000e44 <__udivmoddi4+0x298>
 8000d9a:	d051      	beq.n	8000e40 <__udivmoddi4+0x294>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2c8>
 8000da0:	ebb1 050a 	subs.w	r5, r1, sl
 8000da4:	eb64 0403 	sbc.w	r4, r4, r3
 8000da8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	40fc      	lsrs	r4, r7
 8000db0:	ea4c 0505 	orr.w	r5, ip, r5
 8000db4:	e9c6 5400 	strd	r5, r4, [r6]
 8000db8:	2700      	movs	r7, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc4:	4095      	lsls	r5, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	fa21 f303 	lsr.w	r3, r1, r3
 8000dce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	0c01      	lsrs	r1, r0, #16
 8000dd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dda:	fa1f f885 	uxth.w	r8, r5
 8000dde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb07 f308 	mul.w	r3, r7, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x256>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000df8:	d22f      	bcs.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d92d      	bls.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfe:	3f02      	subs	r7, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	b281      	uxth	r1, r0
 8000e06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb00 f308 	mul.w	r3, r0, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x27e>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e20:	d217      	bcs.n	8000e52 <__udivmoddi4+0x2a6>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d915      	bls.n	8000e52 <__udivmoddi4+0x2a6>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e30:	e73b      	b.n	8000caa <__udivmoddi4+0xfe>
 8000e32:	4637      	mov	r7, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e709      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e38:	4607      	mov	r7, r0
 8000e3a:	e6e7      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e40:	4541      	cmp	r1, r8
 8000e42:	d2ab      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e48:	eb69 020e 	sbc.w	r2, r9, lr
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	4613      	mov	r3, r2
 8000e50:	e7a4      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e52:	4660      	mov	r0, ip
 8000e54:	e7e9      	b.n	8000e2a <__udivmoddi4+0x27e>
 8000e56:	4618      	mov	r0, r3
 8000e58:	e795      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5a:	4667      	mov	r7, ip
 8000e5c:	e7d1      	b.n	8000e02 <__udivmoddi4+0x256>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	e77c      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	442c      	add	r4, r5
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0x14c>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	442b      	add	r3, r5
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e70:	4638      	mov	r0, r7
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xda>
 8000e74:	4637      	mov	r7, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa0>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <write_register+0x34>)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	781a      	ldrb	r2, [r3, #0]
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <write_register+0x34>)
 8000e94:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000e96:	2364      	movs	r3, #100	; 0x64
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <write_register+0x34>)
 8000e9e:	2194      	movs	r1, #148	; 0x94
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <write_register+0x38>)
 8000ea2:	f004 ff77 	bl	8005d94 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000098 	.word	0x20000098
 8000eb4:	2000009c 	.word	0x2000009c

08000eb8 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <read_register+0x3c>)
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000eca:	2364      	movs	r3, #100	; 0x64
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <read_register+0x3c>)
 8000ed2:	2194      	movs	r1, #148	; 0x94
 8000ed4:	4808      	ldr	r0, [pc, #32]	; (8000ef8 <read_register+0x40>)
 8000ed6:	f004 ff5d 	bl	8005d94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	2194      	movs	r1, #148	; 0x94
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <read_register+0x40>)
 8000ee6:	f005 f853 	bl	8005f90 <HAL_I2C_Master_Receive>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000098 	.word	0x20000098
 8000ef8:	2000009c 	.word	0x2000009c

08000efc <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000efc:	b084      	sub	sp, #16
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	f107 0c08 	add.w	ip, r7, #8
 8000f06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f0a:	4b81      	ldr	r3, [pc, #516]	; (8001110 <CS43_Init+0x214>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000f12:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <CS43_Init+0x214>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	69da      	ldr	r2, [r3, #28]
 8000f18:	4b7d      	ldr	r3, [pc, #500]	; (8001110 <CS43_Init+0x214>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f20:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2110      	movs	r1, #16
 8000f26:	487b      	ldr	r0, [pc, #492]	; (8001114 <CS43_Init+0x218>)
 8000f28:	f004 fdb0 	bl	8005a8c <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000f2c:	4b7a      	ldr	r3, [pc, #488]	; (8001118 <CS43_Init+0x21c>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f107 0108 	add.w	r1, r7, #8
 8000f34:	2354      	movs	r3, #84	; 0x54
 8000f36:	461a      	mov	r2, r3
 8000f38:	f00c f9c0 	bl	800d2bc <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000f3c:	4b77      	ldr	r3, [pc, #476]	; (800111c <CS43_Init+0x220>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 8000f42:	4976      	ldr	r1, [pc, #472]	; (800111c <CS43_Init+0x220>)
 8000f44:	2002      	movs	r0, #2
 8000f46:	f7ff ff99 	bl	8000e7c <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000f4a:	4b74      	ldr	r3, [pc, #464]	; (800111c <CS43_Init+0x220>)
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000f50:	4b72      	ldr	r3, [pc, #456]	; (800111c <CS43_Init+0x220>)
 8000f52:	785b      	ldrb	r3, [r3, #1]
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b70      	ldr	r3, [pc, #448]	; (800111c <CS43_Init+0x220>)
 8000f5c:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000f5e:	4b6f      	ldr	r3, [pc, #444]	; (800111c <CS43_Init+0x220>)
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	f043 030c 	orr.w	r3, r3, #12
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b6c      	ldr	r3, [pc, #432]	; (800111c <CS43_Init+0x220>)
 8000f6a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000f6c:	4b6b      	ldr	r3, [pc, #428]	; (800111c <CS43_Init+0x220>)
 8000f6e:	785b      	ldrb	r3, [r3, #1]
 8000f70:	f043 0303 	orr.w	r3, r3, #3
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b69      	ldr	r3, [pc, #420]	; (800111c <CS43_Init+0x220>)
 8000f78:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 8000f7a:	4969      	ldr	r1, [pc, #420]	; (8001120 <CS43_Init+0x224>)
 8000f7c:	2004      	movs	r0, #4
 8000f7e:	f7ff ff7d 	bl	8000e7c <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000f82:	4b66      	ldr	r3, [pc, #408]	; (800111c <CS43_Init+0x220>)
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000f88:	4965      	ldr	r1, [pc, #404]	; (8001120 <CS43_Init+0x224>)
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f7ff ff76 	bl	8000e7c <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000f90:	4962      	ldr	r1, [pc, #392]	; (800111c <CS43_Init+0x220>)
 8000f92:	2006      	movs	r0, #6
 8000f94:	f7ff ff90 	bl	8000eb8 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <CS43_Init+0x220>)
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	f003 0320 	and.w	r3, r3, #32
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b5e      	ldr	r3, [pc, #376]	; (800111c <CS43_Init+0x220>)
 8000fa4:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <CS43_Init+0x220>)
 8000fa8:	785b      	ldrb	r3, [r3, #1]
 8000faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b5a      	ldr	r3, [pc, #360]	; (800111c <CS43_Init+0x220>)
 8000fb2:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <CS43_Init+0x220>)
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <CS43_Init+0x220>)
 8000fc0:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000fc2:	4b56      	ldr	r3, [pc, #344]	; (800111c <CS43_Init+0x220>)
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	f023 0310 	bic.w	r3, r3, #16
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b53      	ldr	r3, [pc, #332]	; (800111c <CS43_Init+0x220>)
 8000fce:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <CS43_Init+0x220>)
 8000fd2:	785b      	ldrb	r3, [r3, #1]
 8000fd4:	f023 0304 	bic.w	r3, r3, #4
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b50      	ldr	r3, [pc, #320]	; (800111c <CS43_Init+0x220>)
 8000fdc:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 8000fde:	4b4f      	ldr	r3, [pc, #316]	; (800111c <CS43_Init+0x220>)
 8000fe0:	785b      	ldrb	r3, [r3, #1]
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	; (800111c <CS43_Init+0x220>)
 8000fea:	705a      	strb	r2, [r3, #1]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000fec:	4b4b      	ldr	r3, [pc, #300]	; (800111c <CS43_Init+0x220>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	f043 0303 	orr.w	r3, r3, #3
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b49      	ldr	r3, [pc, #292]	; (800111c <CS43_Init+0x220>)
 8000ff8:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000ffa:	4949      	ldr	r1, [pc, #292]	; (8001120 <CS43_Init+0x224>)
 8000ffc:	2006      	movs	r0, #6
 8000ffe:	f7ff ff3d 	bl	8000e7c <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8001002:	4947      	ldr	r1, [pc, #284]	; (8001120 <CS43_Init+0x224>)
 8001004:	2008      	movs	r0, #8
 8001006:	f7ff ff57 	bl	8000eb8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800100a:	4b44      	ldr	r3, [pc, #272]	; (800111c <CS43_Init+0x220>)
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	f023 030f 	bic.w	r3, r3, #15
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b41      	ldr	r3, [pc, #260]	; (800111c <CS43_Init+0x220>)
 8001016:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001018:	4b40      	ldr	r3, [pc, #256]	; (800111c <CS43_Init+0x220>)
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4b3e      	ldr	r3, [pc, #248]	; (800111c <CS43_Init+0x220>)
 8001024:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8001026:	493e      	ldr	r1, [pc, #248]	; (8001120 <CS43_Init+0x224>)
 8001028:	2008      	movs	r0, #8
 800102a:	f7ff ff27 	bl	8000e7c <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800102e:	493c      	ldr	r1, [pc, #240]	; (8001120 <CS43_Init+0x224>)
 8001030:	2009      	movs	r0, #9
 8001032:	f7ff ff41 	bl	8000eb8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001036:	4b39      	ldr	r3, [pc, #228]	; (800111c <CS43_Init+0x220>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	f023 030f 	bic.w	r3, r3, #15
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <CS43_Init+0x220>)
 8001042:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <CS43_Init+0x220>)
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <CS43_Init+0x220>)
 8001050:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 8001052:	4933      	ldr	r1, [pc, #204]	; (8001120 <CS43_Init+0x224>)
 8001054:	2009      	movs	r0, #9
 8001056:	f7ff ff11 	bl	8000e7c <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800105a:	4931      	ldr	r1, [pc, #196]	; (8001120 <CS43_Init+0x224>)
 800105c:	200e      	movs	r0, #14
 800105e:	f7ff ff2b 	bl	8000eb8 <read_register>
	if(outputMode == MODE_ANALOG)
 8001062:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001066:	2b01      	cmp	r3, #1
 8001068:	d123      	bne.n	80010b2 <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <CS43_Init+0x220>)
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <CS43_Init+0x220>)
 8001076:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <CS43_Init+0x220>)
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <CS43_Init+0x220>)
 8001084:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <CS43_Init+0x220>)
 8001088:	785b      	ldrb	r3, [r3, #1]
 800108a:	f023 0320 	bic.w	r3, r3, #32
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <CS43_Init+0x220>)
 8001092:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <CS43_Init+0x220>)
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	f023 0310 	bic.w	r3, r3, #16
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <CS43_Init+0x220>)
 80010a0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <CS43_Init+0x220>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	f023 0308 	bic.w	r3, r3, #8
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <CS43_Init+0x220>)
 80010ae:	705a      	strb	r2, [r3, #1]
 80010b0:	e006      	b.n	80010c0 <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80010b2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <CS43_Init+0x220>)
 80010bc:	2202      	movs	r2, #2
 80010be:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80010c0:	4917      	ldr	r1, [pc, #92]	; (8001120 <CS43_Init+0x224>)
 80010c2:	200e      	movs	r0, #14
 80010c4:	f7ff feda 	bl	8000e7c <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80010c8:	4915      	ldr	r1, [pc, #84]	; (8001120 <CS43_Init+0x224>)
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fef4 	bl	8000eb8 <read_register>
	iData[1] = 0x00;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <CS43_Init+0x220>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80010d6:	4912      	ldr	r1, [pc, #72]	; (8001120 <CS43_Init+0x224>)
 80010d8:	200f      	movs	r0, #15
 80010da:	f7ff fecf 	bl	8000e7c <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <CS43_Init+0x220>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80010e4:	490e      	ldr	r1, [pc, #56]	; (8001120 <CS43_Init+0x224>)
 80010e6:	2014      	movs	r0, #20
 80010e8:	f7ff fec8 	bl	8000e7c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <CS43_Init+0x224>)
 80010ee:	2015      	movs	r0, #21
 80010f0:	f7ff fec4 	bl	8000e7c <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80010f4:	490a      	ldr	r1, [pc, #40]	; (8001120 <CS43_Init+0x224>)
 80010f6:	201a      	movs	r0, #26
 80010f8:	f7ff fec0 	bl	8000e7c <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80010fc:	4908      	ldr	r1, [pc, #32]	; (8001120 <CS43_Init+0x224>)
 80010fe:	201b      	movs	r0, #27
 8001100:	f7ff febc 	bl	8000e7c <write_register>
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800110c:	b004      	add	sp, #16
 800110e:	4770      	bx	lr
 8001110:	2000fe3c 	.word	0x2000fe3c
 8001114:	40020c00 	.word	0x40020c00
 8001118:	2000009c 	.word	0x2000009c
 800111c:	20000098 	.word	0x20000098
 8001120:	20000099 	.word	0x20000099

08001124 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b03      	cmp	r3, #3
 8001132:	d837      	bhi.n	80011a4 <CS43_Enable_RightLeft+0x80>
 8001134:	a201      	add	r2, pc, #4	; (adr r2, 800113c <CS43_Enable_RightLeft+0x18>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001163 	.word	0x08001163
 8001144:	08001179 	.word	0x08001179
 8001148:	0800118f 	.word	0x0800118f
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 800114e:	22c0      	movs	r2, #192	; 0xc0
 8001150:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 800115e:	705a      	strb	r2, [r3, #1]
			break;
 8001160:	e021      	b.n	80011a6 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 8001174:	705a      	strb	r2, [r3, #1]
			break;
 8001176:	e016      	b.n	80011a6 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8001178:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 800117a:	22c0      	movs	r2, #192	; 0xc0
 800117c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	f043 0320 	orr.w	r3, r3, #32
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 800118a:	705a      	strb	r2, [r3, #1]
			break;
 800118c:	e00b      	b.n	80011a6 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 80011a0:	705a      	strb	r2, [r3, #1]
			break;
 80011a2:	e000      	b.n	80011a6 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80011a4:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	f043 030c 	orr.w	r3, r3, #12
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 80011b2:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	f043 0303 	orr.w	r3, r3, #3
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <CS43_Enable_RightLeft+0xb0>)
 80011c0:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80011c2:	4905      	ldr	r1, [pc, #20]	; (80011d8 <CS43_Enable_RightLeft+0xb4>)
 80011c4:	2004      	movs	r0, #4
 80011c6:	f7ff fe59 	bl	8000e7c <write_register>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000098 	.word	0x20000098
 80011d8:	20000099 	.word	0x20000099

080011dc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	3b32      	subs	r3, #50	; 0x32
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <CS43_SetVolume+0x78>)
 80011fc:	7bbb      	ldrb	r3, [r7, #14]
 80011fe:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8001200:	4915      	ldr	r1, [pc, #84]	; (8001258 <CS43_SetVolume+0x7c>)
 8001202:	2014      	movs	r0, #20
 8001204:	f7ff fe3a 	bl	8000e7c <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8001208:	4913      	ldr	r1, [pc, #76]	; (8001258 <CS43_SetVolume+0x7c>)
 800120a:	2015      	movs	r0, #21
 800120c:	f7ff fe36 	bl	8000e7c <write_register>
	
	iData[1] = VOLUME_CONVERT_D(volume);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d80e      	bhi.n	8001234 <CS43_SetVolume+0x58>
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <CS43_SetVolume+0x80>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1152      	asrs	r2, r2, #5
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	3b18      	subs	r3, #24
 8001230:	b2db      	uxtb	r3, r3
 8001232:	e000      	b.n	8001236 <CS43_SetVolume+0x5a>
 8001234:	2318      	movs	r3, #24
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <CS43_SetVolume+0x78>)
 8001238:	7053      	strb	r3, [r2, #1]
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 800123a:	4907      	ldr	r1, [pc, #28]	; (8001258 <CS43_SetVolume+0x7c>)
 800123c:	2020      	movs	r0, #32
 800123e:	f7ff fe1d 	bl	8000e7c <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <CS43_SetVolume+0x7c>)
 8001244:	2021      	movs	r0, #33	; 0x21
 8001246:	f7ff fe19 	bl	8000e7c <write_register>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000098 	.word	0x20000098
 8001258:	20000099 	.word	0x20000099
 800125c:	51eb851f 	.word	0x51eb851f

08001260 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <CS43_Start+0x7c>)
 8001266:	2299      	movs	r2, #153	; 0x99
 8001268:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800126a:	491d      	ldr	r1, [pc, #116]	; (80012e0 <CS43_Start+0x80>)
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fe05 	bl	8000e7c <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <CS43_Start+0x7c>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 8001278:	4919      	ldr	r1, [pc, #100]	; (80012e0 <CS43_Start+0x80>)
 800127a:	2047      	movs	r0, #71	; 0x47
 800127c:	f7ff fdfe 	bl	8000e7c <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8001280:	4917      	ldr	r1, [pc, #92]	; (80012e0 <CS43_Start+0x80>)
 8001282:	2032      	movs	r0, #50	; 0x32
 8001284:	f7ff fe18 	bl	8000eb8 <read_register>
	iData[1] |= 0x80;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <CS43_Start+0x7c>)
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <CS43_Start+0x7c>)
 8001294:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8001296:	4912      	ldr	r1, [pc, #72]	; (80012e0 <CS43_Start+0x80>)
 8001298:	2032      	movs	r0, #50	; 0x32
 800129a:	f7ff fdef 	bl	8000e7c <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 800129e:	4910      	ldr	r1, [pc, #64]	; (80012e0 <CS43_Start+0x80>)
 80012a0:	2032      	movs	r0, #50	; 0x32
 80012a2:	f7ff fe09 	bl	8000eb8 <read_register>
	iData[1] &= ~(0x80);
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <CS43_Start+0x7c>)
 80012a8:	785b      	ldrb	r3, [r3, #1]
 80012aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <CS43_Start+0x7c>)
 80012b2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80012b4:	490a      	ldr	r1, [pc, #40]	; (80012e0 <CS43_Start+0x80>)
 80012b6:	2032      	movs	r0, #50	; 0x32
 80012b8:	f7ff fde0 	bl	8000e7c <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <CS43_Start+0x7c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80012c2:	4907      	ldr	r1, [pc, #28]	; (80012e0 <CS43_Start+0x80>)
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fdd9 	bl	8000e7c <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <CS43_Start+0x7c>)
 80012cc:	229e      	movs	r2, #158	; 0x9e
 80012ce:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 80012d0:	4903      	ldr	r1, [pc, #12]	; (80012e0 <CS43_Start+0x80>)
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff fdd2 	bl	8000e7c <write_register>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000098 	.word	0x20000098
 80012e0:	20000099 	.word	0x20000099

080012e4 <Keypad4x4_Init>:
};*/

//***** Functions definition *****//
//Function(1): Set Keypad pins and ports
void Keypad4x4_Init()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	//Step(1): Copy the Keypad wirings to the library
	//Step(2): Find the positions of the 4 OUT pins
	//Step(3): Initialise all pins to set all OUT pins to RESET
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80012ee:	4802      	ldr	r0, [pc, #8]	; (80012f8 <Keypad4x4_Init+0x14>)
 80012f0:	f004 fbcc 	bl	8005a8c <HAL_GPIO_WritePin>
	                          |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
    //        |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_SET);


}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000

080012fc <Keypad4x4_ReadKeypad>:
	}
}
*/
//Function(4): Read active keypad button
void Keypad4x4_ReadKeypad(bool keys[60])
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	//Step(1): Make Col0 High and check the rows
	//GPIOD->OTYPER |= 0x3F;
	//GPIOD->OTYPER &= ~(1UL << 0);
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800130a:	48b8      	ldr	r0, [pc, #736]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 800130c:	f004 fbbe 	bl	8005a8c <HAL_GPIO_WritePin>
	                          |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	48b5      	ldr	r0, [pc, #724]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 8001318:	f004 fbb8 	bl	8005a8c <HAL_GPIO_WritePin>
	keys[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 800131c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001320:	48b3      	ldr	r0, [pc, #716]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 8001322:	f004 fb9b 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8001336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133a:	48ad      	ldr	r0, [pc, #692]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 800133c:	f004 fb8e 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3306      	adds	r3, #6
 8001348:	2a00      	cmp	r2, #0
 800134a:	bf14      	ite	ne
 800134c:	2201      	movne	r2, #1
 800134e:	2200      	moveq	r2, #0
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	48a5      	ldr	r0, [pc, #660]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 800135a:	f004 fb7f 	bl	8005a5c <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	330c      	adds	r3, #12
 8001366:	2a00      	cmp	r2, #0
 8001368:	bf14      	ite	ne
 800136a:	2201      	movne	r2, #1
 800136c:	2200      	moveq	r2, #0
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
	keys[18] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001376:	489e      	ldr	r0, [pc, #632]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 8001378:	f004 fb70 	bl	8005a5c <HAL_GPIO_ReadPin>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3312      	adds	r3, #18
 8001384:	2a00      	cmp	r2, #0
 8001386:	bf14      	ite	ne
 8001388:	2201      	movne	r2, #1
 800138a:	2200      	moveq	r2, #0
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
	keys[24] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001390:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001394:	4896      	ldr	r0, [pc, #600]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 8001396:	f004 fb61 	bl	8005a5c <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3318      	adds	r3, #24
 80013a2:	2a00      	cmp	r2, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2201      	movne	r2, #1
 80013a8:	2200      	moveq	r2, #0
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
	keys[30] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80013ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b2:	488f      	ldr	r0, [pc, #572]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 80013b4:	f004 fb52 	bl	8005a5c <HAL_GPIO_ReadPin>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	331e      	adds	r3, #30
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	bf14      	ite	ne
 80013c4:	2201      	movne	r2, #1
 80013c6:	2200      	moveq	r2, #0
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	701a      	strb	r2, [r3, #0]
	keys[36] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80013cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d0:	4888      	ldr	r0, [pc, #544]	; (80015f4 <Keypad4x4_ReadKeypad+0x2f8>)
 80013d2:	f004 fb43 	bl	8005a5c <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3324      	adds	r3, #36	; 0x24
 80013de:	2a00      	cmp	r2, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2201      	movne	r2, #1
 80013e4:	2200      	moveq	r2, #0
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
	keys[42] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 80013ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ee:	487f      	ldr	r0, [pc, #508]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 80013f0:	f004 fb34 	bl	8005a5c <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	332a      	adds	r3, #42	; 0x2a
 80013fc:	2a00      	cmp	r2, #0
 80013fe:	bf14      	ite	ne
 8001400:	2201      	movne	r2, #1
 8001402:	2200      	moveq	r2, #0
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
	keys[48] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 8001408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140c:	4879      	ldr	r0, [pc, #484]	; (80015f4 <Keypad4x4_ReadKeypad+0x2f8>)
 800140e:	f004 fb25 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3330      	adds	r3, #48	; 0x30
 800141a:	2a00      	cmp	r2, #0
 800141c:	bf14      	ite	ne
 800141e:	2201      	movne	r2, #1
 8001420:	2200      	moveq	r2, #0
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	701a      	strb	r2, [r3, #0]
	keys[54] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142a:	4872      	ldr	r0, [pc, #456]	; (80015f4 <Keypad4x4_ReadKeypad+0x2f8>)
 800142c:	f004 fb16 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3336      	adds	r3, #54	; 0x36
 8001438:	2a00      	cmp	r2, #0
 800143a:	bf14      	ite	ne
 800143c:	2201      	movne	r2, #1
 800143e:	2200      	moveq	r2, #0
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	701a      	strb	r2, [r3, #0]
	
	//Step(2): Make Col1 High and check the rows
	//GPIOD->OTYPER |= 0x3F;
	//GPIOD->OTYPER &= ~(1UL << 1);
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800144a:	4868      	ldr	r0, [pc, #416]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 800144c:	f004 fb1e 	bl	8005a8c <HAL_GPIO_WritePin>
	                          |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, Col2_Pin3_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001456:	4865      	ldr	r0, [pc, #404]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 8001458:	f004 fb18 	bl	8005a8c <HAL_GPIO_WritePin>
	keys[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 800145c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001460:	4863      	ldr	r0, [pc, #396]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 8001462:	f004 fafb 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3301      	adds	r3, #1
 800146e:	2a00      	cmp	r2, #0
 8001470:	bf14      	ite	ne
 8001472:	2201      	movne	r2, #1
 8001474:	2200      	moveq	r2, #0
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 800147a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147e:	485c      	ldr	r0, [pc, #368]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 8001480:	f004 faec 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3307      	adds	r3, #7
 800148c:	2a00      	cmp	r2, #0
 800148e:	bf14      	ite	ne
 8001490:	2201      	movne	r2, #1
 8001492:	2200      	moveq	r2, #0
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800149c:	4854      	ldr	r0, [pc, #336]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 800149e:	f004 fadd 	bl	8005a5c <HAL_GPIO_ReadPin>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	330d      	adds	r3, #13
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2201      	movne	r2, #1
 80014b0:	2200      	moveq	r2, #0
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	701a      	strb	r2, [r3, #0]
	keys[19] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80014b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ba:	484d      	ldr	r0, [pc, #308]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 80014bc:	f004 face 	bl	8005a5c <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3313      	adds	r3, #19
 80014c8:	2a00      	cmp	r2, #0
 80014ca:	bf14      	ite	ne
 80014cc:	2201      	movne	r2, #1
 80014ce:	2200      	moveq	r2, #0
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
	keys[25] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80014d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d8:	4845      	ldr	r0, [pc, #276]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 80014da:	f004 fabf 	bl	8005a5c <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3319      	adds	r3, #25
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	bf14      	ite	ne
 80014ea:	2201      	movne	r2, #1
 80014ec:	2200      	moveq	r2, #0
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]
	keys[31] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80014f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f6:	483e      	ldr	r0, [pc, #248]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 80014f8:	f004 fab0 	bl	8005a5c <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	331f      	adds	r3, #31
 8001504:	2a00      	cmp	r2, #0
 8001506:	bf14      	ite	ne
 8001508:	2201      	movne	r2, #1
 800150a:	2200      	moveq	r2, #0
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	701a      	strb	r2, [r3, #0]
	keys[37] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	4837      	ldr	r0, [pc, #220]	; (80015f4 <Keypad4x4_ReadKeypad+0x2f8>)
 8001516:	f004 faa1 	bl	8005a5c <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3325      	adds	r3, #37	; 0x25
 8001522:	2a00      	cmp	r2, #0
 8001524:	bf14      	ite	ne
 8001526:	2201      	movne	r2, #1
 8001528:	2200      	moveq	r2, #0
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
	keys[43] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 800152e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001532:	482e      	ldr	r0, [pc, #184]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 8001534:	f004 fa92 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	332b      	adds	r3, #43	; 0x2b
 8001540:	2a00      	cmp	r2, #0
 8001542:	bf14      	ite	ne
 8001544:	2201      	movne	r2, #1
 8001546:	2200      	moveq	r2, #0
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	701a      	strb	r2, [r3, #0]
	keys[49] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 800154c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001550:	4828      	ldr	r0, [pc, #160]	; (80015f4 <Keypad4x4_ReadKeypad+0x2f8>)
 8001552:	f004 fa83 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3331      	adds	r3, #49	; 0x31
 800155e:	2a00      	cmp	r2, #0
 8001560:	bf14      	ite	ne
 8001562:	2201      	movne	r2, #1
 8001564:	2200      	moveq	r2, #0
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
	keys[55] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 800156a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <Keypad4x4_ReadKeypad+0x2f8>)
 8001570:	f004 fa74 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3337      	adds	r3, #55	; 0x37
 800157c:	2a00      	cmp	r2, #0
 800157e:	bf14      	ite	ne
 8001580:	2201      	movne	r2, #1
 8001582:	2200      	moveq	r2, #0
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
	
	//Step(3): Make Col2 High and check the rows
	//GPIOD->OTYPER |= 0x3F;
	//GPIOD->OTYPER &= ~(1UL << 2);
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800158e:	4817      	ldr	r0, [pc, #92]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 8001590:	f004 fa7c 	bl	8005a8c <HAL_GPIO_WritePin>
	                          |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, Col3_Pin5_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <Keypad4x4_ReadKeypad+0x2f0>)
 800159c:	f004 fa76 	bl	8005a8c <HAL_GPIO_WritePin>
	keys[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80015a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a4:	4812      	ldr	r0, [pc, #72]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 80015a6:	f004 fa59 	bl	8005a5c <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3302      	adds	r3, #2
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2201      	movne	r2, #1
 80015b8:	2200      	moveq	r2, #0
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 80015be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 80015c4:	f004 fa4a 	bl	8005a5c <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3308      	adds	r3, #8
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2201      	movne	r2, #1
 80015d6:	2200      	moveq	r2, #0
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80015dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <Keypad4x4_ReadKeypad+0x2f4>)
 80015e2:	f004 fa3b 	bl	8005a5c <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	e005      	b.n	80015f8 <Keypad4x4_ReadKeypad+0x2fc>
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	330e      	adds	r3, #14
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	bf14      	ite	ne
 8001600:	2201      	movne	r2, #1
 8001602:	2200      	moveq	r2, #0
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
	keys[20] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160c:	48b7      	ldr	r0, [pc, #732]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 800160e:	f004 fa25 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3314      	adds	r3, #20
 800161a:	2a00      	cmp	r2, #0
 800161c:	bf14      	ite	ne
 800161e:	2201      	movne	r2, #1
 8001620:	2200      	moveq	r2, #0
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]
	keys[26] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800162a:	48b0      	ldr	r0, [pc, #704]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 800162c:	f004 fa16 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	331a      	adds	r3, #26
 8001638:	2a00      	cmp	r2, #0
 800163a:	bf14      	ite	ne
 800163c:	2201      	movne	r2, #1
 800163e:	2200      	moveq	r2, #0
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	701a      	strb	r2, [r3, #0]
	keys[32] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001648:	48a8      	ldr	r0, [pc, #672]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 800164a:	f004 fa07 	bl	8005a5c <HAL_GPIO_ReadPin>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3320      	adds	r3, #32
 8001656:	2a00      	cmp	r2, #0
 8001658:	bf14      	ite	ne
 800165a:	2201      	movne	r2, #1
 800165c:	2200      	moveq	r2, #0
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]
	keys[38] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001666:	48a2      	ldr	r0, [pc, #648]	; (80018f0 <Keypad4x4_ReadKeypad+0x5f4>)
 8001668:	f004 f9f8 	bl	8005a5c <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3326      	adds	r3, #38	; 0x26
 8001674:	2a00      	cmp	r2, #0
 8001676:	bf14      	ite	ne
 8001678:	2201      	movne	r2, #1
 800167a:	2200      	moveq	r2, #0
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
	keys[44] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8001680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001684:	489b      	ldr	r0, [pc, #620]	; (80018f4 <Keypad4x4_ReadKeypad+0x5f8>)
 8001686:	f004 f9e9 	bl	8005a5c <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	332c      	adds	r3, #44	; 0x2c
 8001692:	2a00      	cmp	r2, #0
 8001694:	bf14      	ite	ne
 8001696:	2201      	movne	r2, #1
 8001698:	2200      	moveq	r2, #0
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]
	keys[50] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 800169e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a2:	4893      	ldr	r0, [pc, #588]	; (80018f0 <Keypad4x4_ReadKeypad+0x5f4>)
 80016a4:	f004 f9da 	bl	8005a5c <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3332      	adds	r3, #50	; 0x32
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	bf14      	ite	ne
 80016b4:	2201      	movne	r2, #1
 80016b6:	2200      	moveq	r2, #0
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
	keys[56] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 80016bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c0:	488b      	ldr	r0, [pc, #556]	; (80018f0 <Keypad4x4_ReadKeypad+0x5f4>)
 80016c2:	f004 f9cb 	bl	8005a5c <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3338      	adds	r3, #56	; 0x38
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	bf14      	ite	ne
 80016d2:	2201      	movne	r2, #1
 80016d4:	2200      	moveq	r2, #0
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
	
	//Step(4): Make Col3 High and check the rows
	//GPIOD->OTYPER |= 0x3F;
	//GPIOD->OTYPER &= ~(1UL << 3);
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80016e0:	4884      	ldr	r0, [pc, #528]	; (80018f4 <Keypad4x4_ReadKeypad+0x5f8>)
 80016e2:	f004 f9d3 	bl	8005a8c <HAL_GPIO_WritePin>
		                          |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, Col4_Pin7_Pin, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ec:	4881      	ldr	r0, [pc, #516]	; (80018f4 <Keypad4x4_ReadKeypad+0x5f8>)
 80016ee:	f004 f9cd 	bl	8005a8c <HAL_GPIO_WritePin>
	keys[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80016f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f6:	487d      	ldr	r0, [pc, #500]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 80016f8:	f004 f9b0 	bl	8005a5c <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3303      	adds	r3, #3
 8001704:	2a00      	cmp	r2, #0
 8001706:	bf14      	ite	ne
 8001708:	2201      	movne	r2, #1
 800170a:	2200      	moveq	r2, #0
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8001710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001714:	4875      	ldr	r0, [pc, #468]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 8001716:	f004 f9a1 	bl	8005a5c <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3309      	adds	r3, #9
 8001722:	2a00      	cmp	r2, #0
 8001724:	bf14      	ite	ne
 8001726:	2201      	movne	r2, #1
 8001728:	2200      	moveq	r2, #0
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800172e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001732:	486e      	ldr	r0, [pc, #440]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 8001734:	f004 f992 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	330f      	adds	r3, #15
 8001740:	2a00      	cmp	r2, #0
 8001742:	bf14      	ite	ne
 8001744:	2201      	movne	r2, #1
 8001746:	2200      	moveq	r2, #0
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
	keys[21] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800174c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001750:	4866      	ldr	r0, [pc, #408]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 8001752:	f004 f983 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3315      	adds	r3, #21
 800175e:	2a00      	cmp	r2, #0
 8001760:	bf14      	ite	ne
 8001762:	2201      	movne	r2, #1
 8001764:	2200      	moveq	r2, #0
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	701a      	strb	r2, [r3, #0]
	keys[27] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800176a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176e:	485f      	ldr	r0, [pc, #380]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 8001770:	f004 f974 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	331b      	adds	r3, #27
 800177c:	2a00      	cmp	r2, #0
 800177e:	bf14      	ite	ne
 8001780:	2201      	movne	r2, #1
 8001782:	2200      	moveq	r2, #0
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
	keys[33] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178c:	4857      	ldr	r0, [pc, #348]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 800178e:	f004 f965 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3321      	adds	r3, #33	; 0x21
 800179a:	2a00      	cmp	r2, #0
 800179c:	bf14      	ite	ne
 800179e:	2201      	movne	r2, #1
 80017a0:	2200      	moveq	r2, #0
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]
	keys[39] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80017a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017aa:	4851      	ldr	r0, [pc, #324]	; (80018f0 <Keypad4x4_ReadKeypad+0x5f4>)
 80017ac:	f004 f956 	bl	8005a5c <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3327      	adds	r3, #39	; 0x27
 80017b8:	2a00      	cmp	r2, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2201      	movne	r2, #1
 80017be:	2200      	moveq	r2, #0
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
	keys[45] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 80017c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c8:	484a      	ldr	r0, [pc, #296]	; (80018f4 <Keypad4x4_ReadKeypad+0x5f8>)
 80017ca:	f004 f947 	bl	8005a5c <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	332d      	adds	r3, #45	; 0x2d
 80017d6:	2a00      	cmp	r2, #0
 80017d8:	bf14      	ite	ne
 80017da:	2201      	movne	r2, #1
 80017dc:	2200      	moveq	r2, #0
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
	keys[51] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 80017e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e6:	4842      	ldr	r0, [pc, #264]	; (80018f0 <Keypad4x4_ReadKeypad+0x5f4>)
 80017e8:	f004 f938 	bl	8005a5c <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3333      	adds	r3, #51	; 0x33
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	bf14      	ite	ne
 80017f8:	2201      	movne	r2, #1
 80017fa:	2200      	moveq	r2, #0
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	701a      	strb	r2, [r3, #0]
	keys[57] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001804:	483a      	ldr	r0, [pc, #232]	; (80018f0 <Keypad4x4_ReadKeypad+0x5f4>)
 8001806:	f004 f929 	bl	8005a5c <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3339      	adds	r3, #57	; 0x39
 8001812:	2a00      	cmp	r2, #0
 8001814:	bf14      	ite	ne
 8001816:	2201      	movne	r2, #1
 8001818:	2200      	moveq	r2, #0
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

	//GPIOD->OTYPER |= 0x3F;
	//GPIOD->OTYPER &= ~(1UL << 4);
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001824:	4833      	ldr	r0, [pc, #204]	; (80018f4 <Keypad4x4_ReadKeypad+0x5f8>)
 8001826:	f004 f931 	bl	8005a8c <HAL_GPIO_WritePin>
			                          |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, Col5_Pin9_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001830:	4830      	ldr	r0, [pc, #192]	; (80018f4 <Keypad4x4_ReadKeypad+0x5f8>)
 8001832:	f004 f92b 	bl	8005a8c <HAL_GPIO_WritePin>
	keys[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8001836:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800183a:	482c      	ldr	r0, [pc, #176]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 800183c:	f004 f90e 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3304      	adds	r3, #4
 8001848:	2a00      	cmp	r2, #0
 800184a:	bf14      	ite	ne
 800184c:	2201      	movne	r2, #1
 800184e:	2200      	moveq	r2, #0
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8001854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001858:	4824      	ldr	r0, [pc, #144]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 800185a:	f004 f8ff 	bl	8005a5c <HAL_GPIO_ReadPin>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	330a      	adds	r3, #10
 8001866:	2a00      	cmp	r2, #0
 8001868:	bf14      	ite	ne
 800186a:	2201      	movne	r2, #1
 800186c:	2200      	moveq	r2, #0
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]
	keys[16] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001876:	481d      	ldr	r0, [pc, #116]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 8001878:	f004 f8f0 	bl	8005a5c <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3310      	adds	r3, #16
 8001884:	2a00      	cmp	r2, #0
 8001886:	bf14      	ite	ne
 8001888:	2201      	movne	r2, #1
 800188a:	2200      	moveq	r2, #0
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]
	keys[22] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8001890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001894:	4815      	ldr	r0, [pc, #84]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 8001896:	f004 f8e1 	bl	8005a5c <HAL_GPIO_ReadPin>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3316      	adds	r3, #22
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	bf14      	ite	ne
 80018a6:	2201      	movne	r2, #1
 80018a8:	2200      	moveq	r2, #0
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]
	keys[28] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80018ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 80018b4:	f004 f8d2 	bl	8005a5c <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	331c      	adds	r3, #28
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2201      	movne	r2, #1
 80018c6:	2200      	moveq	r2, #0
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]
	keys[34] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80018cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <Keypad4x4_ReadKeypad+0x5f0>)
 80018d2:	f004 f8c3 	bl	8005a5c <HAL_GPIO_ReadPin>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3322      	adds	r3, #34	; 0x22
 80018de:	2a00      	cmp	r2, #0
 80018e0:	bf14      	ite	ne
 80018e2:	2201      	movne	r2, #1
 80018e4:	2200      	moveq	r2, #0
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	e006      	b.n	80018f8 <Keypad4x4_ReadKeypad+0x5fc>
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	701a      	strb	r2, [r3, #0]
	keys[40] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	4870      	ldr	r0, [pc, #448]	; (8001ac0 <Keypad4x4_ReadKeypad+0x7c4>)
 8001900:	f004 f8ac 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3328      	adds	r3, #40	; 0x28
 800190c:	2a00      	cmp	r2, #0
 800190e:	bf14      	ite	ne
 8001910:	2201      	movne	r2, #1
 8001912:	2200      	moveq	r2, #0
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	701a      	strb	r2, [r3, #0]
	keys[46] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8001918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191c:	4869      	ldr	r0, [pc, #420]	; (8001ac4 <Keypad4x4_ReadKeypad+0x7c8>)
 800191e:	f004 f89d 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	332e      	adds	r3, #46	; 0x2e
 800192a:	2a00      	cmp	r2, #0
 800192c:	bf14      	ite	ne
 800192e:	2201      	movne	r2, #1
 8001930:	2200      	moveq	r2, #0
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]
	keys[52] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 8001936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800193a:	4861      	ldr	r0, [pc, #388]	; (8001ac0 <Keypad4x4_ReadKeypad+0x7c4>)
 800193c:	f004 f88e 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3334      	adds	r3, #52	; 0x34
 8001948:	2a00      	cmp	r2, #0
 800194a:	bf14      	ite	ne
 800194c:	2201      	movne	r2, #1
 800194e:	2200      	moveq	r2, #0
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	701a      	strb	r2, [r3, #0]
	keys[58] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001958:	4859      	ldr	r0, [pc, #356]	; (8001ac0 <Keypad4x4_ReadKeypad+0x7c4>)
 800195a:	f004 f87f 	bl	8005a5c <HAL_GPIO_ReadPin>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	333a      	adds	r3, #58	; 0x3a
 8001966:	2a00      	cmp	r2, #0
 8001968:	bf14      	ite	ne
 800196a:	2201      	movne	r2, #1
 800196c:	2200      	moveq	r2, #0
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

	//GPIOD->OTYPER |= 0x3F;
	//GPIOD->OTYPER &= ~(1UL << 5);
	HAL_GPIO_WritePin(GPIOE, Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin|Col4_Pin7_Pin
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001978:	4852      	ldr	r0, [pc, #328]	; (8001ac4 <Keypad4x4_ReadKeypad+0x7c8>)
 800197a:	f004 f887 	bl	8005a8c <HAL_GPIO_WritePin>
				                          |Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, Col6_Pin11_Pin, GPIO_PIN_SET);
 800197e:	2201      	movs	r2, #1
 8001980:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001984:	484f      	ldr	r0, [pc, #316]	; (8001ac4 <Keypad4x4_ReadKeypad+0x7c8>)
 8001986:	f004 f881 	bl	8005a8c <HAL_GPIO_WritePin>
	keys[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 800198a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198e:	484e      	ldr	r0, [pc, #312]	; (8001ac8 <Keypad4x4_ReadKeypad+0x7cc>)
 8001990:	f004 f864 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3305      	adds	r3, #5
 800199c:	2a00      	cmp	r2, #0
 800199e:	bf14      	ite	ne
 80019a0:	2201      	movne	r2, #1
 80019a2:	2200      	moveq	r2, #0
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 80019a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ac:	4846      	ldr	r0, [pc, #280]	; (8001ac8 <Keypad4x4_ReadKeypad+0x7cc>)
 80019ae:	f004 f855 	bl	8005a5c <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	330b      	adds	r3, #11
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	bf14      	ite	ne
 80019be:	2201      	movne	r2, #1
 80019c0:	2200      	moveq	r2, #0
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]
	keys[17] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80019c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ca:	483f      	ldr	r0, [pc, #252]	; (8001ac8 <Keypad4x4_ReadKeypad+0x7cc>)
 80019cc:	f004 f846 	bl	8005a5c <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3311      	adds	r3, #17
 80019d8:	2a00      	cmp	r2, #0
 80019da:	bf14      	ite	ne
 80019dc:	2201      	movne	r2, #1
 80019de:	2200      	moveq	r2, #0
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	701a      	strb	r2, [r3, #0]
	keys[23] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	4837      	ldr	r0, [pc, #220]	; (8001ac8 <Keypad4x4_ReadKeypad+0x7cc>)
 80019ea:	f004 f837 	bl	8005a5c <HAL_GPIO_ReadPin>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3317      	adds	r3, #23
 80019f6:	2a00      	cmp	r2, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2201      	movne	r2, #1
 80019fc:	2200      	moveq	r2, #0
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]
	keys[29] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a06:	4830      	ldr	r0, [pc, #192]	; (8001ac8 <Keypad4x4_ReadKeypad+0x7cc>)
 8001a08:	f004 f828 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	331d      	adds	r3, #29
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2201      	movne	r2, #1
 8001a1a:	2200      	moveq	r2, #0
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
	keys[35] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a24:	4828      	ldr	r0, [pc, #160]	; (8001ac8 <Keypad4x4_ReadKeypad+0x7cc>)
 8001a26:	f004 f819 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3323      	adds	r3, #35	; 0x23
 8001a32:	2a00      	cmp	r2, #0
 8001a34:	bf14      	ite	ne
 8001a36:	2201      	movne	r2, #1
 8001a38:	2200      	moveq	r2, #0
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
	keys[41] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a42:	481f      	ldr	r0, [pc, #124]	; (8001ac0 <Keypad4x4_ReadKeypad+0x7c4>)
 8001a44:	f004 f80a 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3329      	adds	r3, #41	; 0x29
 8001a50:	2a00      	cmp	r2, #0
 8001a52:	bf14      	ite	ne
 8001a54:	2201      	movne	r2, #1
 8001a56:	2200      	moveq	r2, #0
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
	keys[47] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <Keypad4x4_ReadKeypad+0x7c8>)
 8001a62:	f003 fffb 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	332f      	adds	r3, #47	; 0x2f
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	bf14      	ite	ne
 8001a72:	2201      	movne	r2, #1
 8001a74:	2200      	moveq	r2, #0
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]
	keys[53] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);
 8001a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a7e:	4810      	ldr	r0, [pc, #64]	; (8001ac0 <Keypad4x4_ReadKeypad+0x7c4>)
 8001a80:	f003 ffec 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3335      	adds	r3, #53	; 0x35
 8001a8c:	2a00      	cmp	r2, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2201      	movne	r2, #1
 8001a92:	2200      	moveq	r2, #0
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
	keys[59] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8001a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <Keypad4x4_ReadKeypad+0x7c4>)
 8001a9e:	f003 ffdd 	bl	8005a5c <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	333b      	adds	r3, #59	; 0x3b
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2201      	movne	r2, #1
 8001ab0:	2200      	moveq	r2, #0
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

}	
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40020400 	.word	0x40020400

08001acc <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	f043 030c 	orr.w	r3, r3, #12
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	723b      	strb	r3, [r7, #8]
 8001aee:	7bbb      	ldrb	r3, [r7, #14]
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	727b      	strb	r3, [r7, #9]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	f043 030c 	orr.w	r3, r3, #12
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	72bb      	strb	r3, [r7, #10]
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <lcd16x2_i2c_sendCommand+0x60>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <lcd16x2_i2c_sendCommand+0x64>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b299      	uxth	r1, r3
 8001b16:	f107 0208 	add.w	r2, r7, #8
 8001b1a:	23c8      	movs	r3, #200	; 0xc8
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2304      	movs	r3, #4
 8001b20:	f004 f938 	bl	8005d94 <HAL_I2C_Master_Transmit>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200000f0 	.word	0x200000f0
 8001b30:	200000f4 	.word	0x200000f4

08001b34 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f023 030f 	bic.w	r3, r3, #15
 8001b4a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	f043 030d 	orr.w	r3, r3, #13
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	723b      	strb	r3, [r7, #8]
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	f043 0309 	orr.w	r3, r3, #9
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	727b      	strb	r3, [r7, #9]
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	f043 030d 	orr.w	r3, r3, #13
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	72bb      	strb	r3, [r7, #10]
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	f043 0309 	orr.w	r3, r3, #9
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <lcd16x2_i2c_sendData+0x60>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <lcd16x2_i2c_sendData+0x64>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	f107 0208 	add.w	r2, r7, #8
 8001b82:	23c8      	movs	r3, #200	; 0xc8
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2304      	movs	r3, #4
 8001b88:	f004 f904 	bl	8005d94 <HAL_I2C_Master_Transmit>
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200000f0 	.word	0x200000f0
 8001b98:	200000f4 	.word	0x200000f4

08001b9c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8001ba4:	2032      	movs	r0, #50	; 0x32
 8001ba6:	f003 f815 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8001baa:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <lcd16x2_i2c_init+0xd0>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <lcd16x2_i2c_init+0xd0>)
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bb8:	2205      	movs	r2, #5
 8001bba:	214e      	movs	r1, #78	; 0x4e
 8001bbc:	f004 fc0e 	bl	80063dc <HAL_I2C_IsDeviceReady>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d010      	beq.n	8001be8 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8001bc6:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <lcd16x2_i2c_init+0xd0>)
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bce:	2205      	movs	r2, #5
 8001bd0:	217e      	movs	r1, #126	; 0x7e
 8001bd2:	f004 fc03 	bl	80063dc <HAL_I2C_IsDeviceReady>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e040      	b.n	8001c62 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <lcd16x2_i2c_init+0xd4>)
 8001be2:	227e      	movs	r2, #126	; 0x7e
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e002      	b.n	8001bee <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <lcd16x2_i2c_init+0xd4>)
 8001bea:	224e      	movs	r2, #78	; 0x4e
 8001bec:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8001bee:	202d      	movs	r0, #45	; 0x2d
 8001bf0:	f002 fff0 	bl	8004bd4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001bf4:	2030      	movs	r0, #48	; 0x30
 8001bf6:	f7ff ff69 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f002 ffea 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001c00:	2030      	movs	r0, #48	; 0x30
 8001c02:	f7ff ff63 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f002 ffe4 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001c0c:	2030      	movs	r0, #48	; 0x30
 8001c0e:	f7ff ff5d 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001c12:	2008      	movs	r0, #8
 8001c14:	f002 ffde 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001c18:	2020      	movs	r0, #32
 8001c1a:	f7ff ff57 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f002 ffd8 	bl	8004bd4 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001c24:	2028      	movs	r0, #40	; 0x28
 8001c26:	f7ff ff51 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f002 ffd2 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001c30:	2008      	movs	r0, #8
 8001c32:	f7ff ff4b 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f002 ffcc 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f7ff ff45 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001c42:	2003      	movs	r0, #3
 8001c44:	f002 ffc6 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8001c48:	2006      	movs	r0, #6
 8001c4a:	f7ff ff3f 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f002 ffc0 	bl	8004bd4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001c54:	200c      	movs	r0, #12
 8001c56:	f7ff ff39 	bl	8001acc <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f002 ffba 	bl	8004bd4 <HAL_Delay>

  return true;
 8001c60:	2301      	movs	r3, #1
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200000f0 	.word	0x200000f0
 8001c70:	200000f4 	.word	0x200000f4

08001c74 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d108      	bne.n	8001ca4 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c98:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff15 	bl	8001acc <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8001ca2:	e007      	b.n	8001cb4 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001caa:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ff0c 	bl	8001acc <lcd16x2_i2c_sendCommand>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff ffd6 	bl	8001c74 <lcd16x2_i2c_setCursor>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff ffce 	bl	8001c74 <lcd16x2_i2c_setCursor>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8001cdc:	b40f      	push	{r0, r1, r2, r3}
 8001cde:	b590      	push	{r4, r7, lr}
 8001ce0:	b089      	sub	sp, #36	; 0x24
 8001ce2:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001ce4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ce8:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001cea:	f107 0308 	add.w	r3, r7, #8
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f00b fb1e 	bl	800d334 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	77fb      	strb	r3, [r7, #31]
 8001cfc:	e00b      	b.n	8001d16 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
 8001d00:	f107 0220 	add.w	r2, r7, #32
 8001d04:	4413      	add	r3, r2
 8001d06:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff12 	bl	8001b34 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	3301      	adds	r3, #1
 8001d14:	77fb      	strb	r3, [r7, #31]
 8001d16:	7ffc      	ldrb	r4, [r7, #31]
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fa57 	bl	80001d0 <strlen>
 8001d22:	4603      	mov	r3, r0
 8001d24:	429c      	cmp	r4, r3
 8001d26:	d202      	bcs.n	8001d2e <lcd16x2_i2c_printf+0x52>
 8001d28:	7ffb      	ldrb	r3, [r7, #31]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	d9e7      	bls.n	8001cfe <lcd16x2_i2c_printf+0x22>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001d38:	b004      	add	sp, #16
 8001d3a:	4770      	bx	lr

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <__NVIC_EnableIRQ+0x38>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <TIM6_DAC_IRQHandler>:
    int 	time;
    //int     step;
    int     offset;
} kvoice[60];

void TIM6_DAC_IRQHandler(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

	clearLED();
 8001dd2:	f002 f8bf 	bl	8003f54 <clearLED>
    DAC->SWTRIGR |= DAC_SWTRIGR_SWTRIG1;
 8001dd6:	4ba4      	ldr	r3, [pc, #656]	; (8002068 <TIM6_DAC_IRQHandler+0x29c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4aa3      	ldr	r2, [pc, #652]	; (8002068 <TIM6_DAC_IRQHandler+0x29c>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
    TIM6->SR &= ~TIM_SR_UIF;
 8001de2:	4ba2      	ldr	r3, [pc, #648]	; (800206c <TIM6_DAC_IRQHandler+0x2a0>)
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	4aa1      	ldr	r2, [pc, #644]	; (800206c <TIM6_DAC_IRQHandler+0x2a0>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6113      	str	r3, [r2, #16]

    int x;
    int sample = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
    if(gMode){
 8001df2:	4b9f      	ldr	r3, [pc, #636]	; (8002070 <TIM6_DAC_IRQHandler+0x2a4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d045      	beq.n	8001e86 <TIM6_DAC_IRQHandler+0xba>
        for(x=0; x < 60; x++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	e03e      	b.n	8001e7e <TIM6_DAC_IRQHandler+0xb2>

        		if (mys[x]) {
 8001e00:	4a9c      	ldr	r2, [pc, #624]	; (8002074 <TIM6_DAC_IRQHandler+0x2a8>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d035      	beq.n	8001e78 <TIM6_DAC_IRQHandler+0xac>
        				setRed(x);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f002 f87b 	bl	8003f0c <setRed>
                		//kvoice[x].time = ktime;
                		kvoice[x].offset += step[x+25];
 8001e16:	4a98      	ldr	r2, [pc, #608]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3319      	adds	r3, #25
 8001e24:	4995      	ldr	r1, [pc, #596]	; (800207c <TIM6_DAC_IRQHandler+0x2b0>)
 8001e26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e2a:	441a      	add	r2, r3
 8001e2c:	4992      	ldr	r1, [pc, #584]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	605a      	str	r2, [r3, #4]
                		if (kvoice[x].offset >= N<<16)
 8001e36:	4a90      	ldr	r2, [pc, #576]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8001e44:	db0b      	blt.n	8001e5e <TIM6_DAC_IRQHandler+0x92>
                		kvoice[x].offset -= N<<16;
 8001e46:	4a8c      	ldr	r2, [pc, #560]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5a3 02c8 	sub.w	r2, r3, #6553600	; 0x640000
 8001e54:	4988      	ldr	r1, [pc, #544]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	605a      	str	r2, [r3, #4]

                    sample += wavetable[kvoice[x].offset>>16];
 8001e5e:	4a86      	ldr	r2, [pc, #536]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	141b      	asrs	r3, r3, #16
 8001e6a:	4a85      	ldr	r2, [pc, #532]	; (8002080 <TIM6_DAC_IRQHandler+0x2b4>)
 8001e6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e70:	461a      	mov	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	603b      	str	r3, [r7, #0]
        for(x=0; x < 60; x++) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b3b      	cmp	r3, #59	; 0x3b
 8001e82:	ddbd      	ble.n	8001e00 <TIM6_DAC_IRQHandler+0x34>
 8001e84:	e0d3      	b.n	800202e <TIM6_DAC_IRQHandler+0x262>
                }
        }
    }
    else if(tMode){
 8001e86:	4b7f      	ldr	r3, [pc, #508]	; (8002084 <TIM6_DAC_IRQHandler+0x2b8>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d061      	beq.n	8001f52 <TIM6_DAC_IRQHandler+0x186>
    	for(x=0; x < 60; x++) {
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	e039      	b.n	8001f08 <TIM6_DAC_IRQHandler+0x13c>
    	        	if (mys[x]) {
 8001e94:	4a77      	ldr	r2, [pc, #476]	; (8002074 <TIM6_DAC_IRQHandler+0x2a8>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d030      	beq.n	8001f02 <TIM6_DAC_IRQHandler+0x136>

    	                	//kvoice[x].time = ktime;
    	                	kvoice[x].offset += step[x+25];
 8001ea0:	4a75      	ldr	r2, [pc, #468]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3319      	adds	r3, #25
 8001eae:	4973      	ldr	r1, [pc, #460]	; (800207c <TIM6_DAC_IRQHandler+0x2b0>)
 8001eb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	4970      	ldr	r1, [pc, #448]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	605a      	str	r2, [r3, #4]
    	                	if (kvoice[x].offset >= N<<16)
 8001ec0:	4a6d      	ldr	r2, [pc, #436]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8001ece:	db0b      	blt.n	8001ee8 <TIM6_DAC_IRQHandler+0x11c>
    	                	kvoice[x].offset -= N<<16;
 8001ed0:	4a69      	ldr	r2, [pc, #420]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5a3 02c8 	sub.w	r2, r3, #6553600	; 0x640000
 8001ede:	4966      	ldr	r1, [pc, #408]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	605a      	str	r2, [r3, #4]
    	                    sample += wavetable[kvoice[x].offset>>16];
 8001ee8:	4a63      	ldr	r2, [pc, #396]	; (8002078 <TIM6_DAC_IRQHandler+0x2ac>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	141b      	asrs	r3, r3, #16
 8001ef4:	4a62      	ldr	r2, [pc, #392]	; (8002080 <TIM6_DAC_IRQHandler+0x2b4>)
 8001ef6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	603b      	str	r3, [r7, #0]
    	for(x=0; x < 60; x++) {
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3301      	adds	r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b3b      	cmp	r3, #59	; 0x3b
 8001f0c:	ddc2      	ble.n	8001e94 <TIM6_DAC_IRQHandler+0xc8>
    	            }

    	}
    	for(x=0; x < 15; x++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	e01a      	b.n	8001f4a <TIM6_DAC_IRQHandler+0x17e>
    				if (voice[x].in_use) {
 8001f14:	495c      	ldr	r1, [pc, #368]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00d      	beq.n	8001f44 <TIM6_DAC_IRQHandler+0x178>
    					setRed(voice[x].note-25);
 8001f28:	4957      	ldr	r1, [pc, #348]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	3301      	adds	r3, #1
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3b19      	subs	r3, #25
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f001 ffe4 	bl	8003f0c <setRed>
    	for(x=0; x < 15; x++) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0e      	cmp	r3, #14
 8001f4e:	dde1      	ble.n	8001f14 <TIM6_DAC_IRQHandler+0x148>
 8001f50:	e06d      	b.n	800202e <TIM6_DAC_IRQHandler+0x262>
    				}
    	}
    }
    else{
		for(x=0; x < sizeof(voice)/sizeof(voice[0]); x++) {
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	e067      	b.n	8002028 <TIM6_DAC_IRQHandler+0x25c>
			if (voice[x].in_use) {
 8001f58:	494b      	ldr	r1, [pc, #300]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d05a      	beq.n	8002022 <TIM6_DAC_IRQHandler+0x256>
				setRed(voice[x].note-25);
 8001f6c:	4946      	ldr	r1, [pc, #280]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	3b19      	subs	r3, #25
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f001 ffc2 	bl	8003f0c <setRed>
					voice[x].offset += voice[x].step;
 8001f88:	493f      	ldr	r1, [pc, #252]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	3308      	adds	r3, #8
 8001f98:	6819      	ldr	r1, [r3, #0]
 8001f9a:	483b      	ldr	r0, [pc, #236]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4403      	add	r3, r0
 8001fa8:	3304      	adds	r3, #4
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4419      	add	r1, r3
 8001fae:	4836      	ldr	r0, [pc, #216]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4403      	add	r3, r0
 8001fbc:	3308      	adds	r3, #8
 8001fbe:	6019      	str	r1, [r3, #0]
					if (voice[x].offset >= N<<16)
 8001fc0:	4931      	ldr	r1, [pc, #196]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3308      	adds	r3, #8
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8001fd6:	db13      	blt.n	8002000 <TIM6_DAC_IRQHandler+0x234>
						voice[x].offset -= N<<16;
 8001fd8:	492b      	ldr	r1, [pc, #172]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f5a3 01c8 	sub.w	r1, r3, #6553600	; 0x640000
 8001fee:	4826      	ldr	r0, [pc, #152]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4403      	add	r3, r0
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	6019      	str	r1, [r3, #0]
					sample += wavetable[voice[x].offset>>16];
 8002000:	4921      	ldr	r1, [pc, #132]	; (8002088 <TIM6_DAC_IRQHandler+0x2bc>)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3308      	adds	r3, #8
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	141b      	asrs	r3, r3, #16
 8002014:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <TIM6_DAC_IRQHandler+0x2b4>)
 8002016:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4413      	add	r3, r2
 8002020:	603b      	str	r3, [r7, #0]
		for(x=0; x < sizeof(voice)/sizeof(voice[0]); x++) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3301      	adds	r3, #1
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b0e      	cmp	r3, #14
 800202c:	d994      	bls.n	8001f58 <TIM6_DAC_IRQHandler+0x18c>
		}
    }



    sample =  sample / 128 + 2048;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	da00      	bge.n	8002036 <TIM6_DAC_IRQHandler+0x26a>
 8002034:	337f      	adds	r3, #127	; 0x7f
 8002036:	11db      	asrs	r3, r3, #7
 8002038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800203c:	603b      	str	r3, [r7, #0]
    if (sample > 4095) sample = 4095;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002044:	db03      	blt.n	800204e <TIM6_DAC_IRQHandler+0x282>
 8002046:	f640 73ff 	movw	r3, #4095	; 0xfff
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	e004      	b.n	8002058 <TIM6_DAC_IRQHandler+0x28c>
    else if (sample < 0) sample = 0;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da01      	bge.n	8002058 <TIM6_DAC_IRQHandler+0x28c>
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
    DAC->DHR12R1 = sample;
 8002058:	4a03      	ldr	r2, [pc, #12]	; (8002068 <TIM6_DAC_IRQHandler+0x29c>)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6093      	str	r3, [r2, #8]
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40007400 	.word	0x40007400
 800206c:	40001000 	.word	0x40001000
 8002070:	20000000 	.word	0x20000000
 8002074:	200004d0 	.word	0x200004d0
 8002078:	20001698 	.word	0x20001698
 800207c:	0800ec40 	.word	0x0800ec40
 8002080:	20000408 	.word	0x20000408
 8002084:	200000f6 	.word	0x200000f6
 8002088:	20000560 	.word	0x20000560

0800208c <init_DAC>:

void init_DAC(void) {
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
	//RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <init_DAC+0x70>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <init_DAC+0x70>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= 0x300;
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <init_DAC+0x74>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <init_DAC+0x74>)
 80020a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020a6:	6013      	str	r3, [r2, #0]
    RCC->APB1ENR |= RCC_APB1ENR_DACEN;
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <init_DAC+0x70>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <init_DAC+0x70>)
 80020ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
    DAC->CR &= ~DAC_CR_EN1; //disables the DAC so it can be messed with
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <init_DAC+0x78>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <init_DAC+0x78>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]
    DAC->CR &= ~DAC_CR_BOFF1;
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <init_DAC+0x78>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <init_DAC+0x78>)
 80020c6:	f023 0302 	bic.w	r3, r3, #2
 80020ca:	6013      	str	r3, [r2, #0]
    DAC->CR |= DAC_CR_TEN1;
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <init_DAC+0x78>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <init_DAC+0x78>)
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	6013      	str	r3, [r2, #0]
    DAC->CR |= DAC_CR_TSEL1;//software
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <init_DAC+0x78>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <init_DAC+0x78>)
 80020de:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80020e2:	6013      	str	r3, [r2, #0]
    DAC->CR |= DAC_CR_EN1; //re-enables the DAC
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <init_DAC+0x78>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a06      	ldr	r2, [pc, #24]	; (8002104 <init_DAC+0x78>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6013      	str	r3, [r2, #0]

}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	40007400 	.word	0x40007400

08002108 <init_TIM6>:


void init_TIM6(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <init_TIM6+0x58>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <init_TIM6+0x58>)
 8002112:	f043 0310 	orr.w	r3, r3, #16
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
    TIM6->PSC = 419;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <init_TIM6+0x5c>)
 800211a:	f240 12a3 	movw	r2, #419	; 0x1a3
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
    TIM6->ARR = ((84000000 / (TIM6->PSC + 1)) / RATE) - 1;
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <init_TIM6+0x5c>)
 8002122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002124:	3301      	adds	r3, #1
 8002126:	f241 0268 	movw	r2, #4200	; 0x1068
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <init_TIM6+0x5c>)
 8002130:	3b01      	subs	r3, #1
 8002132:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM6->DIER |= TIM_DIER_UIE;
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <init_TIM6+0x5c>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <init_TIM6+0x5c>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	60d3      	str	r3, [r2, #12]
    TIM6->CR1 |= TIM_CR1_CEN;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <init_TIM6+0x5c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <init_TIM6+0x5c>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214c:	2036      	movs	r0, #54	; 0x36
 800214e:	f7ff fdf5 	bl	8001d3c <__NVIC_EnableIRQ>

    NVIC_SetPriority(TIM6_DAC_IRQn,0);
 8002152:	2100      	movs	r1, #0
 8002154:	2036      	movs	r0, #54	; 0x36
 8002156:	f7ff fe0f 	bl	8001d78 <__NVIC_SetPriority>


}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40001000 	.word	0x40001000

08002168 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
    TIM2->SR &= ~TIM_SR_UIF;
 800216c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6113      	str	r3, [r2, #16]
    if(!gMode)
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <TIM2_IRQHandler+0x2c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <TIM2_IRQHandler+0x26>
    	midi_play();
 800218a:	f001 faad 	bl	80036e8 <midi_play>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000

08002198 <init_TIM2>:

void init_TIM2(int n) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <init_TIM2+0x6c>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <init_TIM2+0x6c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 83;
 80021ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021b0:	2253      	movs	r2, #83	; 0x53
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = n-1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1e5a      	subs	r2, r3, #1
 80021b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 80021be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_ARPE;
 80021ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= TIM_CR1_CEN;
 80021de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);
 80021ee:	201c      	movs	r0, #28
 80021f0:	f7ff fda4 	bl	8001d3c <__NVIC_EnableIRQ>

    NVIC_SetPriority(TIM2_IRQn,3);
 80021f4:	2103      	movs	r1, #3
 80021f6:	201c      	movs	r0, #28
 80021f8:	f7ff fdbe 	bl	8001d78 <__NVIC_SetPriority>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800

08002208 <init_hybrid>:


void init_hybrid(void) {
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
    int x;
    for(x=0; x<N; x++)
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	e04d      	b.n	80022b0 <init_hybrid+0xa8>
        wavetable[x] = 16383  * sin(2 * M_PI * x / N) +  16383.0 * (x - N/2) / (1.0*N);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7fe f985 	bl	8000524 <__aeabi_i2d>
 800221a:	a32d      	add	r3, pc, #180	; (adr r3, 80022d0 <init_hybrid+0xc8>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe f9ea 	bl	80005f8 <__aeabi_dmul>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4618      	mov	r0, r3
 800222a:	4621      	mov	r1, r4
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <init_hybrid+0xc0>)
 8002232:	f7fe fb0b 	bl	800084c <__aeabi_ddiv>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	ec44 3b17 	vmov	d7, r3, r4
 800223e:	eeb0 0a47 	vmov.f32	s0, s14
 8002242:	eef0 0a67 	vmov.f32	s1, s15
 8002246:	f00b fc5b 	bl	800db00 <sin>
 800224a:	ec51 0b10 	vmov	r0, r1, d0
 800224e:	a31c      	add	r3, pc, #112	; (adr r3, 80022c0 <init_hybrid+0xb8>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f9d0 	bl	80005f8 <__aeabi_dmul>
 8002258:	4603      	mov	r3, r0
 800225a:	460c      	mov	r4, r1
 800225c:	4625      	mov	r5, r4
 800225e:	461c      	mov	r4, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b32      	subs	r3, #50	; 0x32
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f95d 	bl	8000524 <__aeabi_i2d>
 800226a:	a315      	add	r3, pc, #84	; (adr r3, 80022c0 <init_hybrid+0xb8>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	f7fe f9c2 	bl	80005f8 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <init_hybrid+0xc0>)
 8002282:	f7fe fae3 	bl	800084c <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4620      	mov	r0, r4
 800228c:	4629      	mov	r1, r5
 800228e:	f7fd fffd 	bl	800028c <__adddf3>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
 8002296:	4618      	mov	r0, r3
 8002298:	4621      	mov	r1, r4
 800229a:	f7fe fc47 	bl	8000b2c <__aeabi_d2iz>
 800229e:	4603      	mov	r3, r0
 80022a0:	b219      	sxth	r1, r3
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <init_hybrid+0xc4>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(x=0; x<N; x++)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3301      	adds	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b63      	cmp	r3, #99	; 0x63
 80022b4:	ddae      	ble.n	8002214 <init_hybrid+0xc>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bdb0      	pop	{r4, r5, r7, pc}
 80022be:	bf00      	nop
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40cfff80 	.word	0x40cfff80
 80022c8:	40590000 	.word	0x40590000
 80022cc:	20000408 	.word	0x20000408
 80022d0:	54442d18 	.word	0x54442d18
 80022d4:	401921fb 	.word	0x401921fb

080022d8 <note_off>:



// Find the voice current playing a note, and turn it off.
void note_off(int time, int chan, int key, int velo)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
    int n;
    for(n=0; n<sizeof voice / sizeof voice[0]; n++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e046      	b.n	800237a <note_off+0xa2>
        if (voice[n].in_use && voice[n].note == key) {
 80022ec:	4927      	ldr	r1, [pc, #156]	; (800238c <note_off+0xb4>)
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d039      	beq.n	8002374 <note_off+0x9c>
 8002300:	4922      	ldr	r1, [pc, #136]	; (800238c <note_off+0xb4>)
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3301      	adds	r3, #1
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4293      	cmp	r3, r2
 8002318:	d12c      	bne.n	8002374 <note_off+0x9c>
            voice[n].in_use = 0; // disable it first...
 800231a:	491c      	ldr	r1, [pc, #112]	; (800238c <note_off+0xb4>)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	2200      	movs	r2, #0
 800232a:	701a      	strb	r2, [r3, #0]
            voice[n].chan = 0;   // ...then clear its values
 800232c:	4917      	ldr	r1, [pc, #92]	; (800238c <note_off+0xb4>)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	3302      	adds	r3, #2
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
            voice[n].note = key;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	b2d8      	uxtb	r0, r3
 8002344:	4911      	ldr	r1, [pc, #68]	; (800238c <note_off+0xb4>)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3301      	adds	r3, #1
 8002354:	4602      	mov	r2, r0
 8002356:	701a      	strb	r2, [r3, #0]
            voice[n].step = step[key];
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <note_off+0xb8>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002360:	480a      	ldr	r0, [pc, #40]	; (800238c <note_off+0xb4>)
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4403      	add	r3, r0
 800236e:	3304      	adds	r3, #4
 8002370:	6019      	str	r1, [r3, #0]
            return;
 8002372:	e005      	b.n	8002380 <note_off+0xa8>
    for(n=0; n<sizeof voice / sizeof voice[0]; n++) {
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b0e      	cmp	r3, #14
 800237e:	d9b5      	bls.n	80022ec <note_off+0x14>
        }
    }
}
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000560 	.word	0x20000560
 8002390:	0800ec40 	.word	0x0800ec40

08002394 <note_on>:

// Find an unused voice, and use it to play a note.
void note_on(int time, int chan, int key, int velo)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
    if (velo == 0) {
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <note_on+0x22>
        note_off(time, chan, key, velo);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff ff92 	bl	80022d8 <note_off>
        return;
 80023b4:	e057      	b.n	8002466 <note_on+0xd2>
    }
    int n;
    for(n=0; n<sizeof voice / sizeof voice[0]; n++) {
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e051      	b.n	8002460 <note_on+0xcc>
        if (voice[n].in_use == 0) {
 80023bc:	492b      	ldr	r1, [pc, #172]	; (800246c <note_on+0xd8>)
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d144      	bne.n	800245a <note_on+0xc6>
            voice[n].note = key;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b2d8      	uxtb	r0, r3
 80023d4:	4925      	ldr	r1, [pc, #148]	; (800246c <note_on+0xd8>)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3301      	adds	r3, #1
 80023e4:	4602      	mov	r2, r0
 80023e6:	701a      	strb	r2, [r3, #0]
            voice[n].step = step[key];
 80023e8:	4a21      	ldr	r2, [pc, #132]	; (8002470 <note_on+0xdc>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023f0:	481e      	ldr	r0, [pc, #120]	; (800246c <note_on+0xd8>)
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4403      	add	r3, r0
 80023fe:	3304      	adds	r3, #4
 8002400:	6019      	str	r1, [r3, #0]
            voice[n].offset = 0;
 8002402:	491a      	ldr	r1, [pc, #104]	; (800246c <note_on+0xd8>)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	3308      	adds	r3, #8
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
            voice[n].chan = chan;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	b2d8      	uxtb	r0, r3
 800241a:	4914      	ldr	r1, [pc, #80]	; (800246c <note_on+0xd8>)
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3302      	adds	r3, #2
 800242a:	4602      	mov	r2, r0
 800242c:	701a      	strb	r2, [r3, #0]
            voice[n].volume = velo;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	b2d8      	uxtb	r0, r3
 8002432:	490e      	ldr	r1, [pc, #56]	; (800246c <note_on+0xd8>)
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3303      	adds	r3, #3
 8002442:	4602      	mov	r2, r0
 8002444:	701a      	strb	r2, [r3, #0]
            voice[n].in_use = 1;
 8002446:	4909      	ldr	r1, [pc, #36]	; (800246c <note_on+0xd8>)
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
            return;
 8002458:	e005      	b.n	8002466 <note_on+0xd2>
    for(n=0; n<sizeof voice / sizeof voice[0]; n++) {
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3301      	adds	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b0e      	cmp	r3, #14
 8002464:	d9aa      	bls.n	80023bc <note_on+0x28>
        }
    }
}
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000560 	.word	0x20000560
 8002470:	0800ec40 	.word	0x0800ec40

08002474 <set_tempo>:

void set_tempo(int time, int value, const MIDI_Header *hdr)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
    TIM2->ARR = value/hdr->divisions - 1;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	895b      	ldrh	r3, [r3, #10]
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	fb93 f3f2 	sdiv	r3, r3, r2
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b095      	sub	sp, #84	; 0x54
 80024a4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a6:	f002 fb23 	bl	8004af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024aa:	f000 f8ed 	bl	8002688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ae:	f000 fac5 	bl	8002a3c <MX_GPIO_Init>
  MX_DMA_Init();
 80024b2:	f000 fa8d 	bl	80029d0 <MX_DMA_Init>
  MX_DAC_Init();
 80024b6:	f000 f967 	bl	8002788 <MX_DAC_Init>
  MX_I2C1_Init();
 80024ba:	f000 f98f 	bl	80027dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80024be:	f000 f9e9 	bl	8002894 <MX_I2S3_Init>
  MX_TIM1_Init();
 80024c2:	f000 fa35 	bl	8002930 <MX_TIM1_Init>
  MX_SDIO_SD_Init();
 80024c6:	f000 fa13 	bl	80028f0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80024ca:	f008 fae7 	bl	800aa9c <MX_FATFS_Init>
  MX_I2C3_Init();
 80024ce:	f000 f9b3 	bl	8002838 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c3)){
 80024d2:	4857      	ldr	r0, [pc, #348]	; (8002630 <main+0x190>)
 80024d4:	f7ff fb62 	bl	8001b9c <lcd16x2_i2c_init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <main+0x4a>
  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024e4:	4853      	ldr	r0, [pc, #332]	; (8002634 <main+0x194>)
 80024e6:	f003 fad1 	bl	8005a8c <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_1stLine();
 80024ea:	f7ff fbe7 	bl	8001cbc <lcd16x2_i2c_1stLine>
  lcd16x2_i2c_printf("   Welcome to");
 80024ee:	4852      	ldr	r0, [pc, #328]	; (8002638 <main+0x198>)
 80024f0:	f7ff fbf4 	bl	8001cdc <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 80024f4:	f7ff fbea 	bl	8001ccc <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("    PianoMan!");
 80024f8:	4850      	ldr	r0, [pc, #320]	; (800263c <main+0x19c>)
 80024fa:	f7ff fbef 	bl	8001cdc <lcd16x2_i2c_printf>

  visInit();
 80024fe:	f001 fd35 	bl	8003f6c <visInit>
  Keypad4x4_Init();
 8002502:	f7fe feef 	bl	80012e4 <Keypad4x4_Init>
  //audio codec inits
  CS43_Init(hi2c1,MODE_ANALOG);
 8002506:	4c4e      	ldr	r4, [pc, #312]	; (8002640 <main+0x1a0>)
 8002508:	2301      	movs	r3, #1
 800250a:	9311      	str	r3, [sp, #68]	; 0x44
 800250c:	4668      	mov	r0, sp
 800250e:	f104 0310 	add.w	r3, r4, #16
 8002512:	2244      	movs	r2, #68	; 0x44
 8002514:	4619      	mov	r1, r3
 8002516:	f00a fed1 	bl	800d2bc <memcpy>
 800251a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800251e:	f7fe fced 	bl	8000efc <CS43_Init>
  CS43_SetVolume(60);
 8002522:	203c      	movs	r0, #60	; 0x3c
 8002524:	f7fe fe5a 	bl	80011dc <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8002528:	2003      	movs	r0, #3
 800252a:	f7fe fdfb 	bl	8001124 <CS43_Enable_RightLeft>
  CS43_Start();
 800252e:	f7fe fe97 	bl	8001260 <CS43_Start>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)I2Sdummy,4);
 8002532:	2204      	movs	r2, #4
 8002534:	4943      	ldr	r1, [pc, #268]	; (8002644 <main+0x1a4>)
 8002536:	4844      	ldr	r0, [pc, #272]	; (8002648 <main+0x1a8>)
 8002538:	f004 fcec 	bl	8006f14 <HAL_I2S_Transmit_DMA>

  memset(myRdData,0,15);
 800253c:	220f      	movs	r2, #15
 800253e:	2100      	movs	r1, #0
 8002540:	4842      	ldr	r0, [pc, #264]	; (800264c <main+0x1ac>)
 8002542:	f00a fec6 	bl	800d2d2 <memset>
  memset(readmidi,0,MAXMIDI);
 8002546:	f24c 3250 	movw	r2, #50000	; 0xc350
 800254a:	2100      	movs	r1, #0
 800254c:	4840      	ldr	r0, [pc, #256]	; (8002650 <main+0x1b0>)
 800254e:	f00a fec0 	bl	800d2d2 <memset>

  if(f_mount(&myFATFS, (TCHAR const*)SDPath, 1) == FR_OK){
 8002552:	2201      	movs	r2, #1
 8002554:	493f      	ldr	r1, [pc, #252]	; (8002654 <main+0x1b4>)
 8002556:	4840      	ldr	r0, [pc, #256]	; (8002658 <main+0x1b8>)
 8002558:	f00a fa10 	bl	800c97c <f_mount>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d132      	bne.n	80025c8 <main+0x128>
  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8002562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002566:	4833      	ldr	r0, [pc, #204]	; (8002634 <main+0x194>)
 8002568:	f003 faa9 	bl	8005abe <HAL_GPIO_TogglePin>
  	  }

  	  int fr = (int)f_open(&myFILE, "SONG.MID", FA_READ);
  	lcd16x2_i2c_1stLine();
    	  	  	  			lcd16x2_i2c_printf("%d",fr);*/
  	  if(f_open(&myFILE, "SONG.MID", FA_READ) == FR_OK){
 800256c:	2201      	movs	r2, #1
 800256e:	493b      	ldr	r1, [pc, #236]	; (800265c <main+0x1bc>)
 8002570:	483b      	ldr	r0, [pc, #236]	; (8002660 <main+0x1c0>)
 8002572:	f00a fa49 	bl	800ca08 <f_open>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d121      	bne.n	80025c0 <main+0x120>
  		  	  readByte = 1;
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <main+0x1c4>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]
  		  	  int idx = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  	  		  while(readByte&&idx<MAXMIDI-6){
 8002586:	e00f      	b.n	80025a8 <main+0x108>
  	  			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
  	  			f_read(&myFILE, &byteBuf, 1, &readByte);
 8002588:	4b36      	ldr	r3, [pc, #216]	; (8002664 <main+0x1c4>)
 800258a:	2201      	movs	r2, #1
 800258c:	4936      	ldr	r1, [pc, #216]	; (8002668 <main+0x1c8>)
 800258e:	4834      	ldr	r0, [pc, #208]	; (8002660 <main+0x1c0>)
 8002590:	f00a fc06 	bl	800cda0 <f_read>
  	  			readmidi[idx] = byteBuf;
 8002594:	4b34      	ldr	r3, [pc, #208]	; (8002668 <main+0x1c8>)
 8002596:	7819      	ldrb	r1, [r3, #0]
 8002598:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <main+0x1b0>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	460a      	mov	r2, r1
 80025a0:	701a      	strb	r2, [r3, #0]
  	  			idx++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3301      	adds	r3, #1
 80025a6:	607b      	str	r3, [r7, #4]
  	  		  while(readByte&&idx<MAXMIDI-6){
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <main+0x1c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <main+0x11a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f24c 3249 	movw	r2, #49993	; 0xc349
 80025b6:	4293      	cmp	r3, r2
 80025b8:	dde6      	ble.n	8002588 <main+0xe8>
  	  			//lcd16x2_i2c_1stLine();
  	  			//lcd16x2_i2c_printf("%d",idx);
  	  		  }
  	  		f_close(&myFILE);
 80025ba:	4829      	ldr	r0, [pc, #164]	; (8002660 <main+0x1c0>)
 80025bc:	f00a fdcd 	bl	800d15a <f_close>
  	  }
  	  HAL_Delay(1000);
 80025c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025c4:	f002 fb06 	bl	8004bd4 <HAL_Delay>
  	  //f_read(&myFILE, myRdData, 15, &testByte);
  	  HAL_Delay(1000);*/
    }

  //midi inits
   init_hybrid();
 80025c8:	f7ff fe1e 	bl	8002208 <init_hybrid>
   init_DAC();
 80025cc:	f7ff fd5e 	bl	800208c <init_DAC>
   //init_DMA();
   init_TIM6();
 80025d0:	f7ff fd9a 	bl	8002108 <init_TIM6>
   //mp = midi_init(midifile);
   mp = midi_init(readmidi);
 80025d4:	481e      	ldr	r0, [pc, #120]	; (8002650 <main+0x1b0>)
 80025d6:	f001 f8e9 	bl	80037ac <midi_init>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <main+0x1cc>)
 80025de:	601a      	str	r2, [r3, #0]
   // The default rate for a MIDI file is 2 beats per second
   // with 48 ticks per beat.  That's 500000/48 microseconds.
   init_TIM2(10417);
 80025e0:	f642 00b1 	movw	r0, #10417	; 0x28b1
 80025e4:	f7ff fdd8 	bl	8002198 <init_TIM2>

	lcd16x2_i2c_1stLine();
 80025e8:	f7ff fb68 	bl	8001cbc <lcd16x2_i2c_1stLine>
	lcd16x2_i2c_printf("General Mode    ");
 80025ec:	4820      	ldr	r0, [pc, #128]	; (8002670 <main+0x1d0>)
 80025ee:	f7ff fb75 	bl	8001cdc <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 80025f2:	f7ff fb6b 	bl	8001ccc <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("                ");
 80025f6:	481f      	ldr	r0, [pc, #124]	; (8002674 <main+0x1d4>)
 80025f8:	f7ff fb70 	bl	8001cdc <lcd16x2_i2c_printf>

	gMode = true;
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <main+0x1d8>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
	pMode = false;
 8002602:	4b1e      	ldr	r3, [pc, #120]	; (800267c <main+0x1dc>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
	tMode = false;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <main+0x1e0>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!pMode){
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <main+0x1dc>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <main+0x182>
		  Keypad4x4_ReadKeypad(mys);
 800261c:	4819      	ldr	r0, [pc, #100]	; (8002684 <main+0x1e4>)
 800261e:	f7fe fe6d 	bl	80012fc <Keypad4x4_ReadKeypad>
	  }
	  visHandle();
 8002622:	f001 fcb7 	bl	8003f94 <visHandle>
	  HAL_Delay(100);
 8002626:	2064      	movs	r0, #100	; 0x64
 8002628:	f002 fad4 	bl	8004bd4 <HAL_Delay>
	  if(!pMode){
 800262c:	e7ef      	b.n	800260e <main+0x16e>
 800262e:	bf00      	nop
 8002630:	2000050c 	.word	0x2000050c
 8002634:	40020c00 	.word	0x40020c00
 8002638:	0800eb40 	.word	0x0800eb40
 800263c:	0800eb50 	.word	0x0800eb50
 8002640:	20001644 	.word	0x20001644
 8002644:	20003a18 	.word	0x20003a18
 8002648:	2000fe3c 	.word	0x2000fe3c
 800264c:	2000fe28 	.word	0x2000fe28
 8002650:	20003a80 	.word	0x20003a80
 8002654:	2001025c 	.word	0x2001025c
 8002658:	20001878 	.word	0x20001878
 800265c:	0800eb60 	.word	0x0800eb60
 8002660:	20000614 	.word	0x20000614
 8002664:	2000fe38 	.word	0x2000fe38
 8002668:	200028ac 	.word	0x200028ac
 800266c:	2000fe24 	.word	0x2000fe24
 8002670:	0800eb6c 	.word	0x0800eb6c
 8002674:	0800eb80 	.word	0x0800eb80
 8002678:	20000000 	.word	0x20000000
 800267c:	200000f5 	.word	0x200000f5
 8002680:	200000f6 	.word	0x200000f6
 8002684:	200004d0 	.word	0x200004d0

08002688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b098      	sub	sp, #96	; 0x60
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002692:	2230      	movs	r2, #48	; 0x30
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f00a fe1b 	bl	800d2d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <SystemClock_Config+0xf8>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a2f      	ldr	r2, [pc, #188]	; (8002780 <SystemClock_Config+0xf8>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <SystemClock_Config+0xf8>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <SystemClock_Config+0xfc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a29      	ldr	r2, [pc, #164]	; (8002784 <SystemClock_Config+0xfc>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <SystemClock_Config+0xfc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026fc:	2302      	movs	r3, #2
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002704:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002706:	2304      	movs	r3, #4
 8002708:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800270a:	23a8      	movs	r3, #168	; 0xa8
 800270c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800270e:	2302      	movs	r3, #2
 8002710:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002712:	2307      	movs	r3, #7
 8002714:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800271a:	4618      	mov	r0, r3
 800271c:	f005 f860 	bl	80077e0 <HAL_RCC_OscConfig>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002726:	f000 fb41 	bl	8002dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272a:	230f      	movs	r3, #15
 800272c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800272e:	2302      	movs	r3, #2
 8002730:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800273c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002742:	f107 031c 	add.w	r3, r7, #28
 8002746:	2105      	movs	r1, #5
 8002748:	4618      	mov	r0, r3
 800274a:	f005 fab9 	bl	8007cc0 <HAL_RCC_ClockConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002754:	f000 fb2a 	bl	8002dac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002758:	2301      	movs	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800275c:	2332      	movs	r3, #50	; 0x32
 800275e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002760:	2302      	movs	r3, #2
 8002762:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	4618      	mov	r0, r3
 800276a:	f005 fc87 	bl	800807c <HAL_RCCEx_PeriphCLKConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002774:	f000 fb1a 	bl	8002dac <Error_Handler>
  }
}
 8002778:	bf00      	nop
 800277a:	3760      	adds	r7, #96	; 0x60
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40023800 	.word	0x40023800
 8002784:	40007000 	.word	0x40007000

08002788 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800278e:	463b      	mov	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <MX_DAC_Init+0x4c>)
 8002798:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <MX_DAC_Init+0x50>)
 800279a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800279c:	480d      	ldr	r0, [pc, #52]	; (80027d4 <MX_DAC_Init+0x4c>)
 800279e:	f002 fb4c 	bl	8004e3a <HAL_DAC_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80027a8:	f000 fb00 	bl	8002dac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027b4:	463b      	mov	r3, r7
 80027b6:	2200      	movs	r2, #0
 80027b8:	4619      	mov	r1, r3
 80027ba:	4806      	ldr	r0, [pc, #24]	; (80027d4 <MX_DAC_Init+0x4c>)
 80027bc:	f002 fb5f 	bl	8004e7e <HAL_DAC_ConfigChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80027c6:	f000 faf1 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20003940 	.word	0x20003940
 80027d8:	40007400 	.word	0x40007400

080027dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027e0:	4b12      	ldr	r3, [pc, #72]	; (800282c <MX_I2C1_Init+0x50>)
 80027e2:	4a13      	ldr	r2, [pc, #76]	; (8002830 <MX_I2C1_Init+0x54>)
 80027e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <MX_I2C1_Init+0x50>)
 80027e8:	4a12      	ldr	r2, [pc, #72]	; (8002834 <MX_I2C1_Init+0x58>)
 80027ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_I2C1_Init+0x50>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_I2C1_Init+0x50>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_I2C1_Init+0x50>)
 80027fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <MX_I2C1_Init+0x50>)
 8002802:	2200      	movs	r2, #0
 8002804:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_I2C1_Init+0x50>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <MX_I2C1_Init+0x50>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <MX_I2C1_Init+0x50>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_I2C1_Init+0x50>)
 800281a:	f003 f983 	bl	8005b24 <HAL_I2C_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002824:	f000 fac2 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20001644 	.word	0x20001644
 8002830:	40005400 	.word	0x40005400
 8002834:	000186a0 	.word	0x000186a0

08002838 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <MX_I2C3_Init+0x50>)
 800283e:	4a13      	ldr	r2, [pc, #76]	; (800288c <MX_I2C3_Init+0x54>)
 8002840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_I2C3_Init+0x50>)
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <MX_I2C3_Init+0x58>)
 8002846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <MX_I2C3_Init+0x50>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_I2C3_Init+0x50>)
 8002850:	2200      	movs	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_I2C3_Init+0x50>)
 8002856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800285a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <MX_I2C3_Init+0x50>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_I2C3_Init+0x50>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <MX_I2C3_Init+0x50>)
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_I2C3_Init+0x50>)
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <MX_I2C3_Init+0x50>)
 8002876:	f003 f955 	bl	8005b24 <HAL_I2C_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002880:	f000 fa94 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	2000050c 	.word	0x2000050c
 800288c:	40005c00 	.word	0x40005c00
 8002890:	000186a0 	.word	0x000186a0

08002894 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <MX_I2S3_Init+0x54>)
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <MX_I2S3_Init+0x58>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028bc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80028c0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80028d4:	4804      	ldr	r0, [pc, #16]	; (80028e8 <MX_I2S3_Init+0x54>)
 80028d6:	f004 f9dd 	bl	8006c94 <HAL_I2S_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80028e0:	f000 fa64 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	2000fe3c 	.word	0x2000fe3c
 80028ec:	40003c00 	.word	0x40003c00

080028f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_SDIO_SD_Init+0x38>)
 80028f6:	4a0d      	ldr	r2, [pc, #52]	; (800292c <MX_SDIO_SD_Init+0x3c>)
 80028f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <MX_SDIO_SD_Init+0x38>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <MX_SDIO_SD_Init+0x38>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <MX_SDIO_SD_Init+0x38>)
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_SDIO_SD_Init+0x38>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <MX_SDIO_SD_Init+0x38>)
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <MX_SDIO_SD_Init+0x38>)
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	20003994 	.word	0x20003994
 800292c:	40012c00 	.word	0x40012c00

08002930 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	463b      	mov	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800294c:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <MX_TIM1_Init+0x98>)
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <MX_TIM1_Init+0x9c>)
 8002950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_TIM1_Init+0x98>)
 8002954:	2200      	movs	r2, #0
 8002956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_TIM1_Init+0x98>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_TIM1_Init+0x98>)
 8002960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002964:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_TIM1_Init+0x98>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_TIM1_Init+0x98>)
 800296e:	2200      	movs	r2, #0
 8002970:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_TIM1_Init+0x98>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002978:	4813      	ldr	r0, [pc, #76]	; (80029c8 <MX_TIM1_Init+0x98>)
 800297a:	f006 fc5d 	bl	8009238 <HAL_TIM_Base_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002984:	f000 fa12 	bl	8002dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <MX_TIM1_Init+0x98>)
 8002996:	f006 fedf 	bl	8009758 <HAL_TIM_ConfigClockSource>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029a0:	f000 fa04 	bl	8002dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029ac:	463b      	mov	r3, r7
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <MX_TIM1_Init+0x98>)
 80029b2:	f007 fac1 	bl	8009f38 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029bc:	f000 f9f6 	bl	8002dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20003954 	.word	0x20003954
 80029cc:	40010000 	.word	0x40010000

080029d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <MX_DMA_Init+0x68>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <MX_DMA_Init+0x68>)
 80029e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <MX_DMA_Init+0x68>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <MX_DMA_Init+0x68>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <MX_DMA_Init+0x68>)
 80029fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <MX_DMA_Init+0x68>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	2010      	movs	r0, #16
 8002a14:	f002 f9db 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a18:	2010      	movs	r0, #16
 8002a1a:	f002 f9f4 	bl	8004e06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	2044      	movs	r0, #68	; 0x44
 8002a24:	f002 f9d3 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002a28:	2044      	movs	r0, #68	; 0x44
 8002a2a:	f002 f9ec 	bl	8004e06 <HAL_NVIC_EnableIRQ>

}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	; 0x30
 8002a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a80      	ldr	r2, [pc, #512]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a5c:	f043 0310 	orr.w	r3, r3, #16
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b7e      	ldr	r3, [pc, #504]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	4b7a      	ldr	r3, [pc, #488]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a79      	ldr	r2, [pc, #484]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b77      	ldr	r3, [pc, #476]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b73      	ldr	r3, [pc, #460]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a72      	ldr	r2, [pc, #456]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a6b      	ldr	r2, [pc, #428]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b69      	ldr	r3, [pc, #420]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a64      	ldr	r2, [pc, #400]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b62      	ldr	r3, [pc, #392]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <MX_GPIO_Init+0x220>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin
 8002afa:	2200      	movs	r2, #0
 8002afc:	f64f 4108 	movw	r1, #64520	; 0xfc08
 8002b00:	4857      	ldr	r0, [pc, #348]	; (8002c60 <MX_GPIO_Init+0x224>)
 8002b02:	f002 ffc3 	bl	8005a8c <HAL_GPIO_WritePin>
                          |Col4_Pin7_Pin|Col5_Pin9_Pin|Col6_Pin11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b06:	2201      	movs	r2, #1
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4856      	ldr	r0, [pc, #344]	; (8002c64 <MX_GPIO_Init+0x228>)
 8002b0c:	f002 ffbe 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b10:	2200      	movs	r2, #0
 8002b12:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002b16:	4854      	ldr	r0, [pc, #336]	; (8002c68 <MX_GPIO_Init+0x22c>)
 8002b18:	f002 ffb8 	bl	8005a8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin Col1_Pin1_Pin Col2_Pin3_Pin Col3_Pin5_Pin
                           Col4_Pin7_Pin Col5_Pin9_Pin Col6_Pin11_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|Col1_Pin1_Pin|Col2_Pin3_Pin|Col3_Pin5_Pin
 8002b1c:	f64f 4308 	movw	r3, #64520	; 0xfc08
 8002b20:	61fb      	str	r3, [r7, #28]
                          |Col4_Pin7_Pin|Col5_Pin9_Pin|Col6_Pin11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	484a      	ldr	r0, [pc, #296]	; (8002c60 <MX_GPIO_Init+0x224>)
 8002b36:	f002 fdf7 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4844      	ldr	r0, [pc, #272]	; (8002c64 <MX_GPIO_Init+0x228>)
 8002b52:	f002 fde9 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002b56:	230e      	movs	r3, #14
 8002b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5a:	4b44      	ldr	r3, [pc, #272]	; (8002c6c <MX_GPIO_Init+0x230>)
 8002b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	483e      	ldr	r0, [pc, #248]	; (8002c64 <MX_GPIO_Init+0x228>)
 8002b6a:	f002 fddd 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <MX_GPIO_Init+0x230>)
 8002b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	4619      	mov	r1, r3
 8002b80:	483b      	ldr	r0, [pc, #236]	; (8002c70 <MX_GPIO_Init+0x234>)
 8002b82:	f002 fdd1 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002b86:	2304      	movs	r3, #4
 8002b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	4619      	mov	r1, r3
 8002b98:	4836      	ldr	r0, [pc, #216]	; (8002c74 <MX_GPIO_Init+0x238>)
 8002b9a:	f002 fdc5 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	482b      	ldr	r0, [pc, #172]	; (8002c60 <MX_GPIO_Init+0x224>)
 8002bb4:	f002 fdb8 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002bb8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002bbc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc6:	f107 031c 	add.w	r3, r7, #28
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4829      	ldr	r0, [pc, #164]	; (8002c74 <MX_GPIO_Init+0x238>)
 8002bce:	f002 fdab 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8002bd2:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8002bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	4820      	ldr	r0, [pc, #128]	; (8002c68 <MX_GPIO_Init+0x22c>)
 8002be8:	f002 fd9e 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002bec:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002bf0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	4818      	ldr	r0, [pc, #96]	; (8002c68 <MX_GPIO_Init+0x22c>)
 8002c06:	f002 fd8f 	bl	8005728 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4812      	ldr	r0, [pc, #72]	; (8002c68 <MX_GPIO_Init+0x22c>)
 8002c1e:	f002 fd83 	bl	8005728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2007      	movs	r0, #7
 8002c28:	f002 f8d1 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c2c:	2007      	movs	r0, #7
 8002c2e:	f002 f8ea 	bl	8004e06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2008      	movs	r0, #8
 8002c38:	f002 f8c9 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c3c:	2008      	movs	r0, #8
 8002c3e:	f002 f8e2 	bl	8004e06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2009      	movs	r0, #9
 8002c48:	f002 f8c1 	bl	8004dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c4c:	2009      	movs	r0, #9
 8002c4e:	f002 f8da 	bl	8004e06 <HAL_NVIC_EnableIRQ>

}
 8002c52:	bf00      	nop
 8002c54:	3730      	adds	r7, #48	; 0x30
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	10110000 	.word	0x10110000
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400

08002c78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1){
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d11a      	bne.n	8002cbe <HAL_GPIO_EXTI_Callback+0x46>
	   //This block will be triggered after pin activated.
		//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
		//HAL_Delay(1);
		//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		//lcd16x2_i2c_clear();
		lcd16x2_i2c_1stLine();
 8002c88:	f7ff f818 	bl	8001cbc <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("General Mode    ");
 8002c8c:	483c      	ldr	r0, [pc, #240]	; (8002d80 <HAL_GPIO_EXTI_Callback+0x108>)
 8002c8e:	f7ff f825 	bl	8001cdc <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8002c92:	f7ff f81b 	bl	8001ccc <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("                ");
 8002c96:	483b      	ldr	r0, [pc, #236]	; (8002d84 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002c98:	f7ff f820 	bl	8001cdc <lcd16x2_i2c_printf>
		gMode = true;
 8002c9c:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x110>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
		pMode = false;
 8002ca2:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x114>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
		tMode = false;
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x118>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
		memset(mys, 0, sizeof mys);
 8002cae:	223c      	movs	r2, #60	; 0x3c
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4838      	ldr	r0, [pc, #224]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002cb4:	f00a fb0d 	bl	800d2d2 <memset>
		clearLED();
 8002cb8:	f001 f94c 	bl	8003f54 <clearLED>
		}
	else{
		//Do not do anything when else.
		__NOP();
	}
}
 8002cbc:	e05c      	b.n	8002d78 <HAL_GPIO_EXTI_Callback+0x100>
	else if(GPIO_Pin == GPIO_PIN_2){
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d12a      	bne.n	8002d1a <HAL_GPIO_EXTI_Callback+0xa2>
		lcd16x2_i2c_1stLine();
 8002cc4:	f7fe fffa 	bl	8001cbc <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("Playback Mode   ");
 8002cc8:	4833      	ldr	r0, [pc, #204]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x120>)
 8002cca:	f7ff f807 	bl	8001cdc <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8002cce:	f7fe fffd 	bl	8001ccc <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("                ");
 8002cd2:	482c      	ldr	r0, [pc, #176]	; (8002d84 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002cd4:	f7ff f802 	bl	8001cdc <lcd16x2_i2c_printf>
		gMode = false;
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x110>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
		pMode = true;
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x114>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
		tMode = false;
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x118>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
		memset(mys, 0, sizeof mys);
 8002cea:	223c      	movs	r2, #60	; 0x3c
 8002cec:	2100      	movs	r1, #0
 8002cee:	4829      	ldr	r0, [pc, #164]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002cf0:	f00a faef 	bl	800d2d2 <memset>
		clearLED();
 8002cf4:	f001 f92e 	bl	8003f54 <clearLED>
		memset(voice, 0, sizeof voice);
 8002cf8:	22b4      	movs	r2, #180	; 0xb4
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4827      	ldr	r0, [pc, #156]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x124>)
 8002cfe:	f00a fae8 	bl	800d2d2 <memset>
		mp->nexttick = MAXTICKS;
 8002d02:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x128>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	605a      	str	r2, [r3, #4]
		mp = midi_init(readmidi);
 8002d0c:	4825      	ldr	r0, [pc, #148]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002d0e:	f000 fd4d 	bl	80037ac <midi_init>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x128>)
 8002d16:	601a      	str	r2, [r3, #0]
}
 8002d18:	e02e      	b.n	8002d78 <HAL_GPIO_EXTI_Callback+0x100>
	else if(GPIO_Pin == GPIO_PIN_3){
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d12a      	bne.n	8002d76 <HAL_GPIO_EXTI_Callback+0xfe>
		lcd16x2_i2c_1stLine();
 8002d20:	f7fe ffcc 	bl	8001cbc <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("Traning Mode    ");
 8002d24:	4820      	ldr	r0, [pc, #128]	; (8002da8 <HAL_GPIO_EXTI_Callback+0x130>)
 8002d26:	f7fe ffd9 	bl	8001cdc <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8002d2a:	f7fe ffcf 	bl	8001ccc <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("                ");
 8002d2e:	4815      	ldr	r0, [pc, #84]	; (8002d84 <HAL_GPIO_EXTI_Callback+0x10c>)
 8002d30:	f7fe ffd4 	bl	8001cdc <lcd16x2_i2c_printf>
		gMode = false;
 8002d34:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_GPIO_EXTI_Callback+0x110>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
		pMode = false;
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_GPIO_EXTI_Callback+0x114>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
		tMode = true;
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_GPIO_EXTI_Callback+0x118>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
		memset(mys, 0, sizeof mys);
 8002d46:	223c      	movs	r2, #60	; 0x3c
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4812      	ldr	r0, [pc, #72]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x11c>)
 8002d4c:	f00a fac1 	bl	800d2d2 <memset>
		clearLED();
 8002d50:	f001 f900 	bl	8003f54 <clearLED>
		memset(voice, 0, sizeof voice);
 8002d54:	22b4      	movs	r2, #180	; 0xb4
 8002d56:	2100      	movs	r1, #0
 8002d58:	4810      	ldr	r0, [pc, #64]	; (8002d9c <HAL_GPIO_EXTI_Callback+0x124>)
 8002d5a:	f00a faba 	bl	800d2d2 <memset>
		mp->nexttick = MAXTICKS;
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x128>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d66:	605a      	str	r2, [r3, #4]
		mp = midi_init(readmidi);
 8002d68:	480e      	ldr	r0, [pc, #56]	; (8002da4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002d6a:	f000 fd1f 	bl	80037ac <midi_init>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_GPIO_EXTI_Callback+0x128>)
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_EXTI_Callback+0x100>
		__NOP();
 8002d76:	bf00      	nop
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	0800eb6c 	.word	0x0800eb6c
 8002d84:	0800eb80 	.word	0x0800eb80
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	200000f5 	.word	0x200000f5
 8002d90:	200000f6 	.word	0x200000f6
 8002d94:	200004d0 	.word	0x200004d0
 8002d98:	0800eb94 	.word	0x0800eb94
 8002d9c:	20000560 	.word	0x20000560
 8002da0:	2000fe24 	.word	0x2000fe24
 8002da4:	20003a80 	.word	0x20003a80
 8002da8:	0800eba8 	.word	0x0800eba8

08002dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <midi_error>:
static Track track[MAXTRACKS];

//====<Weak symbols for empty functions.  Override in other modules>=========
void WEAK midi_error(int time, const uint8_t *p, const uint8_t *file_start,
        const char *msg)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <header_info>:
void WEAK header_info(MIDI_Header *hdr)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <file_offset_info>:
void WEAK file_offset_info(int time)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <track_info>:
void WEAK track_info(int num, const uint8_t *p, int len, const MIDI_Header *hdr)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <sysex_info>:
void WEAK sysex_info(int time, const uint8_t *p, const uint8_t *buf, int len,
                     const MIDI_Header *hdr)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <key_pressure>:
void WEAK note_on(int time, int chan, int key, int velo)
{
}

void WEAK key_pressure(int time, int chan, int key, int val)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <control_change>:

void WEAK control_change(int time, int chan, int ctrl, int val)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <program_change>:

void WEAK program_change(int time, int chan, int prog)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <channel_pressure>:

void WEAK channel_pressure(int time, int chan, int val)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <pitch_wheel_change>:

void WEAK pitch_wheel_change(int time, int chan, int val)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <text_event>:
void WEAK text_event(const char *str, int len)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <copyright_notice>:
void WEAK copyright_notice(const char *str, int len)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <track_name>:
void WEAK track_name(const char *str, int len)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <lyric>:
void WEAK lyric(int time, const char *str, int len)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
}
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <marker>:
void WEAK marker(int time, const char *str, int len)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <end_of_track>:
void WEAK end_of_track(int time)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <smpte_offset>:
void WEAK set_tempo(int time, int value, const MIDI_Header *hdr)
{
}
void WEAK smpte_offset(int time, int hr, int mn, int se, int fr, int ff)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <time_signature>:
void WEAK time_signature(int time, int n, int d, int b, int c)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <key_signature>:
void WEAK key_signature(int time, int8_t sf, int mi)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	72fb      	strb	r3, [r7, #11]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <unknown_meta>:
void WEAK unknown_meta(int time, int offset, int type, int len, const uint8_t *buf)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <intvar>:

//===========================================================================
// Parser support functions.
//===========================================================================
int intvar(const uint8_t **pp)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  int x = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
  do {
    x = (x << 7) | ((**pp) & 0x7f);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	01da      	lsls	r2, r3, #7
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  } while( *((*pp)++) & 0x80);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1c59      	adds	r1, r3, #1
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6011      	str	r1, [r2, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b25b      	sxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	dbed      	blt.n	8002fa6 <intvar+0xc>
  return x;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <int1>:
int int1(const uint8_t **pp)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  int x = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  x = (x<<8) | *((*pp)++);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	021a      	lsls	r2, r3, #8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1c58      	adds	r0, r3, #1
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	6008      	str	r0, [r1, #0]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
  return x;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <int2>:
int int2(const uint8_t **pp)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  int x = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
  x = (x<<8) | *((*pp)++);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1c58      	adds	r0, r3, #1
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6008      	str	r0, [r1, #0]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  x = (x<<8) | *((*pp)++);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	021a      	lsls	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	1c58      	adds	r0, r3, #1
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	6008      	str	r0, [r1, #0]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  return x;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <int4>:
int int4(const uint8_t **pp)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  int x = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  x = (x<<8) | *((*pp)++);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1c58      	adds	r0, r3, #1
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	6008      	str	r0, [r1, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  x = (x<<8) | *((*pp)++);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c58      	adds	r0, r3, #1
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	6008      	str	r0, [r1, #0]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  x = (x<<8) | *((*pp)++);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	1c58      	adds	r0, r3, #1
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	6008      	str	r0, [r1, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  x = (x<<8) | *((*pp)++);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1c58      	adds	r0, r3, #1
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	6008      	str	r0, [r1, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  return x;
 80030a4:	68fb      	ldr	r3, [r7, #12]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <eat>:
  if (strncmp(s, (char *)p, len) != 0)
    return 0;
  return 1;
}
int eat(const uint8_t **pp, const char *s)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  int len = strlen(s);
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f7fd f887 	bl	80001d0 <strlen>
 80030c2:	4603      	mov	r3, r0
 80030c4:	60fb      	str	r3, [r7, #12]
  if (strncmp(s, (const char *)*pp, len) != 0)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4619      	mov	r1, r3
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f00a f907 	bl	800d2e2 <strncmp>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <eat+0x2c>
    return 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	e006      	b.n	80030ec <eat+0x3a>
  *pp += len;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
  return 1;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <midi_event>:

//===========================================================================
// Main interpretation functions.
//===========================================================================
void midi_event(int time, int event, const uint8_t **pp, const MIDI_Header *hdr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b092      	sub	sp, #72	; 0x48
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  const uint8_t *p = *pp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	613b      	str	r3, [r7, #16]
  uint8_t type = event & 0xf0;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f023 030f 	bic.w	r3, r3, #15
 8003110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t chan = event & 0x0f;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  file_offset_info(*pp - hdr->file_start);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fe5b 	bl	8002de8 <file_offset_info>
  switch(type) {
 8003132:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003136:	2bb0      	cmp	r3, #176	; 0xb0
 8003138:	d04b      	beq.n	80031d2 <midi_event+0xde>
 800313a:	2bb0      	cmp	r3, #176	; 0xb0
 800313c:	dc06      	bgt.n	800314c <midi_event+0x58>
 800313e:	2b90      	cmp	r3, #144	; 0x90
 8003140:	d01f      	beq.n	8003182 <midi_event+0x8e>
 8003142:	2ba0      	cmp	r3, #160	; 0xa0
 8003144:	d031      	beq.n	80031aa <midi_event+0xb6>
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d007      	beq.n	800315a <midi_event+0x66>
 800314a:	e089      	b.n	8003260 <midi_event+0x16c>
 800314c:	2bd0      	cmp	r3, #208	; 0xd0
 800314e:	d062      	beq.n	8003216 <midi_event+0x122>
 8003150:	2be0      	cmp	r3, #224	; 0xe0
 8003152:	d06e      	beq.n	8003232 <midi_event+0x13e>
 8003154:	2bc0      	cmp	r3, #192	; 0xc0
 8003156:	d050      	beq.n	80031fa <midi_event+0x106>
 8003158:	e082      	b.n	8003260 <midi_event+0x16c>
    case 0x80: { int note=int1(&p); int velo=int1(&p);
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff3a 	bl	8002fd8 <int1>
 8003164:	61b8      	str	r0, [r7, #24]
 8003166:	f107 0310 	add.w	r3, r7, #16
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ff34 	bl	8002fd8 <int1>
 8003170:	6178      	str	r0, [r7, #20]
                 note_off(time, chan, note, velo); break;
 8003172:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff f8ac 	bl	80022d8 <note_off>
 8003180:	e06e      	b.n	8003260 <midi_event+0x16c>
               }
    case 0x90: { int note=int1(&p); int velo=int1(&p);
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff26 	bl	8002fd8 <int1>
 800318c:	6238      	str	r0, [r7, #32]
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff20 	bl	8002fd8 <int1>
 8003198:	61f8      	str	r0, [r7, #28]
                 note_on(time, chan, note, velo); break;
 800319a:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f7ff f8f6 	bl	8002394 <note_on>
 80031a8:	e05a      	b.n	8003260 <midi_event+0x16c>
               }
    case 0xa0: { int note=int1(&p); int value=int1(&p);
 80031aa:	f107 0310 	add.w	r3, r7, #16
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff12 	bl	8002fd8 <int1>
 80031b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff0c 	bl	8002fd8 <int1>
 80031c0:	6278      	str	r0, [r7, #36]	; 0x24
                 key_pressure(time, chan, note, value); break;
 80031c2:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fe30 	bl	8002e30 <key_pressure>
 80031d0:	e046      	b.n	8003260 <midi_event+0x16c>
               }
    case 0xb0: { int ctrl=int1(&p); int value=int1(&p);
 80031d2:	f107 0310 	add.w	r3, r7, #16
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fefe 	bl	8002fd8 <int1>
 80031dc:	6338      	str	r0, [r7, #48]	; 0x30
 80031de:	f107 0310 	add.w	r3, r7, #16
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fef8 	bl	8002fd8 <int1>
 80031e8:	62f8      	str	r0, [r7, #44]	; 0x2c
                 control_change(time, chan, ctrl, value); break;
 80031ea:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 80031ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f7ff fe29 	bl	8002e4a <control_change>
 80031f8:	e032      	b.n	8003260 <midi_event+0x16c>
               }
    case 0xc0: { int prog=int1(&p);
 80031fa:	f107 0310 	add.w	r3, r7, #16
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff feea 	bl	8002fd8 <int1>
 8003204:	6378      	str	r0, [r7, #52]	; 0x34
                 program_change(time, chan, prog); break;
 8003206:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800320a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800320c:	4619      	mov	r1, r3
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff fe28 	bl	8002e64 <program_change>
 8003214:	e024      	b.n	8003260 <midi_event+0x16c>
               }
    case 0xd0: { int value=int1(&p);
 8003216:	f107 0310 	add.w	r3, r7, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fedc 	bl	8002fd8 <int1>
 8003220:	63b8      	str	r0, [r7, #56]	; 0x38
                 channel_pressure(time, chan, value); break;
 8003222:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003228:	4619      	mov	r1, r3
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fe26 	bl	8002e7c <channel_pressure>
 8003230:	e016      	b.n	8003260 <midi_event+0x16c>
               }
    case 0xe0: { int l=int1(&p); int h=int1(&p);
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fece 	bl	8002fd8 <int1>
 800323c:	6438      	str	r0, [r7, #64]	; 0x40
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fec8 	bl	8002fd8 <int1>
 8003248:	63f8      	str	r0, [r7, #60]	; 0x3c
                 pitch_wheel_change(time, chan, (h<<7)+l); break;
 800324a:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	01da      	lsls	r2, r3, #7
 8003252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003254:	4413      	add	r3, r2
 8003256:	461a      	mov	r2, r3
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f7ff fe1b 	bl	8002e94 <pitch_wheel_change>
 800325e:	bf00      	nop
               }
  }

  *pp = p;
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	3748      	adds	r7, #72	; 0x48
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <meta_event>:

void meta_event(int time, const uint8_t **pp, const MIDI_Header *hdr)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b08b      	sub	sp, #44	; 0x2c
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  const uint8_t *p = *pp;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	613b      	str	r3, [r7, #16]
  int1(&p); // should be 0xff
 8003282:	f107 0310 	add.w	r3, r7, #16
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fea6 	bl	8002fd8 <int1>
  int type = int1(&p);
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fea1 	bl	8002fd8 <int1>
 8003296:	61f8      	str	r0, [r7, #28]
  int len = intvar(&p);
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fe7c 	bl	8002f9a <intvar>
 80032a2:	61b8      	str	r0, [r7, #24]
  const uint8_t *buf = p;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	617b      	str	r3, [r7, #20]
  p += len;
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4413      	add	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]

  file_offset_info(*pp - hdr->file_start);
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fd93 	bl	8002de8 <file_offset_info>
  switch(type) {
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	2b58      	cmp	r3, #88	; 0x58
 80032c8:	f200 8120 	bhi.w	800350c <meta_event+0x29c>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <meta_event+0x64>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	08003439 	.word	0x08003439
 80032d8:	08003443 	.word	0x08003443
 80032dc:	0800344d 	.word	0x0800344d
 80032e0:	0800350d 	.word	0x0800350d
 80032e4:	08003457 	.word	0x08003457
 80032e8:	08003463 	.word	0x08003463
 80032ec:	0800350d 	.word	0x0800350d
 80032f0:	0800350d 	.word	0x0800350d
 80032f4:	0800350d 	.word	0x0800350d
 80032f8:	0800350d 	.word	0x0800350d
 80032fc:	0800350d 	.word	0x0800350d
 8003300:	0800350d 	.word	0x0800350d
 8003304:	0800350d 	.word	0x0800350d
 8003308:	0800350d 	.word	0x0800350d
 800330c:	0800350d 	.word	0x0800350d
 8003310:	0800350d 	.word	0x0800350d
 8003314:	0800350d 	.word	0x0800350d
 8003318:	0800350d 	.word	0x0800350d
 800331c:	0800350d 	.word	0x0800350d
 8003320:	0800350d 	.word	0x0800350d
 8003324:	0800350d 	.word	0x0800350d
 8003328:	0800350d 	.word	0x0800350d
 800332c:	0800350d 	.word	0x0800350d
 8003330:	0800350d 	.word	0x0800350d
 8003334:	0800350d 	.word	0x0800350d
 8003338:	0800350d 	.word	0x0800350d
 800333c:	0800350d 	.word	0x0800350d
 8003340:	0800350d 	.word	0x0800350d
 8003344:	0800350d 	.word	0x0800350d
 8003348:	0800350d 	.word	0x0800350d
 800334c:	0800350d 	.word	0x0800350d
 8003350:	0800350d 	.word	0x0800350d
 8003354:	0800350d 	.word	0x0800350d
 8003358:	0800350d 	.word	0x0800350d
 800335c:	0800350d 	.word	0x0800350d
 8003360:	0800350d 	.word	0x0800350d
 8003364:	0800350d 	.word	0x0800350d
 8003368:	0800350d 	.word	0x0800350d
 800336c:	0800350d 	.word	0x0800350d
 8003370:	0800350d 	.word	0x0800350d
 8003374:	0800350d 	.word	0x0800350d
 8003378:	0800350d 	.word	0x0800350d
 800337c:	0800350d 	.word	0x0800350d
 8003380:	0800350d 	.word	0x0800350d
 8003384:	0800350d 	.word	0x0800350d
 8003388:	0800350d 	.word	0x0800350d
 800338c:	0800346f 	.word	0x0800346f
 8003390:	0800350d 	.word	0x0800350d
 8003394:	0800350d 	.word	0x0800350d
 8003398:	0800350d 	.word	0x0800350d
 800339c:	0800350d 	.word	0x0800350d
 80033a0:	0800350d 	.word	0x0800350d
 80033a4:	0800350d 	.word	0x0800350d
 80033a8:	0800350d 	.word	0x0800350d
 80033ac:	0800350d 	.word	0x0800350d
 80033b0:	0800350d 	.word	0x0800350d
 80033b4:	0800350d 	.word	0x0800350d
 80033b8:	0800350d 	.word	0x0800350d
 80033bc:	0800350d 	.word	0x0800350d
 80033c0:	0800350d 	.word	0x0800350d
 80033c4:	0800350d 	.word	0x0800350d
 80033c8:	0800350d 	.word	0x0800350d
 80033cc:	0800350d 	.word	0x0800350d
 80033d0:	0800350d 	.word	0x0800350d
 80033d4:	0800350d 	.word	0x0800350d
 80033d8:	0800350d 	.word	0x0800350d
 80033dc:	0800350d 	.word	0x0800350d
 80033e0:	0800350d 	.word	0x0800350d
 80033e4:	0800350d 	.word	0x0800350d
 80033e8:	0800350d 	.word	0x0800350d
 80033ec:	0800350d 	.word	0x0800350d
 80033f0:	0800350d 	.word	0x0800350d
 80033f4:	0800350d 	.word	0x0800350d
 80033f8:	0800350d 	.word	0x0800350d
 80033fc:	0800350d 	.word	0x0800350d
 8003400:	0800350d 	.word	0x0800350d
 8003404:	0800350d 	.word	0x0800350d
 8003408:	0800350d 	.word	0x0800350d
 800340c:	0800350d 	.word	0x0800350d
 8003410:	0800350d 	.word	0x0800350d
 8003414:	08003477 	.word	0x08003477
 8003418:	0800350d 	.word	0x0800350d
 800341c:	0800350d 	.word	0x0800350d
 8003420:	0800349b 	.word	0x0800349b
 8003424:	0800350d 	.word	0x0800350d
 8003428:	0800350d 	.word	0x0800350d
 800342c:	0800350d 	.word	0x0800350d
 8003430:	080034cf 	.word	0x080034cf
 8003434:	080034f7 	.word	0x080034f7
    case 0x01: text_event((char *)buf,len); break;
 8003438:	69b9      	ldr	r1, [r7, #24]
 800343a:	6978      	ldr	r0, [r7, #20]
 800343c:	f7ff fd36 	bl	8002eac <text_event>
 8003440:	e071      	b.n	8003526 <meta_event+0x2b6>
    case 0x02: copyright_notice((char *)buf,len); break;
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	6978      	ldr	r0, [r7, #20]
 8003446:	f7ff fd3c 	bl	8002ec2 <copyright_notice>
 800344a:	e06c      	b.n	8003526 <meta_event+0x2b6>
    case 0x03: track_name((char *)buf,len); break;
 800344c:	69b9      	ldr	r1, [r7, #24]
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	f7ff fd42 	bl	8002ed8 <track_name>
 8003454:	e067      	b.n	8003526 <meta_event+0x2b6>
    case 0x05: lyric(time, (char *)buf,len); break;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	6979      	ldr	r1, [r7, #20]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff fd47 	bl	8002eee <lyric>
 8003460:	e061      	b.n	8003526 <meta_event+0x2b6>
    case 0x06: marker(time, (char *)buf,len); break;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	6979      	ldr	r1, [r7, #20]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7ff fd4d 	bl	8002f06 <marker>
 800346c:	e05b      	b.n	8003526 <meta_event+0x2b6>
    case 0x2f: end_of_track(time); break;
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff fd55 	bl	8002f1e <end_of_track>
 8003474:	e057      	b.n	8003526 <meta_event+0x2b6>
    case 0x51: set_tempo(time, (buf[0]<<16)+(buf[1]<<8)+buf[2], hdr); break;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	041a      	lsls	r2, r3, #16
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3301      	adds	r3, #1
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	4413      	add	r3, r2
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	3202      	adds	r2, #2
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	4413      	add	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4619      	mov	r1, r3
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f7fe ffee 	bl	8002474 <set_tempo>
 8003498:	e045      	b.n	8003526 <meta_event+0x2b6>
    case 0x54: smpte_offset(time, buf[0], buf[1], buf[2], buf[3], buf[4]); break;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4619      	mov	r1, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3302      	adds	r3, #2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	461c      	mov	r4, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3303      	adds	r3, #3
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3304      	adds	r3, #4
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	9200      	str	r2, [sp, #0]
 80034c2:	4623      	mov	r3, r4
 80034c4:	4602      	mov	r2, r0
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fd33 	bl	8002f32 <smpte_offset>
 80034cc:	e02b      	b.n	8003526 <meta_event+0x2b6>
    case 0x58: time_signature(time, buf[0], buf[1], buf[2], buf[3]); break;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3301      	adds	r3, #1
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3302      	adds	r3, #2
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3303      	adds	r3, #3
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4603      	mov	r3, r0
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fd2c 	bl	8002f4c <time_signature>
 80034f4:	e017      	b.n	8003526 <meta_event+0x2b6>
    case 0x59: key_signature(time, buf[0], buf[1]); break;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b259      	sxtb	r1, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3301      	adds	r3, #1
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fd2e 	bl	8002f66 <key_signature>
 800350a:	e00c      	b.n	8003526 <meta_event+0x2b6>
    default:   unknown_meta(time, p - hdr->file_start, type, len, buf); break;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	461a      	mov	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1ad1      	subs	r1, r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff fd2e 	bl	8002f80 <unknown_meta>
 8003524:	bf00      	nop
  }
  *pp = p;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	601a      	str	r2, [r3, #0]
}
 800352c:	bf00      	nop
 800352e:	3724      	adds	r7, #36	; 0x24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd90      	pop	{r4, r7, pc}

08003534 <sysex_event>:

void sysex_event(int time, const uint8_t **pp, const MIDI_Header *hdr)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  const uint8_t *p = *pp;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	613b      	str	r3, [r7, #16]
  /* int event = */ int1(&p); // Should be 0xF0
 8003546:	f107 0310 	add.w	r3, r7, #16
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff fd44 	bl	8002fd8 <int1>
  int len;
  for(len=0; p[len] != 0xf7; len++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e002      	b.n	800355c <sysex_event+0x28>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	3301      	adds	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	4413      	add	r3, r2
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2bf7      	cmp	r3, #247	; 0xf7
 8003566:	d1f6      	bne.n	8003556 <sysex_event+0x22>
    ;
  len += 1; // Include the 0xf7 in the length.
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3301      	adds	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
  sysex_info(time, *pp, p, len, hdr);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f7ff fc4b 	bl	8002e16 <sysex_info>
  p += len;
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	4413      	add	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
  *pp = p;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	601a      	str	r2, [r3, #0]
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <init_track>:

void init_track(int num, const uint8_t *p, int len, const MIDI_Header *hdr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  track_info(num, p, len, hdr);
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff fc25 	bl	8002dfc <track_info>
  Track *t = &track[num];
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <init_track+0x60>)
 80035be:	4413      	add	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
  t->header = hdr;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]
  t->end = p + len;
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	441a      	add	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	605a      	str	r2, [r3, #4]
  t->nexttick = intvar(&p);
 80035d2:	f107 0308 	add.w	r3, r7, #8
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fcdf 	bl	8002f9a <intvar>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	60da      	str	r2, [r3, #12]
  t->pos = p;
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	609a      	str	r2, [r3, #8]
  t->prev_cmd = 0;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	741a      	strb	r2, [r3, #16]
}
 80035ee:	bf00      	nop
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	2000010c 	.word	0x2000010c

080035fc <track_interpret>:

void track_interpret(Track *t, int time)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  const uint8_t *p = t->pos;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	60fb      	str	r3, [r7, #12]
  while(t->nexttick == time) {
 800360c:	e05e      	b.n	80036cc <track_interpret+0xd0>
    if (*p < 0x80) { // Repeated Note Message
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b25b      	sxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	db0a      	blt.n	800362e <track_interpret+0x32>
      midi_event(time, t->prev_cmd, &p, t->header);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7c1b      	ldrb	r3, [r3, #16]
 800361c:	4619      	mov	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f107 020c 	add.w	r2, r7, #12
 8003626:	6838      	ldr	r0, [r7, #0]
 8003628:	f7ff fd64 	bl	80030f4 <midi_event>
 800362c:	e03a      	b.n	80036a4 <track_interpret+0xa8>
    } else if (*p < 0xf0) { // Channel Voice Message
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2bef      	cmp	r3, #239	; 0xef
 8003634:	d811      	bhi.n	800365a <track_interpret+0x5e>
      t->prev_cmd = *p;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	741a      	strb	r2, [r3, #16]
      p++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3301      	adds	r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
      midi_event(time, t->prev_cmd, &p, t->header);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7c1b      	ldrb	r3, [r3, #16]
 8003648:	4619      	mov	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f107 020c 	add.w	r2, r7, #12
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	f7ff fd4e 	bl	80030f4 <midi_event>
 8003658:	e024      	b.n	80036a4 <track_interpret+0xa8>
    } else if (*p == 0xf0) { // System Exclusive Message
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2bf0      	cmp	r3, #240	; 0xf0
 8003660:	d108      	bne.n	8003674 <track_interpret+0x78>
      sysex_event(time, &p, t->header);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	4619      	mov	r1, r3
 800366c:	6838      	ldr	r0, [r7, #0]
 800366e:	f7ff ff61 	bl	8003534 <sysex_event>
 8003672:	e017      	b.n	80036a4 <track_interpret+0xa8>
    } else if (*p < 0xff) { // What?
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2bff      	cmp	r3, #255	; 0xff
 800367a:	d00b      	beq.n	8003694 <track_interpret+0x98>
      midi_error(time, p, t->header->file_start, "Unknown message");
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <track_interpret+0xe8>)
 8003686:	6838      	ldr	r0, [r7, #0]
 8003688:	f7ff fb97 	bl	8002dba <midi_error>
      p++; // skip it
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3301      	adds	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e007      	b.n	80036a4 <track_interpret+0xa8>
    } else { // Meta Event Message
      meta_event(time, &p, t->header);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	4619      	mov	r1, r3
 800369e:	6838      	ldr	r0, [r7, #0]
 80036a0:	f7ff fde6 	bl	8003270 <meta_event>
    }
    if (p >= t->end) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d803      	bhi.n	80036b6 <track_interpret+0xba>
      t->nexttick = 0x10000000;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b4:	60da      	str	r2, [r3, #12]
    }
    t->nexttick += intvar(&p);
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fc6d 	bl	8002f9a <intvar>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	441a      	add	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
  while(t->nexttick == time) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d09b      	beq.n	800360e <track_interpret+0x12>
  }
  t->pos = p;
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	0800ebbc 	.word	0x0800ebbc

080036e8 <midi_play>:

void midi_play(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
  player.ticks++;
 80036ee:	4b2c      	ldr	r3, [pc, #176]	; (80037a0 <midi_play+0xb8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <midi_play+0xb8>)
 80036f6:	6013      	str	r3, [r2, #0]
  if (player.ticks < player.nexttick)
 80036f8:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <midi_play+0xb8>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <midi_play+0xb8>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	db48      	blt.n	8003796 <midi_play+0xae>
    return;
  int n;
  for(n=0; n<header.tracks; n++) {
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e016      	b.n	8003738 <midi_play+0x50>
    Track *t = &track[n];
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <midi_play+0xbc>)
 8003716:	4413      	add	r3, r2
 8003718:	607b      	str	r3, [r7, #4]
    if (t->nexttick == player.nexttick)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <midi_play+0xb8>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d105      	bne.n	8003732 <midi_play+0x4a>
      track_interpret(t, player.nexttick);
 8003726:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <midi_play+0xb8>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4619      	mov	r1, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff65 	bl	80035fc <track_interpret>
  for(n=0; n<header.tracks; n++) {
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3301      	adds	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <midi_play+0xc0>)
 800373a:	7a5b      	ldrb	r3, [r3, #9]
 800373c:	461a      	mov	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4293      	cmp	r3, r2
 8003742:	dbe2      	blt.n	800370a <midi_play+0x22>
  }
  player.nexttick=MAXTICKS;
 8003744:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <midi_play+0xb8>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	605a      	str	r2, [r3, #4]
  for(n=0; n<header.tracks; n++) {
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e01a      	b.n	8003788 <midi_play+0xa0>
    Track *t = &track[n];
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <midi_play+0xbc>)
 800375e:	4413      	add	r3, r2
 8003760:	60bb      	str	r3, [r7, #8]
    if (t->pos < t->end && t->nexttick < player.nexttick)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	429a      	cmp	r2, r3
 800376c:	d209      	bcs.n	8003782 <midi_play+0x9a>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <midi_play+0xb8>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	da03      	bge.n	8003782 <midi_play+0x9a>
      player.nexttick = t->nexttick;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <midi_play+0xb8>)
 8003780:	6053      	str	r3, [r2, #4]
  for(n=0; n<header.tracks; n++) {
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <midi_play+0xc0>)
 800378a:	7a5b      	ldrb	r3, [r3, #9]
 800378c:	461a      	mov	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4293      	cmp	r3, r2
 8003792:	dbde      	blt.n	8003752 <midi_play+0x6a>
 8003794:	e000      	b.n	8003798 <midi_play+0xb0>
    return;
 8003796:	bf00      	nop
  }
}
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000104 	.word	0x20000104
 80037a4:	2000010c 	.word	0x2000010c
 80037a8:	200000f8 	.word	0x200000f8

080037ac <midi_init>:

MIDI_Player *midi_init(const uint8_t *file_start)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  const uint8_t *p = file_start;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
  if (!eat(&p,"MThd")) midi_error(0, p, file_start, "No MThd found");
 80037b8:	f107 030c 	add.w	r3, r7, #12
 80037bc:	4934      	ldr	r1, [pc, #208]	; (8003890 <midi_init+0xe4>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fc77 	bl	80030b2 <eat>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d105      	bne.n	80037d6 <midi_init+0x2a>
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4b31      	ldr	r3, [pc, #196]	; (8003894 <midi_init+0xe8>)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	2000      	movs	r0, #0
 80037d2:	f7ff faf2 	bl	8002dba <midi_error>
  header.file_start = file_start;
 80037d6:	4a30      	ldr	r2, [pc, #192]	; (8003898 <midi_init+0xec>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6013      	str	r3, [r2, #0]
  header.length = int4(&p);
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fc31 	bl	8003048 <int4>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <midi_init+0xec>)
 80037ea:	605a      	str	r2, [r3, #4]
  header.format = int2(&p);
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fc08 	bl	8003006 <int2>
 80037f6:	4603      	mov	r3, r0
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b27      	ldr	r3, [pc, #156]	; (8003898 <midi_init+0xec>)
 80037fc:	721a      	strb	r2, [r3, #8]
  header.tracks = int2(&p);
 80037fe:	f107 030c 	add.w	r3, r7, #12
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fbff 	bl	8003006 <int2>
 8003808:	4603      	mov	r3, r0
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <midi_init+0xec>)
 800380e:	725a      	strb	r2, [r3, #9]
  header.divisions = int2(&p);
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fbf6 	bl	8003006 <int2>
 800381a:	4603      	mov	r3, r0
 800381c:	b29a      	uxth	r2, r3
 800381e:	4b1e      	ldr	r3, [pc, #120]	; (8003898 <midi_init+0xec>)
 8003820:	815a      	strh	r2, [r3, #10]
  header_info(&header);
 8003822:	481d      	ldr	r0, [pc, #116]	; (8003898 <midi_init+0xec>)
 8003824:	f7ff fad6 	bl	8002dd4 <header_info>

  int n=0;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
  while(eat(&p,"MTrk")) {
 800382c:	e01b      	b.n	8003866 <midi_init+0xba>
    int len = int4(&p);
 800382e:	f107 030c 	add.w	r3, r7, #12
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fc08 	bl	8003048 <int4>
 8003838:	6138      	str	r0, [r7, #16]
    if (n >= MAXTRACKS)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b22      	cmp	r3, #34	; 0x22
 800383e:	dd06      	ble.n	800384e <midi_init+0xa2>
      midi_error(0, p, file_start, "Too many tracks");
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	4b16      	ldr	r3, [pc, #88]	; (800389c <midi_init+0xf0>)
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	2000      	movs	r0, #0
 8003848:	f7ff fab7 	bl	8002dba <midi_error>
 800384c:	e007      	b.n	800385e <midi_init+0xb2>
    else
      init_track(n++, p, len, &header);
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	68f9      	ldr	r1, [r7, #12]
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <midi_init+0xec>)
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	f7ff fe9d 	bl	8003598 <init_track>
    p += len;
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  while(eat(&p,"MTrk")) {
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	490d      	ldr	r1, [pc, #52]	; (80038a0 <midi_init+0xf4>)
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fc20 	bl	80030b2 <eat>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1da      	bne.n	800382e <midi_init+0x82>
  }

  player.ticks = 0;
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <midi_init+0xf8>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
  player.nexttick = 0;
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <midi_init+0xf8>)
 8003880:	2200      	movs	r2, #0
 8003882:	605a      	str	r2, [r3, #4]
  return &player;
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <midi_init+0xf8>)
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	0800ebcc 	.word	0x0800ebcc
 8003894:	0800ebd4 	.word	0x0800ebd4
 8003898:	200000f8 	.word	0x200000f8
 800389c:	0800ebe4 	.word	0x0800ebe4
 80038a0:	0800ebf4 	.word	0x0800ebf4
 80038a4:	20000104 	.word	0x20000104

080038a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_MspInit+0x4c>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <HAL_MspInit+0x4c>)
 80038b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038bc:	6453      	str	r3, [r2, #68]	; 0x44
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_MspInit+0x4c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <HAL_MspInit+0x4c>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <HAL_MspInit+0x4c>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_MspInit+0x4c>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038e6:	2007      	movs	r0, #7
 80038e8:	f001 fa66 	bl	8004db8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40023800 	.word	0x40023800

080038f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a17      	ldr	r2, [pc, #92]	; (8003974 <HAL_DAC_MspInit+0x7c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d127      	bne.n	800396a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_DAC_MspInit+0x80>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a15      	ldr	r2, [pc, #84]	; (8003978 <HAL_DAC_MspInit+0x80>)
 8003924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_DAC_MspInit+0x80>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <HAL_DAC_MspInit+0x80>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <HAL_DAC_MspInit+0x80>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_DAC_MspInit+0x80>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003952:	2310      	movs	r3, #16
 8003954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003956:	2303      	movs	r3, #3
 8003958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f107 0314 	add.w	r3, r7, #20
 8003962:	4619      	mov	r1, r3
 8003964:	4805      	ldr	r0, [pc, #20]	; (800397c <HAL_DAC_MspInit+0x84>)
 8003966:	f001 fedf 	bl	8005728 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800396a:	bf00      	nop
 800396c:	3728      	adds	r7, #40	; 0x28
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40007400 	.word	0x40007400
 8003978:	40023800 	.word	0x40023800
 800397c:	40020000 	.word	0x40020000

08003980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	f107 031c 	add.w	r3, r7, #28
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <HAL_I2C_MspInit+0x128>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d12d      	bne.n	80039fe <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	4b41      	ldr	r3, [pc, #260]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a40      	ldr	r2, [pc, #256]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80039be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80039c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c4:	2312      	movs	r3, #18
 80039c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c8:	2301      	movs	r3, #1
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039d0:	2304      	movs	r3, #4
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039d4:	f107 031c 	add.w	r3, r7, #28
 80039d8:	4619      	mov	r1, r3
 80039da:	4835      	ldr	r0, [pc, #212]	; (8003ab0 <HAL_I2C_MspInit+0x130>)
 80039dc:	f001 fea4 	bl	8005728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	4a30      	ldr	r2, [pc, #192]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 80039ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039ee:	6413      	str	r3, [r2, #64]	; 0x40
 80039f0:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80039fc:	e050      	b.n	8003aa0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <HAL_I2C_MspInit+0x134>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d14b      	bne.n	8003aa0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	4b27      	ldr	r3, [pc, #156]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	4a26      	ldr	r2, [pc, #152]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	6313      	str	r3, [r2, #48]	; 0x30
 8003a18:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	6313      	str	r3, [r2, #48]	; 0x30
 8003a34:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a46:	2312      	movs	r3, #18
 8003a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a52:	2304      	movs	r3, #4
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4816      	ldr	r0, [pc, #88]	; (8003ab8 <HAL_I2C_MspInit+0x138>)
 8003a5e:	f001 fe63 	bl	8005728 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a68:	2312      	movs	r3, #18
 8003a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a70:	2303      	movs	r3, #3
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a74:	2304      	movs	r3, #4
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a78:	f107 031c 	add.w	r3, r7, #28
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	480f      	ldr	r0, [pc, #60]	; (8003abc <HAL_I2C_MspInit+0x13c>)
 8003a80:	f001 fe52 	bl	8005728 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a92:	6413      	str	r3, [r2, #64]	; 0x40
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_I2C_MspInit+0x12c>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	3730      	adds	r7, #48	; 0x30
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40005400 	.word	0x40005400
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	40005c00 	.word	0x40005c00
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020000 	.word	0x40020000

08003ac0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a54      	ldr	r2, [pc, #336]	; (8003c30 <HAL_I2S_MspInit+0x170>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	f040 80a2 	bne.w	8003c28 <HAL_I2S_MspInit+0x168>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	4b52      	ldr	r3, [pc, #328]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a51      	ldr	r2, [pc, #324]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
 8003af4:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	4a4a      	ldr	r2, [pc, #296]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b0a:	f043 0304 	orr.w	r3, r3, #4
 8003b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b10:	4b48      	ldr	r3, [pc, #288]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	4b44      	ldr	r3, [pc, #272]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	4a43      	ldr	r2, [pc, #268]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	4a3c      	ldr	r2, [pc, #240]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b42:	f043 0302 	orr.w	r3, r3, #2
 8003b46:	6313      	str	r3, [r2, #48]	; 0x30
 8003b48:	4b3a      	ldr	r3, [pc, #232]	; (8003c34 <HAL_I2S_MspInit+0x174>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin;
 8003b54:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8003b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b62:	2300      	movs	r3, #0
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b66:	2306      	movs	r3, #6
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4831      	ldr	r0, [pc, #196]	; (8003c38 <HAL_I2S_MspInit+0x178>)
 8003b72:	f001 fdd9 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b88:	2306      	movs	r3, #6
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4619      	mov	r1, r3
 8003b92:	482a      	ldr	r0, [pc, #168]	; (8003c3c <HAL_I2S_MspInit+0x17c>)
 8003b94:	f001 fdc8 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SD_Pin;
 8003b98:	2320      	movs	r3, #32
 8003b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ba8:	2306      	movs	r3, #6
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4823      	ldr	r0, [pc, #140]	; (8003c40 <HAL_I2S_MspInit+0x180>)
 8003bb4:	f001 fdb8 	bl	8005728 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003bb8:	4b22      	ldr	r3, [pc, #136]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bba:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <HAL_I2S_MspInit+0x188>)
 8003bbc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003bbe:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bc4:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bd0:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bd6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bde:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8003be6:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003be8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bec:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003c00:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003c0c:	480d      	ldr	r0, [pc, #52]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003c0e:	f001 f983 	bl	8004f18 <HAL_DMA_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2S_MspInit+0x15c>
    {
      Error_Handler();
 8003c18:	f7ff f8c8 	bl	8002dac <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
 8003c22:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <HAL_I2S_MspInit+0x184>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003c28:	bf00      	nop
 8003c2a:	3730      	adds	r7, #48	; 0x30
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40003c00 	.word	0x40003c00
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40020800 	.word	0x40020800
 8003c3c:	40020000 	.word	0x40020000
 8003c40:	40020400 	.word	0x40020400
 8003c44:	200028b0 	.word	0x200028b0
 8003c48:	40026088 	.word	0x40026088

08003c4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <HAL_SD_MspInit+0xc0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d14a      	bne.n	8003d04 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003c78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003cb0:	f043 0308 	orr.w	r3, r3, #8
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <HAL_SD_MspInit+0xc4>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003cc2:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	4619      	mov	r1, r3
 8003cde:	480d      	ldr	r0, [pc, #52]	; (8003d14 <HAL_SD_MspInit+0xc8>)
 8003ce0:	f001 fd22 	bl	8005728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003cf4:	230c      	movs	r3, #12
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4806      	ldr	r0, [pc, #24]	; (8003d18 <HAL_SD_MspInit+0xcc>)
 8003d00:	f001 fd12 	bl	8005728 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003d04:	bf00      	nop
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020800 	.word	0x40020800
 8003d18:	40020c00 	.word	0x40020c00

08003d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <HAL_TIM_Base_MspInit+0x98>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d13d      	bne.n	8003daa <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <HAL_TIM_Base_MspInit+0x9c>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <HAL_TIM_Base_MspInit+0x9c>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_TIM_Base_MspInit+0x9c>)
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d4c:	4a1c      	ldr	r2, [pc, #112]	; (8003dc0 <HAL_TIM_Base_MspInit+0xa4>)
 8003d4e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003d50:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d52:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003d56:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003d64:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d6a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d72:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d7a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003d8e:	480b      	ldr	r0, [pc, #44]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003d90:	f001 f8c2 	bl	8004f18 <HAL_DMA_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003d9a:	f7ff f807 	bl	8002dac <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a06      	ldr	r2, [pc, #24]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003da2:	621a      	str	r2, [r3, #32]
 8003da4:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <HAL_TIM_Base_MspInit+0xa0>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	20003a20 	.word	0x20003a20
 8003dc0:	40026488 	.word	0x40026488

08003dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dd6:	e7fe      	b.n	8003dd6 <HardFault_Handler+0x4>

08003dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <MemManage_Handler+0x4>

08003dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003de2:	e7fe      	b.n	8003de2 <BusFault_Handler+0x4>

08003de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de8:	e7fe      	b.n	8003de8 <UsageFault_Handler+0x4>

08003dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dee:	bf00      	nop
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e18:	f000 febc 	bl	8004b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003e24:	2002      	movs	r0, #2
 8003e26:	f001 fe65 	bl	8005af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003e32:	2004      	movs	r0, #4
 8003e34:	f001 fe5e 	bl	8005af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003e40:	2008      	movs	r0, #8
 8003e42:	f001 fe57 	bl	8005af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <DMA1_Stream5_IRQHandler+0x10>)
 8003e52:	f001 fa01 	bl	8005258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200028b0 	.word	0x200028b0

08003e60 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <DMA2_Stream5_IRQHandler+0x10>)
 8003e66:	f001 f9f7 	bl	8005258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20003a20 	.word	0x20003a20

08003e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <_sbrk+0x5c>)
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <_sbrk+0x60>)
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <_sbrk+0x64>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <_sbrk+0x64>)
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <_sbrk+0x68>)
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <_sbrk+0x64>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d207      	bcs.n	8003eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ea4:	f009 f9e0 	bl	800d268 <__errno>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e009      	b.n	8003ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <_sbrk+0x64>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <_sbrk+0x64>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <_sbrk+0x64>)
 8003ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20020000 	.word	0x20020000
 8003ed4:	00000400 	.word	0x00000400
 8003ed8:	200003c8 	.word	0x200003c8
 8003edc:	200122c8 	.word	0x200122c8

08003ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <SystemInit+0x28>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	4a07      	ldr	r2, [pc, #28]	; (8003f08 <SystemInit+0x28>)
 8003eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <SystemInit+0x28>)
 8003ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003efa:	609a      	str	r2, [r3, #8]
#endif
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <setRed>:
		}
	}
}

//uint8_t frameBuffer2[3*20];
void setRed(uint8_t i){
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
	//memset(frameBuffer, 0, sizeof frameBuffer);
	frameBuffer[(i*2+23)*3 + 2] = 0x8F; //B of i
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	f103 0217 	add.w	r2, r3, #23
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	3302      	adds	r3, #2
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <setRed+0x44>)
 8003f28:	218f      	movs	r1, #143	; 0x8f
 8003f2a:	54d1      	strb	r1, [r2, r3]
	frameBuffer[(i*2+24)*3 + 2] = 0x8F; //B of i+1
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	f103 020c 	add.w	r2, r3, #12
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <setRed+0x44>)
 8003f3e:	218f      	movs	r1, #143	; 0x8f
 8003f40:	54d1      	strb	r1, [r2, r3]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	2000fea0 	.word	0x2000fea0

08003f54 <clearLED>:

void clearLED(){
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
	memset(frameBuffer, 0, sizeof frameBuffer);
 8003f58:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4802      	ldr	r0, [pc, #8]	; (8003f68 <clearLED+0x14>)
 8003f60:	f009 f9b7 	bl	800d2d2 <memset>
}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	2000fea0 	.word	0x2000fea0

08003f6c <visInit>:
		//visDots(frameBuffer2, sizeof(frameBuffer2), 50, 40);
	}
}*/

void visInit()
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0

	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
	//frameBuffer[i*3 + 0] = 0xFF; //R of i
	//frameBuffer[(i+143)*3 + 2] = 0xFF;
		ws2812b.item[0].channel = 0;
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <visInit+0x20>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	731a      	strb	r2, [r3, #12]

		// Every even output line has second frameBuffer2 with different effect

			// Your RGB framebuffer
			ws2812b.item[0].frameBufferPointer = frameBuffer;
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <visInit+0x20>)
 8003f78:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <visInit+0x24>)
 8003f7a:	601a      	str	r2, [r3, #0]
			// RAW size of framebuffer
			ws2812b.item[0].frameBufferSize = sizeof(frameBuffer);
 8003f7c:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <visInit+0x20>)
 8003f7e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8003f82:	605a      	str	r2, [r3, #4]


	ws2812b_init();
 8003f84:	f000 fd6a 	bl	8004a5c <ws2812b_init>
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	2000fe84 	.word	0x2000fe84
 8003f90:	2000fea0 	.word	0x2000fea0

08003f94 <visHandle>:


void visHandle()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0

	if(ws2812b.transferComplete)
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <visHandle+0x1c>)
 8003f9a:	7c1b      	ldrb	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <visHandle+0x16>
	{
		// Update your framebuffer here or swap buffers
		//visHandle2();

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <visHandle+0x1c>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 8003fa6:	f000 fd69 	bl	8004a7c <ws2812b_handle>
	}
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	2000fe84 	.word	0x2000fe84

08003fb4 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <ws2812b_gpio_init+0x94>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a21      	ldr	r2, [pc, #132]	; (8004048 <ws2812b_gpio_init+0x94>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <ws2812b_gpio_init+0x94>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8003fe6:	f107 030c 	add.w	r3, r7, #12
 8003fea:	4619      	mov	r1, r3
 8003fec:	4817      	ldr	r0, [pc, #92]	; (800404c <ws2812b_gpio_init+0x98>)
 8003fee:	f001 fb9b 	bl	8005728 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <ws2812b_gpio_init+0x94>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <ws2812b_gpio_init+0x94>)
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <ws2812b_gpio_init+0x94>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	607b      	str	r3, [r7, #4]
 800400c:	687b      	ldr	r3, [r7, #4]

		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	2301      	movs	r3, #1
 8004010:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004016:	2302      	movs	r3, #2
 8004018:	61bb      	str	r3, [r7, #24]

		GPIO_InitStruct.Pin = LED_BLUE_PIN;
 800401a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401e:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	4619      	mov	r1, r3
 8004026:	480a      	ldr	r0, [pc, #40]	; (8004050 <ws2812b_gpio_init+0x9c>)
 8004028:	f001 fb7e 	bl	8005728 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 800402c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004030:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8004032:	f107 030c 	add.w	r3, r7, #12
 8004036:	4619      	mov	r1, r3
 8004038:	4805      	ldr	r0, [pc, #20]	; (8004050 <ws2812b_gpio_init+0x9c>)
 800403a:	f001 fb75 	bl	8005728 <HAL_GPIO_Init>
	#endif
}
 800403e:	bf00      	nop
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	40020800 	.word	0x40020800
 8004050:	40020c00 	.word	0x40020c00

08004054 <TIM1_init>:

uint32_t tim_period;
uint32_t timer_reset_pulse_period;

static void TIM1_init(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM1_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <TIM1_init+0x154>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	4a51      	ldr	r2, [pc, #324]	; (80041a8 <TIM1_init+0x154>)
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	6453      	str	r3, [r2, #68]	; 0x44
 800406a:	4b4f      	ldr	r3, [pc, #316]	; (80041a8 <TIM1_init+0x154>)
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8004076:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <TIM1_init+0x158>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	4a4c      	ldr	r2, [pc, #304]	; (80041b0 <TIM1_init+0x15c>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	4a4b      	ldr	r2, [pc, #300]	; (80041b4 <TIM1_init+0x160>)
 8004086:	6013      	str	r3, [r2, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8004088:	4b48      	ldr	r3, [pc, #288]	; (80041ac <TIM1_init+0x158>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a4a      	ldr	r2, [pc, #296]	; (80041b8 <TIM1_init+0x164>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	0adb      	lsrs	r3, r3, #11
 8004094:	4a49      	ldr	r2, [pc, #292]	; (80041bc <TIM1_init+0x168>)
 8004096:	6013      	str	r3, [r2, #0]

	uint32_t cc1 = (10 * tim_period) / 36;
 8004098:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <TIM1_init+0x160>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <TIM1_init+0x16c>)
 80040a8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ac:	08db      	lsrs	r3, r3, #3
 80040ae:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 80040b0:	4b40      	ldr	r3, [pc, #256]	; (80041b4 <TIM1_init+0x160>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	461a      	mov	r2, r3
 80040be:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <TIM1_init+0x170>)
 80040c0:	fba3 2302 	umull	r2, r3, r3, r2
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	60bb      	str	r3, [r7, #8]

	TIM1_handle.Instance = TIM1;
 80040c8:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <TIM1_init+0x174>)
 80040ca:	4a40      	ldr	r2, [pc, #256]	; (80041cc <TIM1_init+0x178>)
 80040cc:	601a      	str	r2, [r3, #0]

	TIM1_handle.Init.Period            = tim_period;
 80040ce:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <TIM1_init+0x160>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a3d      	ldr	r2, [pc, #244]	; (80041c8 <TIM1_init+0x174>)
 80040d4:	60d3      	str	r3, [r2, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 80040d6:	4b3c      	ldr	r3, [pc, #240]	; (80041c8 <TIM1_init+0x174>)
 80040d8:	2200      	movs	r2, #0
 80040da:	615a      	str	r2, [r3, #20]
	TIM1_handle.Init.Prescaler         = 0;
 80040dc:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <TIM1_init+0x174>)
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]
	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <TIM1_init+0x174>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]
	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80040e8:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <TIM1_init+0x174>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 80040ee:	4836      	ldr	r0, [pc, #216]	; (80041c8 <TIM1_init+0x174>)
 80040f0:	f005 f8f1 	bl	80092d6 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80040f4:	2200      	movs	r2, #0
 80040f6:	2100      	movs	r1, #0
 80040f8:	2019      	movs	r0, #25
 80040fa:	f000 fe68 	bl	8004dce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80040fe:	2019      	movs	r0, #25
 8004100:	f000 fe81 	bl	8004e06 <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <TIM1_init+0x17c>)
 8004106:	2260      	movs	r2, #96	; 0x60
 8004108:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <TIM1_init+0x17c>)
 800410c:	2200      	movs	r2, #0
 800410e:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 8004110:	4a2f      	ldr	r2, [pc, #188]	; (80041d0 <TIM1_init+0x17c>)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <TIM1_init+0x17c>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <TIM1_init+0x17c>)
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 8004122:	2200      	movs	r2, #0
 8004124:	492a      	ldr	r1, [pc, #168]	; (80041d0 <TIM1_init+0x17c>)
 8004126:	4828      	ldr	r0, [pc, #160]	; (80041c8 <TIM1_init+0x174>)
 8004128:	f005 fa50 	bl	80095cc <HAL_TIM_PWM_ConfigChannel>

	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 800412c:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <TIM1_init+0x180>)
 800412e:	2260      	movs	r2, #96	; 0x60
 8004130:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8004132:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <TIM1_init+0x180>)
 8004134:	2200      	movs	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 8004138:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <TIM1_init+0x180>)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <TIM1_init+0x180>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <TIM1_init+0x180>)
 8004146:	2200      	movs	r2, #0
 8004148:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800414a:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <TIM1_init+0x180>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004150:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <TIM1_init+0x180>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 8004156:	2204      	movs	r2, #4
 8004158:	491e      	ldr	r1, [pc, #120]	; (80041d4 <TIM1_init+0x180>)
 800415a:	481b      	ldr	r0, [pc, #108]	; (80041c8 <TIM1_init+0x174>)
 800415c:	f005 fa36 	bl	80095cc <HAL_TIM_PWM_ConfigChannel>


	HAL_TIM_Base_Start(&TIM1_handle);
 8004160:	4819      	ldr	r0, [pc, #100]	; (80041c8 <TIM1_init+0x174>)
 8004162:	f005 f894 	bl	800928e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 8004166:	2100      	movs	r1, #0
 8004168:	4817      	ldr	r0, [pc, #92]	; (80041c8 <TIM1_init+0x174>)
 800416a:	f005 f8e9 	bl	8009340 <HAL_TIM_PWM_Start>

	__HAL_TIM_DISABLE(&TIM1_handle);
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <TIM1_init+0x174>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a1a      	ldr	r2, [r3, #32]
 8004174:	f241 1311 	movw	r3, #4369	; 0x1111
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <TIM1_init+0x14a>
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <TIM1_init+0x174>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	f240 4344 	movw	r3, #1092	; 0x444
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <TIM1_init+0x14a>
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <TIM1_init+0x174>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <TIM1_init+0x174>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	20000004 	.word	0x20000004
 80041b0:	014f8b59 	.word	0x014f8b59
 80041b4:	2001012c 	.word	0x2001012c
 80041b8:	1b4e81b5 	.word	0x1b4e81b5
 80041bc:	2001006c 	.word	0x2001006c
 80041c0:	38e38e39 	.word	0x38e38e39
 80041c4:	88888889 	.word	0x88888889
 80041c8:	200100ec 	.word	0x200100ec
 80041cc:	40010000 	.word	0x40010000
 80041d0:	200100d0 	.word	0x200100d0
 80041d4:	20010050 	.word	0x20010050

080041d8 <DMA2_init>:

uint32_t dummy;


static void DMA2_init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA2_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <DMA2_init+0x1a0>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a64      	ldr	r2, [pc, #400]	; (8004378 <DMA2_init+0x1a0>)
 80041e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b62      	ldr	r3, [pc, #392]	; (8004378 <DMA2_init+0x1a0>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]

	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041fa:	4b60      	ldr	r3, [pc, #384]	; (800437c <DMA2_init+0x1a4>)
 80041fc:	2240      	movs	r2, #64	; 0x40
 80041fe:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8004200:	4b5e      	ldr	r3, [pc, #376]	; (800437c <DMA2_init+0x1a4>)
 8004202:	2200      	movs	r2, #0
 8004204:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 8004206:	4b5d      	ldr	r3, [pc, #372]	; (800437c <DMA2_init+0x1a4>)
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800420c:	4b5b      	ldr	r3, [pc, #364]	; (800437c <DMA2_init+0x1a4>)
 800420e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004212:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <DMA2_init+0x1a4>)
 8004216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800421a:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 800421c:	4b57      	ldr	r3, [pc, #348]	; (800437c <DMA2_init+0x1a4>)
 800421e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004222:	61da      	str	r2, [r3, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004224:	4b55      	ldr	r3, [pc, #340]	; (800437c <DMA2_init+0x1a4>)
 8004226:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800422a:	621a      	str	r2, [r3, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 800422c:	4b53      	ldr	r3, [pc, #332]	; (800437c <DMA2_init+0x1a4>)
 800422e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004232:	605a      	str	r2, [r3, #4]

	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004234:	4b51      	ldr	r3, [pc, #324]	; (800437c <DMA2_init+0x1a4>)
 8004236:	2200      	movs	r2, #0
 8004238:	625a      	str	r2, [r3, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800423a:	4b50      	ldr	r3, [pc, #320]	; (800437c <DMA2_init+0x1a4>)
 800423c:	2203      	movs	r2, #3
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 8004240:	4b4e      	ldr	r3, [pc, #312]	; (800437c <DMA2_init+0x1a4>)
 8004242:	2200      	movs	r2, #0
 8004244:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004246:	4b4d      	ldr	r3, [pc, #308]	; (800437c <DMA2_init+0x1a4>)
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30

	dmaUpdate.Instance = DMA2_Stream5;
 800424c:	4b4b      	ldr	r3, [pc, #300]	; (800437c <DMA2_init+0x1a4>)
 800424e:	4a4c      	ldr	r2, [pc, #304]	; (8004380 <DMA2_init+0x1a8>)
 8004250:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_DMA_DeInit(&dmaUpdate);
 8004252:	484a      	ldr	r0, [pc, #296]	; (800437c <DMA2_init+0x1a4>)
 8004254:	f000 ff0e 	bl	8005074 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 8004258:	4848      	ldr	r0, [pc, #288]	; (800437c <DMA2_init+0x1a4>)
 800425a:	f000 fe5d 	bl	8004f18 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 800425e:	4949      	ldr	r1, [pc, #292]	; (8004384 <DMA2_init+0x1ac>)
 8004260:	2330      	movs	r3, #48	; 0x30
 8004262:	4a49      	ldr	r2, [pc, #292]	; (8004388 <DMA2_init+0x1b0>)
 8004264:	4845      	ldr	r0, [pc, #276]	; (800437c <DMA2_init+0x1a4>)
 8004266:	f000 ff63 	bl	8005130 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800426a:	4b48      	ldr	r3, [pc, #288]	; (800438c <DMA2_init+0x1b4>)
 800426c:	2240      	movs	r2, #64	; 0x40
 800426e:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004270:	4b46      	ldr	r3, [pc, #280]	; (800438c <DMA2_init+0x1b4>)
 8004272:	2200      	movs	r2, #0
 8004274:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 8004276:	4b45      	ldr	r3, [pc, #276]	; (800438c <DMA2_init+0x1b4>)
 8004278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800427c:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800427e:	4b43      	ldr	r3, [pc, #268]	; (800438c <DMA2_init+0x1b4>)
 8004280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004284:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004286:	4b41      	ldr	r3, [pc, #260]	; (800438c <DMA2_init+0x1b4>)
 8004288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800428c:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 800428e:	4b3f      	ldr	r3, [pc, #252]	; (800438c <DMA2_init+0x1b4>)
 8004290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004294:	61da      	str	r2, [r3, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004296:	4b3d      	ldr	r3, [pc, #244]	; (800438c <DMA2_init+0x1b4>)
 8004298:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800429c:	621a      	str	r2, [r3, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <DMA2_init+0x1b4>)
 80042a0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80042a4:	605a      	str	r2, [r3, #4]

	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <DMA2_init+0x1b4>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042ac:	4b37      	ldr	r3, [pc, #220]	; (800438c <DMA2_init+0x1b4>)
 80042ae:	2203      	movs	r2, #3
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <DMA2_init+0x1b4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80042b8:	4b34      	ldr	r3, [pc, #208]	; (800438c <DMA2_init+0x1b4>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC1.Instance = DMA2_Stream1;
 80042be:	4b33      	ldr	r3, [pc, #204]	; (800438c <DMA2_init+0x1b4>)
 80042c0:	4a33      	ldr	r2, [pc, #204]	; (8004390 <DMA2_init+0x1b8>)
 80042c2:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_DeInit(&dmaCC1);
 80042c4:	4831      	ldr	r0, [pc, #196]	; (800438c <DMA2_init+0x1b4>)
 80042c6:	f000 fed5 	bl	8005074 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 80042ca:	4830      	ldr	r0, [pc, #192]	; (800438c <DMA2_init+0x1b4>)
 80042cc:	f000 fe24 	bl	8004f18 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_SIZE); //BRR
 80042d0:	4930      	ldr	r1, [pc, #192]	; (8004394 <DMA2_init+0x1bc>)
 80042d2:	2330      	movs	r3, #48	; 0x30
 80042d4:	4a30      	ldr	r2, [pc, #192]	; (8004398 <DMA2_init+0x1c0>)
 80042d6:	482d      	ldr	r0, [pc, #180]	; (800438c <DMA2_init+0x1b4>)
 80042d8:	f000 ff2a 	bl	8005130 <HAL_DMA_Start>
	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042dc:	4b2f      	ldr	r3, [pc, #188]	; (800439c <DMA2_init+0x1c4>)
 80042de:	2240      	movs	r2, #64	; 0x40
 80042e0:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 80042e2:	4b2e      	ldr	r3, [pc, #184]	; (800439c <DMA2_init+0x1c4>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 80042e8:	4b2c      	ldr	r3, [pc, #176]	; (800439c <DMA2_init+0x1c4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042ee:	4b2b      	ldr	r3, [pc, #172]	; (800439c <DMA2_init+0x1c4>)
 80042f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042f4:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042f6:	4b29      	ldr	r3, [pc, #164]	; (800439c <DMA2_init+0x1c4>)
 80042f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042fc:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <DMA2_init+0x1c4>)
 8004300:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004304:	61da      	str	r2, [r3, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <DMA2_init+0x1c4>)
 8004308:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800430c:	621a      	str	r2, [r3, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <DMA2_init+0x1c4>)
 8004310:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004314:	605a      	str	r2, [r3, #4]

	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004316:	4b21      	ldr	r3, [pc, #132]	; (800439c <DMA2_init+0x1c4>)
 8004318:	2200      	movs	r2, #0
 800431a:	625a      	str	r2, [r3, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <DMA2_init+0x1c4>)
 800431e:	2203      	movs	r2, #3
 8004320:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 8004322:	4b1e      	ldr	r3, [pc, #120]	; (800439c <DMA2_init+0x1c4>)
 8004324:	2200      	movs	r2, #0
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004328:	4b1c      	ldr	r3, [pc, #112]	; (800439c <DMA2_init+0x1c4>)
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30

	dmaCC2.Instance = DMA2_Stream2;
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <DMA2_init+0x1c4>)
 8004330:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <DMA2_init+0x1c8>)
 8004332:	601a      	str	r2, [r3, #0]

	HAL_DMA_DeInit(&dmaCC2);
 8004334:	4819      	ldr	r0, [pc, #100]	; (800439c <DMA2_init+0x1c4>)
 8004336:	f000 fe9d 	bl	8005074 <HAL_DMA_DeInit>

	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 800433a:	4b18      	ldr	r3, [pc, #96]	; (800439c <DMA2_init+0x1c4>)
 800433c:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <DMA2_init+0x1cc>)
 800433e:	63da      	str	r2, [r3, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8004340:	4b16      	ldr	r3, [pc, #88]	; (800439c <DMA2_init+0x1c4>)
 8004342:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <DMA2_init+0x1d0>)
 8004344:	641a      	str	r2, [r3, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <DMA2_init+0x1c4>)
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <DMA2_init+0x1d4>)
 800434a:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_DMA_Init(&dmaCC2);
 800434c:	4813      	ldr	r0, [pc, #76]	; (800439c <DMA2_init+0x1c4>)
 800434e:	f000 fde3 	bl	8004f18 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	203a      	movs	r0, #58	; 0x3a
 8004358:	f000 fd39 	bl	8004dce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800435c:	203a      	movs	r0, #58	; 0x3a
 800435e:	f000 fd52 	bl	8004e06 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8004362:	4913      	ldr	r1, [pc, #76]	; (80043b0 <DMA2_init+0x1d8>)
 8004364:	2330      	movs	r3, #48	; 0x30
 8004366:	4a08      	ldr	r2, [pc, #32]	; (8004388 <DMA2_init+0x1b0>)
 8004368:	480c      	ldr	r0, [pc, #48]	; (800439c <DMA2_init+0x1c4>)
 800436a:	f000 ff1c 	bl	80051a6 <HAL_DMA_Start_IT>
	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);

	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);

}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	200101f4 	.word	0x200101f4
 8004380:	40026488 	.word	0x40026488
 8004384:	20000008 	.word	0x20000008
 8004388:	40020818 	.word	0x40020818
 800438c:	20010130 	.word	0x20010130
 8004390:	40026428 	.word	0x40026428
 8004394:	20010194 	.word	0x20010194
 8004398:	4002081a 	.word	0x4002081a
 800439c:	20010070 	.word	0x20010070
 80043a0:	40026440 	.word	0x40026440
 80043a4:	080046ad 	.word	0x080046ad
 80043a8:	08004651 	.word	0x08004651
 80043ac:	08004631 	.word	0x08004631
 80043b0:	2000000c 	.word	0x2000000c

080043b4 <loadNextFramebufferData>:




static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	1c58      	adds	r0, r3, #1
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	6088      	str	r0, [r1, #8]
 80043cc:	4413      	add	r3, r2
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	1c58      	adds	r0, r3, #1
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	6088      	str	r0, [r1, #8]
 80043e0:	4413      	add	r3, r2
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	1c58      	adds	r0, r3, #1
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	6088      	str	r0, [r1, #8]
 80043f4:	4413      	add	r3, r2
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d102      	bne.n	800440c <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7b18      	ldrb	r0, [r3, #12]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b299      	uxth	r1, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	b2dc      	uxtb	r4, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	4623      	mov	r3, r4
 8004424:	f000 fa34 	bl	8004890 <ws2812b_set_pixel>
}
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}

08004430 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 8004436:	4b72      	ldr	r3, [pc, #456]	; (8004600 <WS2812_sendbuf+0x1d0>)
 8004438:	2200      	movs	r2, #0
 800443a:	741a      	strb	r2, [r3, #16]

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800443c:	2300      	movs	r3, #0
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	e019      	b.n	8004476 <WS2812_sendbuf+0x46>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 8004442:	4a6f      	ldr	r2, [pc, #444]	; (8004600 <WS2812_sendbuf+0x1d0>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	4413      	add	r3, r2
 800444a:	3308      	adds	r3, #8
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4a6a      	ldr	r2, [pc, #424]	; (8004600 <WS2812_sendbuf+0x1d0>)
 8004456:	4413      	add	r3, r2
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff ffaa 	bl	80043b4 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4a66      	ldr	r2, [pc, #408]	; (8004600 <WS2812_sendbuf+0x1d0>)
 8004466:	4413      	add	r3, r2
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ffa2 	bl	80043b4 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3301      	adds	r3, #1
 8004474:	607b      	str	r3, [r7, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0e2      	beq.n	8004442 <WS2812_sendbuf+0x12>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <WS2812_sendbuf+0x1d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b61      	ldr	r3, [pc, #388]	; (8004608 <WS2812_sendbuf+0x1d8>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d904      	bls.n	8004492 <WS2812_sendbuf+0x62>
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <WS2812_sendbuf+0x1dc>)
 800448a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800448e:	60da      	str	r2, [r3, #12]
 8004490:	e019      	b.n	80044c6 <WS2812_sendbuf+0x96>
 8004492:	4b5c      	ldr	r3, [pc, #368]	; (8004604 <WS2812_sendbuf+0x1d4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	4b5d      	ldr	r3, [pc, #372]	; (8004610 <WS2812_sendbuf+0x1e0>)
 800449a:	429a      	cmp	r2, r3
 800449c:	d904      	bls.n	80044a8 <WS2812_sendbuf+0x78>
 800449e:	4b5b      	ldr	r3, [pc, #364]	; (800460c <WS2812_sendbuf+0x1dc>)
 80044a0:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	e00e      	b.n	80044c6 <WS2812_sendbuf+0x96>
 80044a8:	4b56      	ldr	r3, [pc, #344]	; (8004604 <WS2812_sendbuf+0x1d4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b59      	ldr	r3, [pc, #356]	; (8004614 <WS2812_sendbuf+0x1e4>)
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d904      	bls.n	80044be <WS2812_sendbuf+0x8e>
 80044b4:	4b58      	ldr	r3, [pc, #352]	; (8004618 <WS2812_sendbuf+0x1e8>)
 80044b6:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	e003      	b.n	80044c6 <WS2812_sendbuf+0x96>
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <WS2812_sendbuf+0x1e8>)
 80044c0:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80044c4:	609a      	str	r2, [r3, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 80044c6:	4b55      	ldr	r3, [pc, #340]	; (800461c <WS2812_sendbuf+0x1ec>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	4b4e      	ldr	r3, [pc, #312]	; (8004608 <WS2812_sendbuf+0x1d8>)
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d904      	bls.n	80044dc <WS2812_sendbuf+0xac>
 80044d2:	4b4e      	ldr	r3, [pc, #312]	; (800460c <WS2812_sendbuf+0x1dc>)
 80044d4:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80044d8:	60da      	str	r2, [r3, #12]
 80044da:	e019      	b.n	8004510 <WS2812_sendbuf+0xe0>
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <WS2812_sendbuf+0x1ec>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <WS2812_sendbuf+0x1e0>)
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d904      	bls.n	80044f2 <WS2812_sendbuf+0xc2>
 80044e8:	4b48      	ldr	r3, [pc, #288]	; (800460c <WS2812_sendbuf+0x1dc>)
 80044ea:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	e00e      	b.n	8004510 <WS2812_sendbuf+0xe0>
 80044f2:	4b4a      	ldr	r3, [pc, #296]	; (800461c <WS2812_sendbuf+0x1ec>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b46      	ldr	r3, [pc, #280]	; (8004614 <WS2812_sendbuf+0x1e4>)
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d904      	bls.n	8004508 <WS2812_sendbuf+0xd8>
 80044fe:	4b46      	ldr	r3, [pc, #280]	; (8004618 <WS2812_sendbuf+0x1e8>)
 8004500:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	e003      	b.n	8004510 <WS2812_sendbuf+0xe0>
 8004508:	4b43      	ldr	r3, [pc, #268]	; (8004618 <WS2812_sendbuf+0x1e8>)
 800450a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800450e:	609a      	str	r2, [r3, #8]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 8004510:	4b43      	ldr	r3, [pc, #268]	; (8004620 <WS2812_sendbuf+0x1f0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	4b3c      	ldr	r3, [pc, #240]	; (8004608 <WS2812_sendbuf+0x1d8>)
 8004518:	429a      	cmp	r2, r3
 800451a:	d904      	bls.n	8004526 <WS2812_sendbuf+0xf6>
 800451c:	4b3b      	ldr	r3, [pc, #236]	; (800460c <WS2812_sendbuf+0x1dc>)
 800451e:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	e019      	b.n	800455a <WS2812_sendbuf+0x12a>
 8004526:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <WS2812_sendbuf+0x1f0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	4b38      	ldr	r3, [pc, #224]	; (8004610 <WS2812_sendbuf+0x1e0>)
 800452e:	429a      	cmp	r2, r3
 8004530:	d904      	bls.n	800453c <WS2812_sendbuf+0x10c>
 8004532:	4b36      	ldr	r3, [pc, #216]	; (800460c <WS2812_sendbuf+0x1dc>)
 8004534:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	e00e      	b.n	800455a <WS2812_sendbuf+0x12a>
 800453c:	4b38      	ldr	r3, [pc, #224]	; (8004620 <WS2812_sendbuf+0x1f0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b34      	ldr	r3, [pc, #208]	; (8004614 <WS2812_sendbuf+0x1e4>)
 8004544:	429a      	cmp	r2, r3
 8004546:	d904      	bls.n	8004552 <WS2812_sendbuf+0x122>
 8004548:	4b33      	ldr	r3, [pc, #204]	; (8004618 <WS2812_sendbuf+0x1e8>)
 800454a:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	e003      	b.n	800455a <WS2812_sendbuf+0x12a>
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <WS2812_sendbuf+0x1e8>)
 8004554:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8004558:	609a      	str	r2, [r3, #8]



	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <WS2812_sendbuf+0x1d4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2230      	movs	r2, #48	; 0x30
 8004560:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 8004562:	4b2e      	ldr	r3, [pc, #184]	; (800461c <WS2812_sendbuf+0x1ec>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2230      	movs	r2, #48	; 0x30
 8004568:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 800456a:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <WS2812_sendbuf+0x1f0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2230      	movs	r2, #48	; 0x30
 8004570:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8004572:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <WS2812_sendbuf+0x1f4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f06f 021f 	mvn.w	r2, #31
 800457a:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 800457c:	4b21      	ldr	r3, [pc, #132]	; (8004604 <WS2812_sendbuf+0x1d4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <WS2812_sendbuf+0x1d4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 800458c:	4b23      	ldr	r3, [pc, #140]	; (800461c <WS2812_sendbuf+0x1ec>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <WS2812_sendbuf+0x1ec>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <WS2812_sendbuf+0x1f0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <WS2812_sendbuf+0x1f0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0201 	orr.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	4b1c      	ldr	r3, [pc, #112]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	4b18      	ldr	r3, [pc, #96]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ca:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045da:	60da      	str	r2, [r3, #12]

	TIM1->CNT = tim_period-1;
 80045dc:	4b12      	ldr	r3, [pc, #72]	; (8004628 <WS2812_sendbuf+0x1f8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a12      	ldr	r2, [pc, #72]	; (800462c <WS2812_sendbuf+0x1fc>)
 80045e2:	3b01      	subs	r3, #1
 80045e4:	6253      	str	r3, [r2, #36]	; 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <WS2812_sendbuf+0x1f4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	2000fe84 	.word	0x2000fe84
 8004604:	200101f4 	.word	0x200101f4
 8004608:	40026458 	.word	0x40026458
 800460c:	40026400 	.word	0x40026400
 8004610:	400260b8 	.word	0x400260b8
 8004614:	40026058 	.word	0x40026058
 8004618:	40026000 	.word	0x40026000
 800461c:	20010130 	.word	0x20010130
 8004620:	20010070 	.word	0x20010070
 8004624:	200100ec 	.word	0x200100ec
 8004628:	2001012c 	.word	0x2001012c
 800462c:	40010000 	.word	0x40010000

08004630 <DMA_TransferError>:


void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	volatile int i = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
	i++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <DMA_TransferHalfHandler>:


void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af02      	add	r7, sp, #8
 8004656:	6078      	str	r0, [r7, #4]

	// Is this the last LED?
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 8004658:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <DMA_TransferHalfHandler+0x58>)
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b90      	cmp	r3, #144	; 0x90
 800465e:	d108      	bne.n	8004672 <DMA_TransferHalfHandler+0x22>
	 {

		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8004660:	2300      	movs	r3, #0
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	2200      	movs	r2, #0
 8004668:	2100      	movs	r1, #0
 800466a:	2000      	movs	r0, #0
 800466c:	f000 f910 	bl	8004890 <ws2812b_set_pixel>
		ws2812b.repeatCounter++;
	}



}
 8004670:	e015      	b.n	800469e <DMA_TransferHalfHandler+0x4e>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	e00a      	b.n	800468e <DMA_TransferHalfHandler+0x3e>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <DMA_TransferHalfHandler+0x58>)
 800467e:	4413      	add	r3, r2
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fe96 	bl	80043b4 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f1      	beq.n	8004678 <DMA_TransferHalfHandler+0x28>
		ws2812b.repeatCounter++;
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <DMA_TransferHalfHandler+0x58>)
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	3301      	adds	r3, #1
 800469a:	4a03      	ldr	r2, [pc, #12]	; (80046a8 <DMA_TransferHalfHandler+0x58>)
 800469c:	6193      	str	r3, [r2, #24]
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000fe84 	.word	0x2000fe84

080046ac <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80046b4:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <DMA_TransferCompleteHandler+0x10c>)
 80046b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046ba:	619a      	str	r2, [r3, #24]
	#endif

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 80046bc:	4b3f      	ldr	r3, [pc, #252]	; (80047bc <DMA_TransferCompleteHandler+0x110>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b90      	cmp	r3, #144	; 0x90
 80046c2:	d15a      	bne.n	800477a <DMA_TransferCompleteHandler+0xce>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 80046c4:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <DMA_TransferCompleteHandler+0x110>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	619a      	str	r2, [r3, #24]

		// Stop timer
		TIM1->CR1 &= ~TIM_CR1_CEN;
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <DMA_TransferCompleteHandler+0x114>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <DMA_TransferCompleteHandler+0x114>)
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6013      	str	r3, [r2, #0]

		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <DMA_TransferCompleteHandler+0x118>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <DMA_TransferCompleteHandler+0x118>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0201 	bic.w	r2, r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 80046e6:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <DMA_TransferCompleteHandler+0x11c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <DMA_TransferCompleteHandler+0x11c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 80046f6:	4b35      	ldr	r3, [pc, #212]	; (80047cc <DMA_TransferCompleteHandler+0x120>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <DMA_TransferCompleteHandler+0x120>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8004706:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004714:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8004716:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004724:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004734:	60da      	str	r2, [r3, #12]

		// Set 50us period for Treset pulse
		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
		TIM1->ARR = timer_reset_pulse_period;
 8004736:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <DMA_TransferCompleteHandler+0x114>)
 8004738:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <DMA_TransferCompleteHandler+0x128>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	62d3      	str	r3, [r2, #44]	; 0x2c
		// Reset the timer
		TIM1->CNT = 0;
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <DMA_TransferCompleteHandler+0x114>)
 8004740:	2200      	movs	r2, #0
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

		// Generate an update event to reload the prescaler value immediately
		TIM1->EGR = TIM_EGR_UG;
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <DMA_TransferCompleteHandler+0x114>)
 8004746:	2201      	movs	r2, #1
 8004748:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 800474a:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f06f 0201 	mvn.w	r2, #1
 8004752:	611a      	str	r2, [r3, #16]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <DMA_TransferCompleteHandler+0x124>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	60da      	str	r2, [r3, #12]
		// Enable timer
		TIM1->CR1 |= TIM_CR1_CEN;
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <DMA_TransferCompleteHandler+0x114>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <DMA_TransferCompleteHandler+0x114>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6013      	str	r3, [r2, #0]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <DMA_TransferCompleteHandler+0x12c>)
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <DMA_TransferCompleteHandler+0x130>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6193      	str	r3, [r2, #24]
 8004778:	e015      	b.n	80047a6 <DMA_TransferCompleteHandler+0xfa>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e00a      	b.n	8004796 <DMA_TransferCompleteHandler+0xea>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <DMA_TransferCompleteHandler+0x110>)
 8004786:	4413      	add	r3, r2
 8004788:	2101      	movs	r1, #1
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fe12 	bl	80043b4 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f1      	beq.n	8004780 <DMA_TransferCompleteHandler+0xd4>
		}

		ws2812b.repeatCounter++;
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <DMA_TransferCompleteHandler+0x110>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	3301      	adds	r3, #1
 80047a2:	4a06      	ldr	r2, [pc, #24]	; (80047bc <DMA_TransferCompleteHandler+0x110>)
 80047a4:	6193      	str	r3, [r2, #24]
	}



	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <DMA_TransferCompleteHandler+0x10c>)
 80047a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047ac:	619a      	str	r2, [r3, #24]
	#endif

}
 80047ae:	bf00      	nop
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	2000fe84 	.word	0x2000fe84
 80047c0:	40010000 	.word	0x40010000
 80047c4:	200101f4 	.word	0x200101f4
 80047c8:	20010130 	.word	0x20010130
 80047cc:	20010070 	.word	0x20010070
 80047d0:	200100ec 	.word	0x200100ec
 80047d4:	2001006c 	.word	0x2001006c
 80047d8:	40020800 	.word	0x40020800
 80047dc:	2000000c 	.word	0x2000000c

080047e0 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <DMA2_Stream2_IRQHandler+0x20>)
 80047e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80047ea:	619a      	str	r2, [r3, #24]
	#endif

	// Check the interrupt and clear flag
	  HAL_DMA_IRQHandler(&dmaCC2);
 80047ec:	4805      	ldr	r0, [pc, #20]	; (8004804 <DMA2_Stream2_IRQHandler+0x24>)
 80047ee:	f000 fd33 	bl	8005258 <HAL_DMA_IRQHandler>

	#if defined(LED_BLUE_PORT)
		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 80047f2:	4b03      	ldr	r3, [pc, #12]	; (8004800 <DMA2_Stream2_IRQHandler+0x20>)
 80047f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047f8:	619a      	str	r2, [r3, #24]
	#endif
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40020c00 	.word	0x40020c00
 8004804:	20010070 	.word	0x20010070

08004808 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800480e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004812:	619a      	str	r2, [r3, #24]
	#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8004814:	4805      	ldr	r0, [pc, #20]	; (800482c <TIM1_UP_TIM10_IRQHandler+0x24>)
 8004816:	f004 fdd1 	bl	80093bc <HAL_TIM_IRQHandler>

	#if defined(LED_ORANGE_PORT)
		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 800481a:	4b03      	ldr	r3, [pc, #12]	; (8004828 <TIM1_UP_TIM10_IRQHandler+0x20>)
 800481c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004820:	619a      	str	r2, [r3, #24]
	#endif
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40020c00 	.word	0x40020c00
 800482c:	200100ec 	.word	0x200100ec

08004830 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}*/

    ws2812b.timerPeriodCounter = 0;
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800483a:	2200      	movs	r2, #0
 800483c:	615a      	str	r2, [r3, #20]
    TIM1->CR1 = 0; // disable timer
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

    // disable the TIM2 Update IRQ
    __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8004844:	4b10      	ldr	r3, [pc, #64]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	60da      	str	r2, [r3, #12]

    // Set back 1,25us period
    TIM1->ARR = tim_period;
 8004854:	4a0b      	ldr	r2, [pc, #44]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004856:	4b0d      	ldr	r3, [pc, #52]	; (800488c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate an update event to reload the Prescaler value immediatly
    TIM1->EGR = TIM_EGR_UG;
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800485e:	2201      	movs	r2, #1
 8004860:	615a      	str	r2, [r3, #20]
    __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f06f 0201 	mvn.w	r2, #1
 800486a:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    ws2812b.transferComplete = 1;
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800486e:	2201      	movs	r2, #1
 8004870:	741a      	strb	r2, [r3, #16]

}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	2000fe84 	.word	0x2000fe84
 8004884:	40010000 	.word	0x40010000
 8004888:	200100ec 	.word	0x200100ec
 800488c:	2001012c 	.word	0x2001012c

08004890 <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8004890:	b490      	push	{r4, r7}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	4603      	mov	r3, r0
 80048a4:	80bb      	strh	r3, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	71bb      	strb	r3, [r7, #6]
 80048aa:	4613      	mov	r3, r2
 80048ac:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 80048ae:	79bb      	ldrb	r3, [r7, #6]
 80048b0:	4a68      	ldr	r2, [pc, #416]	; (8004a54 <ws2812b_set_pixel+0x1c4>)
 80048b2:	5cd3      	ldrb	r3, [r2, r3]
 80048b4:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	4a66      	ldr	r2, [pc, #408]	; (8004a54 <ws2812b_set_pixel+0x1c4>)
 80048ba:	5cd3      	ldrb	r3, [r2, r3]
 80048bc:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 80048be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048c2:	4a64      	ldr	r2, [pc, #400]	; (8004a54 <ws2812b_set_pixel+0x1c4>)
 80048c4:	5cd3      	ldrb	r3, [r2, r3]
 80048c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 80048ca:	88ba      	ldrh	r2, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 80048d6:	79bb      	ldrb	r3, [r7, #6]
 80048d8:	43db      	mvns	r3, r3
 80048da:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	43db      	mvns	r3, r3
 80048e0:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 80048e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048e6:	43db      	mvns	r3, r3
 80048e8:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4a5a      	ldr	r2, [pc, #360]	; (8004a58 <ws2812b_set_pixel+0x1c8>)
 80048f0:	4413      	add	r3, r2
 80048f2:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
 80048f6:	015b      	lsls	r3, r3, #5
 80048f8:	79fa      	ldrb	r2, [r7, #7]
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

	*bitBand =  (invGreen >> 7);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	09da      	lsrs	r2, r3, #7
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3340      	adds	r3, #64	; 0x40
 800490c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	099a      	lsrs	r2, r3, #6
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3340      	adds	r3, #64	; 0x40
 800491a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	095a      	lsrs	r2, r3, #5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3340      	adds	r3, #64	; 0x40
 8004928:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	091a      	lsrs	r2, r3, #4
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3340      	adds	r3, #64	; 0x40
 8004936:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	08da      	lsrs	r2, r3, #3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3340      	adds	r3, #64	; 0x40
 8004944:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	089a      	lsrs	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3340      	adds	r3, #64	; 0x40
 8004952:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	085a      	lsrs	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3340      	adds	r3, #64	; 0x40
 8004960:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3340      	adds	r3, #64	; 0x40
 800496c:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	09da      	lsrs	r2, r3, #7
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3340      	adds	r3, #64	; 0x40
 800497a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	099a      	lsrs	r2, r3, #6
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3340      	adds	r3, #64	; 0x40
 8004988:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	095a      	lsrs	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3340      	adds	r3, #64	; 0x40
 8004996:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	091a      	lsrs	r2, r3, #4
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3340      	adds	r3, #64	; 0x40
 80049a4:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	08da      	lsrs	r2, r3, #3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3340      	adds	r3, #64	; 0x40
 80049b2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	089a      	lsrs	r2, r3, #2
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3340      	adds	r3, #64	; 0x40
 80049c0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	085a      	lsrs	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3340      	adds	r3, #64	; 0x40
 80049ce:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3340      	adds	r3, #64	; 0x40
 80049da:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	09da      	lsrs	r2, r3, #7
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3340      	adds	r3, #64	; 0x40
 80049e8:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	099a      	lsrs	r2, r3, #6
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3340      	adds	r3, #64	; 0x40
 80049f6:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	095a      	lsrs	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3340      	adds	r3, #64	; 0x40
 8004a04:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	091a      	lsrs	r2, r3, #4
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3340      	adds	r3, #64	; 0x40
 8004a12:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	08da      	lsrs	r2, r3, #3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3340      	adds	r3, #64	; 0x40
 8004a20:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	089a      	lsrs	r2, r3, #2
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3340      	adds	r3, #64	; 0x40
 8004a2e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	085a      	lsrs	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3340      	adds	r3, #64	; 0x40
 8004a3c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3340      	adds	r3, #64	; 0x40
 8004a48:	60fb      	str	r3, [r7, #12]

#endif
}
 8004a4a:	bf00      	nop
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc90      	pop	{r4, r7}
 8004a52:	4770      	bx	lr
 8004a54:	0800ee58 	.word	0x0800ee58
 8004a58:	20010194 	.word	0x20010194

08004a5c <ws2812b_init>:


void ws2812b_init()
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
	ws2812b_gpio_init();
 8004a60:	f7ff faa8 	bl	8003fb4 <ws2812b_gpio_init>

	/*TIM2_init();
	DMA_init();*/


	DMA2_init();
 8004a64:	f7ff fbb8 	bl	80041d8 <DMA2_init>
	TIM1_init();
 8004a68:	f7ff faf4 	bl	8004054 <TIM1_init>


	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 8004a6c:	4b02      	ldr	r3, [pc, #8]	; (8004a78 <ws2812b_init+0x1c>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	741a      	strb	r2, [r3, #16]
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000fe84 	.word	0x2000fe84

08004a7c <ws2812b_handle>:


void ws2812b_handle()
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <ws2812b_handle+0x1c>)
 8004a82:	7c5b      	ldrb	r3, [r3, #17]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <ws2812b_handle+0x16>
		ws2812b.startTransfer = 0;
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <ws2812b_handle+0x1c>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	745a      	strb	r2, [r3, #17]
		WS2812_sendbuf();
 8004a8e:	f7ff fccf 	bl	8004430 <WS2812_sendbuf>
	}

}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	2000fe84 	.word	0x2000fe84

08004a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004aa2:	e003      	b.n	8004aac <LoopCopyDataInit>

08004aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004aaa:	3104      	adds	r1, #4

08004aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004aac:	480b      	ldr	r0, [pc, #44]	; (8004adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004aae:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ab4:	d3f6      	bcc.n	8004aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8004ab6:	4a0b      	ldr	r2, [pc, #44]	; (8004ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ab8:	e002      	b.n	8004ac0 <LoopFillZerobss>

08004aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004abc:	f842 3b04 	str.w	r3, [r2], #4

08004ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ac4:	d3f9      	bcc.n	8004aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ac6:	f7ff fa0b 	bl	8003ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aca:	f008 fbd3 	bl	800d274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ace:	f7fd fce7 	bl	80024a0 <main>
  bx  lr    
 8004ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ad8:	0800f210 	.word	0x0800f210
  ldr  r0, =_sdata
 8004adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ae0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8004ae4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8004ae8:	200122c8 	.word	0x200122c8

08004aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004aec:	e7fe      	b.n	8004aec <ADC_IRQHandler>
	...

08004af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004af4:	4b0e      	ldr	r3, [pc, #56]	; (8004b30 <HAL_Init+0x40>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <HAL_Init+0x40>)
 8004afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_Init+0x40>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <HAL_Init+0x40>)
 8004b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b0c:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_Init+0x40>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <HAL_Init+0x40>)
 8004b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b18:	2003      	movs	r0, #3
 8004b1a:	f000 f94d 	bl	8004db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f000 f808 	bl	8004b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b24:	f7fe fec0 	bl	80038a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023c00 	.word	0x40023c00

08004b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_InitTick+0x54>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_InitTick+0x58>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 f965 	bl	8004e22 <HAL_SYSTICK_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e00e      	b.n	8004b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0f      	cmp	r3, #15
 8004b66:	d80a      	bhi.n	8004b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b70:	f000 f92d 	bl	8004dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b74:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <HAL_InitTick+0x5c>)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000004 	.word	0x20000004
 8004b8c:	20000014 	.word	0x20000014
 8004b90:	20000010 	.word	0x20000010

08004b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b98:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <HAL_IncTick+0x20>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_IncTick+0x24>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4a04      	ldr	r2, [pc, #16]	; (8004bb8 <HAL_IncTick+0x24>)
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000014 	.word	0x20000014
 8004bb8:	20010254 	.word	0x20010254

08004bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8004bc0:	4b03      	ldr	r3, [pc, #12]	; (8004bd0 <HAL_GetTick+0x14>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20010254 	.word	0x20010254

08004bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7ff ffee 	bl	8004bbc <HAL_GetTick>
 8004be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d005      	beq.n	8004bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <HAL_Delay+0x40>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bfa:	bf00      	nop
 8004bfc:	f7ff ffde 	bl	8004bbc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d8f7      	bhi.n	8004bfc <HAL_Delay+0x28>
  {
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	20000014 	.word	0x20000014

08004c18 <__NVIC_SetPriorityGrouping>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <__NVIC_SetPriorityGrouping+0x44>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c34:	4013      	ands	r3, r2
 8004c36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4a:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <__NVIC_SetPriorityGrouping+0x44>)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	60d3      	str	r3, [r2, #12]
}
 8004c50:	bf00      	nop
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <__NVIC_GetPriorityGrouping>:
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <__NVIC_GetPriorityGrouping+0x18>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	f003 0307 	and.w	r3, r3, #7
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <__NVIC_EnableIRQ>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	db0b      	blt.n	8004ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	f003 021f 	and.w	r2, r3, #31
 8004c94:	4907      	ldr	r1, [pc, #28]	; (8004cb4 <__NVIC_EnableIRQ+0x38>)
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	e000e100 	.word	0xe000e100

08004cb8 <__NVIC_SetPriority>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	6039      	str	r1, [r7, #0]
 8004cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db0a      	blt.n	8004ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	490c      	ldr	r1, [pc, #48]	; (8004d04 <__NVIC_SetPriority+0x4c>)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	0112      	lsls	r2, r2, #4
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ce0:	e00a      	b.n	8004cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4908      	ldr	r1, [pc, #32]	; (8004d08 <__NVIC_SetPriority+0x50>)
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	3b04      	subs	r3, #4
 8004cf0:	0112      	lsls	r2, r2, #4
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	761a      	strb	r2, [r3, #24]
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000e100 	.word	0xe000e100
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f1c3 0307 	rsb	r3, r3, #7
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	bf28      	it	cs
 8004d2a:	2304      	movcs	r3, #4
 8004d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3304      	adds	r3, #4
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d902      	bls.n	8004d3c <NVIC_EncodePriority+0x30>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3b03      	subs	r3, #3
 8004d3a:	e000      	b.n	8004d3e <NVIC_EncodePriority+0x32>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	401a      	ands	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d54:	f04f 31ff 	mov.w	r1, #4294967295
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	43d9      	mvns	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d64:	4313      	orrs	r3, r2
         );
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3724      	adds	r7, #36	; 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d84:	d301      	bcc.n	8004d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d86:	2301      	movs	r3, #1
 8004d88:	e00f      	b.n	8004daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d8a:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <SysTick_Config+0x40>)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d92:	210f      	movs	r1, #15
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	f7ff ff8e 	bl	8004cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <SysTick_Config+0x40>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <SysTick_Config+0x40>)
 8004da4:	2207      	movs	r2, #7
 8004da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	e000e010 	.word	0xe000e010

08004db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7ff ff29 	bl	8004c18 <__NVIC_SetPriorityGrouping>
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b086      	sub	sp, #24
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004de0:	f7ff ff3e 	bl	8004c60 <__NVIC_GetPriorityGrouping>
 8004de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	f7ff ff8e 	bl	8004d0c <NVIC_EncodePriority>
 8004df0:	4602      	mov	r2, r0
 8004df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff5d 	bl	8004cb8 <__NVIC_SetPriority>
}
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff ff31 	bl	8004c7c <__NVIC_EnableIRQ>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff ffa2 	bl	8004d74 <SysTick_Config>
 8004e30:	4603      	mov	r3, r0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e014      	b.n	8004e76 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	791b      	ldrb	r3, [r3, #4]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fe fd4b 	bl	80038f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2202      	movs	r2, #2
 8004e66:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b087      	sub	sp, #28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	795b      	ldrb	r3, [r3, #5]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_DAC_ConfigChannel+0x20>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e036      	b.n	8004f0c <HAL_DAC_ConfigChannel+0x8e>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004eb2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6819      	ldr	r1, [r3, #0]
 8004eec:	22c0      	movs	r2, #192	; 0xc0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43da      	mvns	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	400a      	ands	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f24:	f7ff fe4a 	bl	8004bbc <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e099      	b.n	8005068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f54:	e00f      	b.n	8004f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f56:	f7ff fe31 	bl	8004bbc <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d908      	bls.n	8004f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e078      	b.n	8005068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e8      	bne.n	8004f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <HAL_DMA_Init+0x158>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d107      	bne.n	8004fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2b04      	cmp	r3, #4
 8005008:	d117      	bne.n	800503a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00e      	beq.n	800503a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fb09 	bl	8005634 <DMA_CheckFifoParam>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2240      	movs	r2, #64	; 0x40
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005036:	2301      	movs	r3, #1
 8005038:	e016      	b.n	8005068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fac0 	bl	80055c8 <DMA_CalcBaseAndBitshift>
 8005048:	4603      	mov	r3, r0
 800504a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005050:	223f      	movs	r2, #63	; 0x3f
 8005052:	409a      	lsls	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	f010803f 	.word	0xf010803f

08005074 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e050      	b.n	8005128 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d101      	bne.n	8005096 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005092:	2302      	movs	r3, #2
 8005094:	e048      	b.n	8005128 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2200      	movs	r2, #0
 80050b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2221      	movs	r2, #33	; 0x21
 80050d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fa76 	bl	80055c8 <DMA_CalcBaseAndBitshift>
 80050dc:	4603      	mov	r3, r0
 80050de:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	223f      	movs	r2, #63	; 0x3f
 800510a:	409a      	lsls	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_DMA_Start+0x20>
 800514c:	2302      	movs	r3, #2
 800514e:	e026      	b.n	800519e <HAL_DMA_Start+0x6e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d115      	bne.n	8005190 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f9f7 	bl	800556c <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e005      	b.n	800519c <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005198:	2302      	movs	r3, #2
 800519a:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 800519c:	7dfb      	ldrb	r3, [r7, #23]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b086      	sub	sp, #24
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_DMA_Start_IT+0x26>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e040      	b.n	800524e <HAL_DMA_Start_IT+0xa8>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d12f      	bne.n	8005240 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f9b9 	bl	800556c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fe:	223f      	movs	r2, #63	; 0x3f
 8005200:	409a      	lsls	r2, r3
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0216 	orr.w	r2, r2, #22
 8005214:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d007      	beq.n	800522e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0208 	orr.w	r2, r2, #8
 800522c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e005      	b.n	800524c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
	...

08005258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005264:	4b92      	ldr	r3, [pc, #584]	; (80054b0 <HAL_DMA_IRQHandler+0x258>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a92      	ldr	r2, [pc, #584]	; (80054b4 <HAL_DMA_IRQHandler+0x25c>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	0a9b      	lsrs	r3, r3, #10
 8005270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005282:	2208      	movs	r2, #8
 8005284:	409a      	lsls	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01a      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0204 	bic.w	r2, r2, #4
 80052aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b0:	2208      	movs	r2, #8
 80052b2:	409a      	lsls	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	2201      	movs	r2, #1
 80052ca:	409a      	lsls	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e6:	2201      	movs	r2, #1
 80052e8:	409a      	lsls	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	f043 0202 	orr.w	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fe:	2204      	movs	r2, #4
 8005300:	409a      	lsls	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d012      	beq.n	8005330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00b      	beq.n	8005330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531c:	2204      	movs	r2, #4
 800531e:	409a      	lsls	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f043 0204 	orr.w	r2, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005334:	2210      	movs	r2, #16
 8005336:	409a      	lsls	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d043      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d03c      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005352:	2210      	movs	r2, #16
 8005354:	409a      	lsls	r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d018      	beq.n	800539a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d024      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
 8005386:	e01f      	b.n	80053c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3
 8005398:	e016      	b.n	80053c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d107      	bne.n	80053b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0208 	bic.w	r2, r2, #8
 80053b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	2220      	movs	r2, #32
 80053ce:	409a      	lsls	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 808e 	beq.w	80054f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8086 	beq.w	80054f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ee:	2220      	movs	r2, #32
 80053f0:	409a      	lsls	r2, r3
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b05      	cmp	r3, #5
 8005400:	d136      	bne.n	8005470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0216 	bic.w	r2, r2, #22
 8005410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_DMA_IRQHandler+0x1da>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0208 	bic.w	r2, r2, #8
 8005440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005446:	223f      	movs	r2, #63	; 0x3f
 8005448:	409a      	lsls	r2, r3
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	d07d      	beq.n	8005562 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
        }
        return;
 800546e:	e078      	b.n	8005562 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01c      	beq.n	80054b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d108      	bne.n	800549e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005490:	2b00      	cmp	r3, #0
 8005492:	d030      	beq.n	80054f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
 800549c:	e02b      	b.n	80054f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d027      	beq.n	80054f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	4798      	blx	r3
 80054ae:	e022      	b.n	80054f6 <HAL_DMA_IRQHandler+0x29e>
 80054b0:	20000004 	.word	0x20000004
 80054b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10f      	bne.n	80054e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0210 	bic.w	r2, r2, #16
 80054d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d032      	beq.n	8005564 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d022      	beq.n	8005550 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2205      	movs	r2, #5
 800550e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0201 	bic.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3301      	adds	r3, #1
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	429a      	cmp	r2, r3
 800552c:	d307      	bcc.n	800553e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f2      	bne.n	8005522 <HAL_DMA_IRQHandler+0x2ca>
 800553c:	e000      	b.n	8005540 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800553e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4798      	blx	r3
 8005560:	e000      	b.n	8005564 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005562:	bf00      	nop
    }
  }
}
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop

0800556c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d108      	bne.n	80055ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055aa:	e007      	b.n	80055bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	3b10      	subs	r3, #16
 80055d8:	4a14      	ldr	r2, [pc, #80]	; (800562c <DMA_CalcBaseAndBitshift+0x64>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055e2:	4a13      	ldr	r2, [pc, #76]	; (8005630 <DMA_CalcBaseAndBitshift+0x68>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d909      	bls.n	800560a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055fe:	f023 0303 	bic.w	r3, r3, #3
 8005602:	1d1a      	adds	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	659a      	str	r2, [r3, #88]	; 0x58
 8005608:	e007      	b.n	800561a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	aaaaaaab 	.word	0xaaaaaaab
 8005630:	0800ef58 	.word	0x0800ef58

08005634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11f      	bne.n	800568e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d855      	bhi.n	8005700 <DMA_CheckFifoParam+0xcc>
 8005654:	a201      	add	r2, pc, #4	; (adr r2, 800565c <DMA_CheckFifoParam+0x28>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	0800566d 	.word	0x0800566d
 8005660:	0800567f 	.word	0x0800567f
 8005664:	0800566d 	.word	0x0800566d
 8005668:	08005701 	.word	0x08005701
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d045      	beq.n	8005704 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567c:	e042      	b.n	8005704 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005686:	d13f      	bne.n	8005708 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800568c:	e03c      	b.n	8005708 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005696:	d121      	bne.n	80056dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d836      	bhi.n	800570c <DMA_CheckFifoParam+0xd8>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <DMA_CheckFifoParam+0x70>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056bb 	.word	0x080056bb
 80056ac:	080056b5 	.word	0x080056b5
 80056b0:	080056cd 	.word	0x080056cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e02f      	b.n	800571a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d024      	beq.n	8005710 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ca:	e021      	b.n	8005710 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056d4:	d11e      	bne.n	8005714 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056da:	e01b      	b.n	8005714 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d902      	bls.n	80056e8 <DMA_CheckFifoParam+0xb4>
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d003      	beq.n	80056ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056e6:	e018      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e015      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00e      	beq.n	8005718 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      break;
 80056fe:	e00b      	b.n	8005718 <DMA_CheckFifoParam+0xe4>
      break;
 8005700:	bf00      	nop
 8005702:	e00a      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      break;
 8005704:	bf00      	nop
 8005706:	e008      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      break;
 8005708:	bf00      	nop
 800570a:	e006      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      break;
 800570c:	bf00      	nop
 800570e:	e004      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      break;
 8005710:	bf00      	nop
 8005712:	e002      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      break;   
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <DMA_CheckFifoParam+0xe6>
      break;
 8005718:	bf00      	nop
    }
  } 
  
  return status; 
 800571a:	7bfb      	ldrb	r3, [r7, #15]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005728:	b480      	push	{r7}
 800572a:	b089      	sub	sp, #36	; 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	e16b      	b.n	8005a1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005744:	2201      	movs	r2, #1
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4013      	ands	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	429a      	cmp	r2, r3
 800575e:	f040 815a 	bne.w	8005a16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d00b      	beq.n	8005782 <HAL_GPIO_Init+0x5a>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d007      	beq.n	8005782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005776:	2b11      	cmp	r3, #17
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b12      	cmp	r3, #18
 8005780:	d130      	bne.n	80057e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	2203      	movs	r2, #3
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057b8:	2201      	movs	r2, #1
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	43db      	mvns	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	4013      	ands	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 0201 	and.w	r2, r3, #1
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4313      	orrs	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	2203      	movs	r2, #3
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d003      	beq.n	8005824 <HAL_GPIO_Init+0xfc>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b12      	cmp	r3, #18
 8005822:	d123      	bne.n	800586c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	08da      	lsrs	r2, r3, #3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3208      	adds	r2, #8
 800582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	220f      	movs	r2, #15
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	08da      	lsrs	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3208      	adds	r2, #8
 8005866:	69b9      	ldr	r1, [r7, #24]
 8005868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	2203      	movs	r2, #3
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 0203 	and.w	r2, r3, #3
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80b4 	beq.w	8005a16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	4b5f      	ldr	r3, [pc, #380]	; (8005a30 <HAL_GPIO_Init+0x308>)
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	4a5e      	ldr	r2, [pc, #376]	; (8005a30 <HAL_GPIO_Init+0x308>)
 80058b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058bc:	6453      	str	r3, [r2, #68]	; 0x44
 80058be:	4b5c      	ldr	r3, [pc, #368]	; (8005a30 <HAL_GPIO_Init+0x308>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ca:	4a5a      	ldr	r2, [pc, #360]	; (8005a34 <HAL_GPIO_Init+0x30c>)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	3302      	adds	r3, #2
 80058d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	220f      	movs	r2, #15
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43db      	mvns	r3, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4013      	ands	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a51      	ldr	r2, [pc, #324]	; (8005a38 <HAL_GPIO_Init+0x310>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02b      	beq.n	800594e <HAL_GPIO_Init+0x226>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a50      	ldr	r2, [pc, #320]	; (8005a3c <HAL_GPIO_Init+0x314>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d025      	beq.n	800594a <HAL_GPIO_Init+0x222>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a4f      	ldr	r2, [pc, #316]	; (8005a40 <HAL_GPIO_Init+0x318>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01f      	beq.n	8005946 <HAL_GPIO_Init+0x21e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a4e      	ldr	r2, [pc, #312]	; (8005a44 <HAL_GPIO_Init+0x31c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d019      	beq.n	8005942 <HAL_GPIO_Init+0x21a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a4d      	ldr	r2, [pc, #308]	; (8005a48 <HAL_GPIO_Init+0x320>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_GPIO_Init+0x216>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a4c      	ldr	r2, [pc, #304]	; (8005a4c <HAL_GPIO_Init+0x324>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00d      	beq.n	800593a <HAL_GPIO_Init+0x212>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a4b      	ldr	r2, [pc, #300]	; (8005a50 <HAL_GPIO_Init+0x328>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <HAL_GPIO_Init+0x20e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a4a      	ldr	r2, [pc, #296]	; (8005a54 <HAL_GPIO_Init+0x32c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <HAL_GPIO_Init+0x20a>
 800592e:	2307      	movs	r3, #7
 8005930:	e00e      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005932:	2308      	movs	r3, #8
 8005934:	e00c      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005936:	2306      	movs	r3, #6
 8005938:	e00a      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800593a:	2305      	movs	r3, #5
 800593c:	e008      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800593e:	2304      	movs	r3, #4
 8005940:	e006      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005942:	2303      	movs	r3, #3
 8005944:	e004      	b.n	8005950 <HAL_GPIO_Init+0x228>
 8005946:	2302      	movs	r3, #2
 8005948:	e002      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_GPIO_Init+0x228>
 800594e:	2300      	movs	r3, #0
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	f002 0203 	and.w	r2, r2, #3
 8005956:	0092      	lsls	r2, r2, #2
 8005958:	4093      	lsls	r3, r2
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4313      	orrs	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005960:	4934      	ldr	r1, [pc, #208]	; (8005a34 <HAL_GPIO_Init+0x30c>)
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	089b      	lsrs	r3, r3, #2
 8005966:	3302      	adds	r3, #2
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800596e:	4b3a      	ldr	r3, [pc, #232]	; (8005a58 <HAL_GPIO_Init+0x330>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	43db      	mvns	r3, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005992:	4a31      	ldr	r2, [pc, #196]	; (8005a58 <HAL_GPIO_Init+0x330>)
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005998:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_GPIO_Init+0x330>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059bc:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <HAL_GPIO_Init+0x330>)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059c2:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <HAL_GPIO_Init+0x330>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	43db      	mvns	r3, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4013      	ands	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_GPIO_Init+0x330>)
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <HAL_GPIO_Init+0x330>)
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	4013      	ands	r3, r2
 80059fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a10:	4a11      	ldr	r2, [pc, #68]	; (8005a58 <HAL_GPIO_Init+0x330>)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	f67f ae90 	bls.w	8005744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a24:	bf00      	nop
 8005a26:	3724      	adds	r7, #36	; 0x24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40023800 	.word	0x40023800
 8005a34:	40013800 	.word	0x40013800
 8005a38:	40020000 	.word	0x40020000
 8005a3c:	40020400 	.word	0x40020400
 8005a40:	40020800 	.word	0x40020800
 8005a44:	40020c00 	.word	0x40020c00
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40021400 	.word	0x40021400
 8005a50:	40021800 	.word	0x40021800
 8005a54:	40021c00 	.word	0x40021c00
 8005a58:	40013c00 	.word	0x40013c00

08005a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	887b      	ldrh	r3, [r7, #2]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
 8005a78:	e001      	b.n	8005a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a9c:	787b      	ldrb	r3, [r7, #1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aa8:	e003      	b.n	8005ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	041a      	lsls	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	619a      	str	r2, [r3, #24]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	401a      	ands	r2, r3
 8005ad2:	887b      	ldrh	r3, [r7, #2]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d104      	bne.n	8005ae2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ad8:	887b      	ldrh	r3, [r7, #2]
 8005ada:	041a      	lsls	r2, r3, #16
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005ae0:	e002      	b.n	8005ae8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	619a      	str	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005afe:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b00:	695a      	ldr	r2, [r3, #20]
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d006      	beq.n	8005b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b0a:	4a05      	ldr	r2, [pc, #20]	; (8005b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fd f8b0 	bl	8002c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40013c00 	.word	0x40013c00

08005b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e11f      	b.n	8005d76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fd ff18 	bl	8003980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b88:	f002 fa64 	bl	8008054 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4a7b      	ldr	r2, [pc, #492]	; (8005d80 <HAL_I2C_Init+0x25c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d807      	bhi.n	8005ba8 <HAL_I2C_Init+0x84>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4a7a      	ldr	r2, [pc, #488]	; (8005d84 <HAL_I2C_Init+0x260>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bf94      	ite	ls
 8005ba0:	2301      	movls	r3, #1
 8005ba2:	2300      	movhi	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	e006      	b.n	8005bb6 <HAL_I2C_Init+0x92>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4a77      	ldr	r2, [pc, #476]	; (8005d88 <HAL_I2C_Init+0x264>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bf94      	ite	ls
 8005bb0:	2301      	movls	r3, #1
 8005bb2:	2300      	movhi	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e0db      	b.n	8005d76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	4a72      	ldr	r2, [pc, #456]	; (8005d8c <HAL_I2C_Init+0x268>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	0c9b      	lsrs	r3, r3, #18
 8005bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	4a64      	ldr	r2, [pc, #400]	; (8005d80 <HAL_I2C_Init+0x25c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d802      	bhi.n	8005bf8 <HAL_I2C_Init+0xd4>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	e009      	b.n	8005c0c <HAL_I2C_Init+0xe8>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bfe:	fb02 f303 	mul.w	r3, r2, r3
 8005c02:	4a63      	ldr	r2, [pc, #396]	; (8005d90 <HAL_I2C_Init+0x26c>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	099b      	lsrs	r3, r3, #6
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	430b      	orrs	r3, r1
 8005c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	4956      	ldr	r1, [pc, #344]	; (8005d80 <HAL_I2C_Init+0x25c>)
 8005c28:	428b      	cmp	r3, r1
 8005c2a:	d80d      	bhi.n	8005c48 <HAL_I2C_Init+0x124>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1e59      	subs	r1, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	bf38      	it	cc
 8005c44:	2304      	movcc	r3, #4
 8005c46:	e04f      	b.n	8005ce8 <HAL_I2C_Init+0x1c4>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d111      	bne.n	8005c74 <HAL_I2C_Init+0x150>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1e58      	subs	r0, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	440b      	add	r3, r1
 8005c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c62:	3301      	adds	r3, #1
 8005c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	bf0c      	ite	eq
 8005c6c:	2301      	moveq	r3, #1
 8005c6e:	2300      	movne	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	e012      	b.n	8005c9a <HAL_I2C_Init+0x176>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1e58      	subs	r0, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	0099      	lsls	r1, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	bf0c      	ite	eq
 8005c94:	2301      	moveq	r3, #1
 8005c96:	2300      	movne	r3, #0
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Init+0x17e>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e022      	b.n	8005ce8 <HAL_I2C_Init+0x1c4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_I2C_Init+0x1a4>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1e58      	subs	r0, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6859      	ldr	r1, [r3, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	440b      	add	r3, r1
 8005cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc6:	e00f      	b.n	8005ce8 <HAL_I2C_Init+0x1c4>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1e58      	subs	r0, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6859      	ldr	r1, [r3, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	0099      	lsls	r1, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cde:	3301      	adds	r3, #1
 8005ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	6809      	ldr	r1, [r1, #0]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6911      	ldr	r1, [r2, #16]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68d2      	ldr	r2, [r2, #12]
 8005d22:	4311      	orrs	r1, r2
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	000186a0 	.word	0x000186a0
 8005d84:	001e847f 	.word	0x001e847f
 8005d88:	003d08ff 	.word	0x003d08ff
 8005d8c:	431bde83 	.word	0x431bde83
 8005d90:	10624dd3 	.word	0x10624dd3

08005d94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	460b      	mov	r3, r1
 8005da2:	817b      	strh	r3, [r7, #10]
 8005da4:	4613      	mov	r3, r2
 8005da6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005da8:	f7fe ff08 	bl	8004bbc <HAL_GetTick>
 8005dac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	f040 80e0 	bne.w	8005f7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2319      	movs	r3, #25
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4970      	ldr	r1, [pc, #448]	; (8005f88 <HAL_I2C_Master_Transmit+0x1f4>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fd86 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e0d3      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_I2C_Master_Transmit+0x50>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e0cc      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d007      	beq.n	8005e0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2221      	movs	r2, #33	; 0x21
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2210      	movs	r2, #16
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	893a      	ldrh	r2, [r7, #8]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4a50      	ldr	r2, [pc, #320]	; (8005f8c <HAL_I2C_Master_Transmit+0x1f8>)
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e4c:	8979      	ldrh	r1, [r7, #10]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6a3a      	ldr	r2, [r7, #32]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fbf0 	bl	8006638 <I2C_MasterRequestWrite>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e08d      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e78:	e066      	b.n	8005f48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	6a39      	ldr	r1, [r7, #32]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 fe00 	bl	8006a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00d      	beq.n	8005ea6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d107      	bne.n	8005ea2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e06b      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	781a      	ldrb	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d11b      	bne.n	8005f1c <HAL_I2C_Master_Transmit+0x188>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d017      	beq.n	8005f1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	6a39      	ldr	r1, [r7, #32]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fdf0 	bl	8006b06 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d107      	bne.n	8005f44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e01a      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d194      	bne.n	8005e7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	e000      	b.n	8005f7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f7c:	2302      	movs	r3, #2
  }
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	00100002 	.word	0x00100002
 8005f8c:	ffff0000 	.word	0xffff0000

08005f90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08c      	sub	sp, #48	; 0x30
 8005f94:	af02      	add	r7, sp, #8
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	817b      	strh	r3, [r7, #10]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fa4:	f7fe fe0a 	bl	8004bbc <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	f040 820b 	bne.w	80063ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	2319      	movs	r3, #25
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	497c      	ldr	r1, [pc, #496]	; (80061b4 <HAL_I2C_Master_Receive+0x224>)
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fc88 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e1fe      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_I2C_Master_Receive+0x50>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e1f7      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d007      	beq.n	8006006 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006014:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2222      	movs	r2, #34	; 0x22
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2210      	movs	r2, #16
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	893a      	ldrh	r2, [r7, #8]
 8006036:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a5c      	ldr	r2, [pc, #368]	; (80061b8 <HAL_I2C_Master_Receive+0x228>)
 8006046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006048:	8979      	ldrh	r1, [r7, #10]
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fb74 	bl	800673c <I2C_MasterRequestRead>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e1b8      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d113      	bne.n	800608e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006066:	2300      	movs	r3, #0
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e18c      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	2b01      	cmp	r3, #1
 8006094:	d11b      	bne.n	80060ce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e16c      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d11b      	bne.n	800610e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	61bb      	str	r3, [r7, #24]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	e14c      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800611c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006134:	e138      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	2b03      	cmp	r3, #3
 800613c:	f200 80f1 	bhi.w	8006322 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	2b01      	cmp	r3, #1
 8006146:	d123      	bne.n	8006190 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800614a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fd1b 	bl	8006b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e139      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800618e:	e10b      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	2b02      	cmp	r3, #2
 8006196:	d14e      	bne.n	8006236 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	2200      	movs	r2, #0
 80061a0:	4906      	ldr	r1, [pc, #24]	; (80061bc <HAL_I2C_Master_Receive+0x22c>)
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 fb98 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e10e      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
 80061b2:	bf00      	nop
 80061b4:	00100002 	.word	0x00100002
 80061b8:	ffff0000 	.word	0xffff0000
 80061bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	691a      	ldr	r2, [r3, #16]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621e:	3b01      	subs	r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006234:	e0b8      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2200      	movs	r2, #0
 800623e:	4966      	ldr	r1, [pc, #408]	; (80063d8 <HAL_I2C_Master_Receive+0x448>)
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fb49 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0bf      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	2200      	movs	r2, #0
 800629a:	494f      	ldr	r1, [pc, #316]	; (80063d8 <HAL_I2C_Master_Receive+0x448>)
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fb1b 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e091      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006320:	e042      	b.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006324:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fc2e 	bl	8006b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e04c      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d118      	bne.n	80063a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f47f aec2 	bne.w	8006136 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e000      	b.n	80063d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
  }
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3728      	adds	r7, #40	; 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	00010004 	.word	0x00010004

080063dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	607a      	str	r2, [r7, #4]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	460b      	mov	r3, r1
 80063ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80063ec:	f7fe fbe6 	bl	8004bbc <HAL_GetTick>
 80063f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80063f2:	2301      	movs	r3, #1
 80063f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b20      	cmp	r3, #32
 8006400:	f040 8111 	bne.w	8006626 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	2319      	movs	r3, #25
 800640a:	2201      	movs	r2, #1
 800640c:	4988      	ldr	r1, [pc, #544]	; (8006630 <HAL_I2C_IsDeviceReady+0x254>)
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa62 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800641a:	2302      	movs	r3, #2
 800641c:	e104      	b.n	8006628 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_I2C_IsDeviceReady+0x50>
 8006428:	2302      	movs	r3, #2
 800642a:	e0fd      	b.n	8006628 <HAL_I2C_IsDeviceReady+0x24c>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b01      	cmp	r3, #1
 8006440:	d007      	beq.n	8006452 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f042 0201 	orr.w	r2, r2, #1
 8006450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006460:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2224      	movs	r2, #36	; 0x24
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	4a70      	ldr	r2, [pc, #448]	; (8006634 <HAL_I2C_IsDeviceReady+0x258>)
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006484:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2200      	movs	r2, #0
 800648e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fa20 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00d      	beq.n	80064ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ac:	d103      	bne.n	80064b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e0b6      	b.n	8006628 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ba:	897b      	ldrh	r3, [r7, #10]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80064ca:	f7fe fb77 	bl	8004bbc <HAL_GetTick>
 80064ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064fe:	e025      	b.n	800654c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006500:	f7fe fb5c 	bl	8004bbc <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d302      	bcc.n	8006516 <HAL_I2C_IsDeviceReady+0x13a>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	22a0      	movs	r2, #160	; 0xa0
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b02      	cmp	r3, #2
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2ba0      	cmp	r3, #160	; 0xa0
 8006556:	d005      	beq.n	8006564 <HAL_I2C_IsDeviceReady+0x188>
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_I2C_IsDeviceReady+0x188>
 800655e:	7dbb      	ldrb	r3, [r7, #22]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0cd      	beq.n	8006500 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b02      	cmp	r3, #2
 8006578:	d129      	bne.n	80065ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006588:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	613b      	str	r3, [r7, #16]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2319      	movs	r3, #25
 80065a6:	2201      	movs	r2, #1
 80065a8:	4921      	ldr	r1, [pc, #132]	; (8006630 <HAL_I2C_IsDeviceReady+0x254>)
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f994 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e036      	b.n	8006628 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	e02c      	b.n	8006628 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	2319      	movs	r3, #25
 80065ee:	2201      	movs	r2, #1
 80065f0:	490f      	ldr	r1, [pc, #60]	; (8006630 <HAL_I2C_IsDeviceReady+0x254>)
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f970 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e012      	b.n	8006628 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	3301      	adds	r3, #1
 8006606:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	f4ff af32 	bcc.w	8006476 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006626:	2302      	movs	r3, #2
  }
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	00100002 	.word	0x00100002
 8006634:	ffff0000 	.word	0xffff0000

08006638 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	460b      	mov	r3, r1
 8006646:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b08      	cmp	r3, #8
 8006652:	d006      	beq.n	8006662 <I2C_MasterRequestWrite+0x2a>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d003      	beq.n	8006662 <I2C_MasterRequestWrite+0x2a>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006660:	d108      	bne.n	8006674 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	e00b      	b.n	800668c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	2b12      	cmp	r3, #18
 800667a:	d107      	bne.n	800668c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800668a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f91d 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b2:	d103      	bne.n	80066bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e035      	b.n	800672c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066c8:	d108      	bne.n	80066dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ca:	897b      	ldrh	r3, [r7, #10]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066d8:	611a      	str	r2, [r3, #16]
 80066da:	e01b      	b.n	8006714 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80066dc:	897b      	ldrh	r3, [r7, #10]
 80066de:	11db      	asrs	r3, r3, #7
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0306 	and.w	r3, r3, #6
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f063 030f 	orn	r3, r3, #15
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	490e      	ldr	r1, [pc, #56]	; (8006734 <I2C_MasterRequestWrite+0xfc>)
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 f943 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e010      	b.n	800672c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800670a:	897b      	ldrh	r3, [r7, #10]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	4907      	ldr	r1, [pc, #28]	; (8006738 <I2C_MasterRequestWrite+0x100>)
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f933 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	00010008 	.word	0x00010008
 8006738:	00010002 	.word	0x00010002

0800673c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	460b      	mov	r3, r1
 800674a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006760:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d006      	beq.n	8006776 <I2C_MasterRequestRead+0x3a>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d003      	beq.n	8006776 <I2C_MasterRequestRead+0x3a>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006774:	d108      	bne.n	8006788 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e00b      	b.n	80067a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	2b11      	cmp	r3, #17
 800678e:	d107      	bne.n	80067a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800679e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f893 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00d      	beq.n	80067d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c6:	d103      	bne.n	80067d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e079      	b.n	80068c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067dc:	d108      	bne.n	80067f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067de:	897b      	ldrh	r3, [r7, #10]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	611a      	str	r2, [r3, #16]
 80067ee:	e05f      	b.n	80068b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80067f0:	897b      	ldrh	r3, [r7, #10]
 80067f2:	11db      	asrs	r3, r3, #7
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0306 	and.w	r3, r3, #6
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f063 030f 	orn	r3, r3, #15
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4930      	ldr	r1, [pc, #192]	; (80068d0 <I2C_MasterRequestRead+0x194>)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f8b9 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e054      	b.n	80068c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800681e:	897b      	ldrh	r3, [r7, #10]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4929      	ldr	r1, [pc, #164]	; (80068d4 <I2C_MasterRequestRead+0x198>)
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f8a9 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e044      	b.n	80068c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006862:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f831 	bl	80068d8 <I2C_WaitOnFlagUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00d      	beq.n	8006898 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688a:	d103      	bne.n	8006894 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006892:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e017      	b.n	80068c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006898:	897b      	ldrh	r3, [r7, #10]
 800689a:	11db      	asrs	r3, r3, #7
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 0306 	and.w	r3, r3, #6
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f063 030e 	orn	r3, r3, #14
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4907      	ldr	r1, [pc, #28]	; (80068d4 <I2C_MasterRequestRead+0x198>)
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f865 	bl	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	00010008 	.word	0x00010008
 80068d4:	00010002 	.word	0x00010002

080068d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e8:	e025      	b.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d021      	beq.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7fe f963 	bl	8004bbc <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d116      	bne.n	8006936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0220 	orr.w	r2, r3, #32
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e023      	b.n	800697e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d10d      	bne.n	800695c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	43da      	mvns	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4013      	ands	r3, r2
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	e00c      	b.n	8006976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	43da      	mvns	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	429a      	cmp	r2, r3
 800697a:	d0b6      	beq.n	80068ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006994:	e051      	b.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a4:	d123      	bne.n	80069ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e046      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d021      	beq.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fe f8e1 	bl	8004bbc <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d116      	bne.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e020      	b.n	8006a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d10c      	bne.n	8006a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	43da      	mvns	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	e00b      	b.n	8006a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	43da      	mvns	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	bf14      	ite	ne
 8006a70:	2301      	movne	r3, #1
 8006a72:	2300      	moveq	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d18d      	bne.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a90:	e02d      	b.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f8ce 	bl	8006c34 <I2C_IsAcknowledgeFailed>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e02d      	b.n	8006afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d021      	beq.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aaa:	f7fe f887 	bl	8004bbc <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d116      	bne.n	8006aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e007      	b.n	8006afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d1ca      	bne.n	8006a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b12:	e02d      	b.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f88d 	bl	8006c34 <I2C_IsAcknowledgeFailed>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e02d      	b.n	8006b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d021      	beq.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2c:	f7fe f846 	bl	8004bbc <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d116      	bne.n	8006b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e007      	b.n	8006b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	d1ca      	bne.n	8006b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b94:	e042      	b.n	8006c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d119      	bne.n	8006bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f06f 0210 	mvn.w	r2, #16
 8006bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e029      	b.n	8006c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd8:	f7fd fff0 	bl	8004bbc <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d302      	bcc.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d116      	bne.n	8006c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e007      	b.n	8006c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b40      	cmp	r3, #64	; 0x40
 8006c28:	d1b5      	bne.n	8006b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4a:	d11b      	bne.n	8006c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	f043 0204 	orr.w	r2, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e128      	b.n	8006ef8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a90      	ldr	r2, [pc, #576]	; (8006f00 <HAL_I2S_Init+0x26c>)
 8006cbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fc fefd 	bl	8003ac0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006cdc:	f023 030f 	bic.w	r3, r3, #15
 8006ce0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d060      	beq.n	8006db4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006cfa:	2310      	movs	r3, #16
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	e001      	b.n	8006d04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006d00:	2320      	movs	r3, #32
 8006d02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d802      	bhi.n	8006d12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006d12:	2001      	movs	r0, #1
 8006d14:	f001 fa94 	bl	8008240 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d18:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d22:	d125      	bne.n	8006d70 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d010      	beq.n	8006d4e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	3305      	adds	r3, #5
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	e01f      	b.n	8006d8e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	461a      	mov	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6a:	3305      	adds	r3, #5
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	e00e      	b.n	8006d8e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	3305      	adds	r3, #5
 8006d8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4a5c      	ldr	r2, [pc, #368]	; (8006f04 <HAL_I2S_Init+0x270>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	08db      	lsrs	r3, r3, #3
 8006d98:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	61bb      	str	r3, [r7, #24]
 8006db2:	e003      	b.n	8006dbc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006db4:	2302      	movs	r3, #2
 8006db6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d902      	bls.n	8006dc8 <HAL_I2S_Init+0x134>
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2bff      	cmp	r3, #255	; 0xff
 8006dc6:	d907      	bls.n	8006dd8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dcc:	f043 0210 	orr.w	r2, r3, #16
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e08f      	b.n	8006ef8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	ea42 0103 	orr.w	r1, r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006df6:	f023 030f 	bic.w	r3, r3, #15
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6851      	ldr	r1, [r2, #4]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6892      	ldr	r2, [r2, #8]
 8006e02:	4311      	orrs	r1, r2
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	68d2      	ldr	r2, [r2, #12]
 8006e08:	4311      	orrs	r1, r2
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6992      	ldr	r2, [r2, #24]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d161      	bne.n	8006ee8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a38      	ldr	r2, [pc, #224]	; (8006f08 <HAL_I2S_Init+0x274>)
 8006e28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a37      	ldr	r2, [pc, #220]	; (8006f0c <HAL_I2S_Init+0x278>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d101      	bne.n	8006e38 <HAL_I2S_Init+0x1a4>
 8006e34:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_I2S_Init+0x27c>)
 8006e36:	e001      	b.n	8006e3c <HAL_I2S_Init+0x1a8>
 8006e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	4932      	ldr	r1, [pc, #200]	; (8006f0c <HAL_I2S_Init+0x278>)
 8006e44:	428a      	cmp	r2, r1
 8006e46:	d101      	bne.n	8006e4c <HAL_I2S_Init+0x1b8>
 8006e48:	4a31      	ldr	r2, [pc, #196]	; (8006f10 <HAL_I2S_Init+0x27c>)
 8006e4a:	e001      	b.n	8006e50 <HAL_I2S_Init+0x1bc>
 8006e4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006e50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006e54:	f023 030f 	bic.w	r3, r3, #15
 8006e58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <HAL_I2S_Init+0x278>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d101      	bne.n	8006e68 <HAL_I2S_Init+0x1d4>
 8006e64:	4b2a      	ldr	r3, [pc, #168]	; (8006f10 <HAL_I2S_Init+0x27c>)
 8006e66:	e001      	b.n	8006e6c <HAL_I2S_Init+0x1d8>
 8006e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <HAL_I2S_Init+0x278>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d101      	bne.n	8006e7e <HAL_I2S_Init+0x1ea>
 8006e7a:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <HAL_I2S_Init+0x27c>)
 8006e7c:	e001      	b.n	8006e82 <HAL_I2S_Init+0x1ee>
 8006e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8e:	d003      	beq.n	8006e98 <HAL_I2S_Init+0x204>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	e001      	b.n	8006ea4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	b299      	uxth	r1, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006eba:	4303      	orrs	r3, r0
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	897b      	ldrh	r3, [r7, #10]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ed0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a0d      	ldr	r2, [pc, #52]	; (8006f0c <HAL_I2S_Init+0x278>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d101      	bne.n	8006ee0 <HAL_I2S_Init+0x24c>
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_I2S_Init+0x27c>)
 8006ede:	e001      	b.n	8006ee4 <HAL_I2S_Init+0x250>
 8006ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ee4:	897a      	ldrh	r2, [r7, #10]
 8006ee6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3720      	adds	r7, #32
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	08007219 	.word	0x08007219
 8006f04:	cccccccd 	.word	0xcccccccd
 8006f08:	0800732d 	.word	0x0800732d
 8006f0c:	40003800 	.word	0x40003800
 8006f10:	40003400 	.word	0x40003400

08006f14 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_I2S_Transmit_DMA+0x1a>
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e08e      	b.n	8007050 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_I2S_Transmit_DMA+0x2e>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e086      	b.n	8007050 <HAL_I2S_Transmit_DMA+0x13c>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d005      	beq.n	8006f62 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e076      	b.n	8007050 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2203      	movs	r2, #3
 8006f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d002      	beq.n	8006f8e <HAL_I2S_Transmit_DMA+0x7a>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fa2:	e005      	b.n	8006fb0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	88fa      	ldrh	r2, [r7, #6]
 8006fa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	88fa      	ldrh	r2, [r7, #6]
 8006fae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	4a28      	ldr	r2, [pc, #160]	; (8007058 <HAL_I2S_Transmit_DMA+0x144>)
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	4a27      	ldr	r2, [pc, #156]	; (800705c <HAL_I2S_Transmit_DMA+0x148>)
 8006fbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	4a26      	ldr	r2, [pc, #152]	; (8007060 <HAL_I2S_Transmit_DMA+0x14c>)
 8006fc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006fd0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006fd8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fde:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006fe0:	f7fe f8e1 	bl	80051a6 <HAL_DMA_Start_IT>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00f      	beq.n	800700a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	f043 0208 	orr.w	r2, r3, #8
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e022      	b.n	8007050 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007014:	2b00      	cmp	r3, #0
 8007016:	d107      	bne.n	8007028 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69da      	ldr	r2, [r3, #28]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007026:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d107      	bne.n	8007046 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0202 	orr.w	r2, r2, #2
 8007044:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	080070f7 	.word	0x080070f7
 800705c:	080070b5 	.word	0x080070b5
 8007060:	08007113 	.word	0x08007113

08007064 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10e      	bne.n	80070e8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0202 	bic.w	r2, r2, #2
 80070d8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff ffc5 	bl	8007078 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7ff ffad 	bl	8007064 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0203 	bic.w	r2, r2, #3
 800712e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	f043 0208 	orr.w	r2, r3, #8
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff ffa5 	bl	80070a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	881a      	ldrh	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	1c9a      	adds	r2, r3, #2
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10e      	bne.n	80071b2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ff63 	bl	8007078 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	b292      	uxth	r2, r2
 80071ce:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	1c9a      	adds	r2, r3, #2
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10e      	bne.n	8007210 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007200:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff ff3e 	bl	800708c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b04      	cmp	r3, #4
 8007232:	d13a      	bne.n	80072aa <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b01      	cmp	r3, #1
 800723c:	d109      	bne.n	8007252 <I2S_IRQHandler+0x3a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b40      	cmp	r3, #64	; 0x40
 800724a:	d102      	bne.n	8007252 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ffb4 	bl	80071ba <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d126      	bne.n	80072aa <I2S_IRQHandler+0x92>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b20      	cmp	r3, #32
 8007268:	d11f      	bne.n	80072aa <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007278:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729c:	f043 0202 	orr.w	r2, r3, #2
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fefb 	bl	80070a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d136      	bne.n	8007324 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d109      	bne.n	80072d4 <I2S_IRQHandler+0xbc>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b80      	cmp	r3, #128	; 0x80
 80072cc:	d102      	bne.n	80072d4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff ff45 	bl	800715e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d122      	bne.n	8007324 <I2S_IRQHandler+0x10c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d11b      	bne.n	8007324 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072fa:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	f043 0204 	orr.w	r2, r3, #4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff febe 	bl	80070a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007324:	bf00      	nop
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4aa2      	ldr	r2, [pc, #648]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d101      	bne.n	800734a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8007346:	4ba2      	ldr	r3, [pc, #648]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007348:	e001      	b.n	800734e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800734a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a9b      	ldr	r2, [pc, #620]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007364:	4b9a      	ldr	r3, [pc, #616]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007366:	e001      	b.n	800736c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007378:	d004      	beq.n	8007384 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f040 8099 	bne.w	80074b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d107      	bne.n	800739e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f925 	bl	80075e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9c8 	bl	8007748 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d13a      	bne.n	8007438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f003 0320 	and.w	r3, r3, #32
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d035      	beq.n	8007438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a7e      	ldr	r2, [pc, #504]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80073d6:	4b7e      	ldr	r3, [pc, #504]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073d8:	e001      	b.n	80073de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80073da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4979      	ldr	r1, [pc, #484]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80073e6:	428b      	cmp	r3, r1
 80073e8:	d101      	bne.n	80073ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80073ea:	4b79      	ldr	r3, [pc, #484]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80073ec:	e001      	b.n	80073f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80073ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007406:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	f043 0202 	orr.w	r2, r3, #2
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fe34 	bl	80070a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b08      	cmp	r3, #8
 8007440:	f040 80be 	bne.w	80075c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80b8 	beq.w	80075c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800745e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a59      	ldr	r2, [pc, #356]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d101      	bne.n	800746e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800746a:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800746c:	e001      	b.n	8007472 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800746e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4954      	ldr	r1, [pc, #336]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800747a:	428b      	cmp	r3, r1
 800747c:	d101      	bne.n	8007482 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800747e:	4b54      	ldr	r3, [pc, #336]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007480:	e001      	b.n	8007486 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800748a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	60bb      	str	r3, [r7, #8]
 8007498:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	f043 0204 	orr.w	r2, r3, #4
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fdf6 	bl	80070a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074b4:	e084      	b.n	80075c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d107      	bne.n	80074d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8be 	bl	800764c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d107      	bne.n	80074ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f8fd 	bl	80076e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d12f      	bne.n	8007554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d02a      	beq.n	8007554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800750c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a2e      	ldr	r2, [pc, #184]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d101      	bne.n	800751c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007518:	4b2d      	ldr	r3, [pc, #180]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800751a:	e001      	b.n	8007520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800751c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4929      	ldr	r1, [pc, #164]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007528:	428b      	cmp	r3, r1
 800752a:	d101      	bne.n	8007530 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800752c:	4b28      	ldr	r3, [pc, #160]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800752e:	e001      	b.n	8007534 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007538:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	f043 0202 	orr.w	r2, r3, #2
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fda6 	bl	80070a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b08      	cmp	r3, #8
 800755c:	d131      	bne.n	80075c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f003 0320 	and.w	r3, r3, #32
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02c      	beq.n	80075c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a17      	ldr	r2, [pc, #92]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d101      	bne.n	8007576 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007572:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007574:	e001      	b.n	800757a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4912      	ldr	r1, [pc, #72]	; (80075cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007582:	428b      	cmp	r3, r1
 8007584:	d101      	bne.n	800758a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007586:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007588:	e001      	b.n	800758e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800758a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800758e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007592:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075a2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	f043 0204 	orr.w	r2, r3, #4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff fd71 	bl	80070a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80075be:	e000      	b.n	80075c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80075c0:	bf00      	nop
}
 80075c2:	bf00      	nop
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	40003800 	.word	0x40003800
 80075d0:	40003400 	.word	0x40003400

080075d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	1c99      	adds	r1, r3, #2
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6251      	str	r1, [r2, #36]	; 0x24
 80075fa:	881a      	ldrh	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d113      	bne.n	8007642 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007628:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff ffc9 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
	...

0800764c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	1c99      	adds	r1, r3, #2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6251      	str	r1, [r2, #36]	; 0x24
 800765e:	8819      	ldrh	r1, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <I2SEx_TxISR_I2SExt+0x90>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d101      	bne.n	800766e <I2SEx_TxISR_I2SExt+0x22>
 800766a:	4b1d      	ldr	r3, [pc, #116]	; (80076e0 <I2SEx_TxISR_I2SExt+0x94>)
 800766c:	e001      	b.n	8007672 <I2SEx_TxISR_I2SExt+0x26>
 800766e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007672:	460a      	mov	r2, r1
 8007674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d121      	bne.n	80076d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a12      	ldr	r2, [pc, #72]	; (80076dc <I2SEx_TxISR_I2SExt+0x90>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d101      	bne.n	800769c <I2SEx_TxISR_I2SExt+0x50>
 8007698:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <I2SEx_TxISR_I2SExt+0x94>)
 800769a:	e001      	b.n	80076a0 <I2SEx_TxISR_I2SExt+0x54>
 800769c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	490d      	ldr	r1, [pc, #52]	; (80076dc <I2SEx_TxISR_I2SExt+0x90>)
 80076a8:	428b      	cmp	r3, r1
 80076aa:	d101      	bne.n	80076b0 <I2SEx_TxISR_I2SExt+0x64>
 80076ac:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <I2SEx_TxISR_I2SExt+0x94>)
 80076ae:	e001      	b.n	80076b4 <I2SEx_TxISR_I2SExt+0x68>
 80076b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80076b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff ff81 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	40003800 	.word	0x40003800
 80076e0:	40003400 	.word	0x40003400

080076e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68d8      	ldr	r0, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	1c99      	adds	r1, r3, #2
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80076fc:	b282      	uxth	r2, r0
 80076fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007712:	b29b      	uxth	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d113      	bne.n	8007740 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007726:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff ff4a 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007740:	bf00      	nop
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a20      	ldr	r2, [pc, #128]	; (80077d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d101      	bne.n	800775e <I2SEx_RxISR_I2SExt+0x16>
 800775a:	4b20      	ldr	r3, [pc, #128]	; (80077dc <I2SEx_RxISR_I2SExt+0x94>)
 800775c:	e001      	b.n	8007762 <I2SEx_RxISR_I2SExt+0x1a>
 800775e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007762:	68d8      	ldr	r0, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	1c99      	adds	r1, r3, #2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800776e:	b282      	uxth	r2, r0
 8007770:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d121      	bne.n	80077ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <I2SEx_RxISR_I2SExt+0x90>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d101      	bne.n	8007798 <I2SEx_RxISR_I2SExt+0x50>
 8007794:	4b11      	ldr	r3, [pc, #68]	; (80077dc <I2SEx_RxISR_I2SExt+0x94>)
 8007796:	e001      	b.n	800779c <I2SEx_RxISR_I2SExt+0x54>
 8007798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	490d      	ldr	r1, [pc, #52]	; (80077d8 <I2SEx_RxISR_I2SExt+0x90>)
 80077a4:	428b      	cmp	r3, r1
 80077a6:	d101      	bne.n	80077ac <I2SEx_RxISR_I2SExt+0x64>
 80077a8:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <I2SEx_RxISR_I2SExt+0x94>)
 80077aa:	e001      	b.n	80077b0 <I2SEx_RxISR_I2SExt+0x68>
 80077ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80077b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f7ff ff03 	bl	80075d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40003800 	.word	0x40003800
 80077dc:	40003400 	.word	0x40003400

080077e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e25b      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d075      	beq.n	80078ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077fe:	4ba3      	ldr	r3, [pc, #652]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
 8007806:	2b04      	cmp	r3, #4
 8007808:	d00c      	beq.n	8007824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800780a:	4ba0      	ldr	r3, [pc, #640]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007812:	2b08      	cmp	r3, #8
 8007814:	d112      	bne.n	800783c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007816:	4b9d      	ldr	r3, [pc, #628]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800781e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007822:	d10b      	bne.n	800783c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007824:	4b99      	ldr	r3, [pc, #612]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d05b      	beq.n	80078e8 <HAL_RCC_OscConfig+0x108>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d157      	bne.n	80078e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e236      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007844:	d106      	bne.n	8007854 <HAL_RCC_OscConfig+0x74>
 8007846:	4b91      	ldr	r3, [pc, #580]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a90      	ldr	r2, [pc, #576]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800784c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	e01d      	b.n	8007890 <HAL_RCC_OscConfig+0xb0>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800785c:	d10c      	bne.n	8007878 <HAL_RCC_OscConfig+0x98>
 800785e:	4b8b      	ldr	r3, [pc, #556]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a8a      	ldr	r2, [pc, #552]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	4b88      	ldr	r3, [pc, #544]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a87      	ldr	r2, [pc, #540]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e00b      	b.n	8007890 <HAL_RCC_OscConfig+0xb0>
 8007878:	4b84      	ldr	r3, [pc, #528]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a83      	ldr	r2, [pc, #524]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800787e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	4b81      	ldr	r3, [pc, #516]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a80      	ldr	r2, [pc, #512]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800788a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800788e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d013      	beq.n	80078c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007898:	f7fd f990 	bl	8004bbc <HAL_GetTick>
 800789c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800789e:	e008      	b.n	80078b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078a0:	f7fd f98c 	bl	8004bbc <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b64      	cmp	r3, #100	; 0x64
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e1fb      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078b2:	4b76      	ldr	r3, [pc, #472]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0f0      	beq.n	80078a0 <HAL_RCC_OscConfig+0xc0>
 80078be:	e014      	b.n	80078ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c0:	f7fd f97c 	bl	8004bbc <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c8:	f7fd f978 	bl	8004bbc <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b64      	cmp	r3, #100	; 0x64
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e1e7      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078da:	4b6c      	ldr	r3, [pc, #432]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1f0      	bne.n	80078c8 <HAL_RCC_OscConfig+0xe8>
 80078e6:	e000      	b.n	80078ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d063      	beq.n	80079be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078f6:	4b65      	ldr	r3, [pc, #404]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007902:	4b62      	ldr	r3, [pc, #392]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800790a:	2b08      	cmp	r3, #8
 800790c:	d11c      	bne.n	8007948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800790e:	4b5f      	ldr	r3, [pc, #380]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d116      	bne.n	8007948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800791a:	4b5c      	ldr	r3, [pc, #368]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <HAL_RCC_OscConfig+0x152>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d001      	beq.n	8007932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e1bb      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007932:	4b56      	ldr	r3, [pc, #344]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4952      	ldr	r1, [pc, #328]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007942:	4313      	orrs	r3, r2
 8007944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007946:	e03a      	b.n	80079be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d020      	beq.n	8007992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007950:	4b4f      	ldr	r3, [pc, #316]	; (8007a90 <HAL_RCC_OscConfig+0x2b0>)
 8007952:	2201      	movs	r2, #1
 8007954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007956:	f7fd f931 	bl	8004bbc <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800795c:	e008      	b.n	8007970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800795e:	f7fd f92d 	bl	8004bbc <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d901      	bls.n	8007970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e19c      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007970:	4b46      	ldr	r3, [pc, #280]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d0f0      	beq.n	800795e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797c:	4b43      	ldr	r3, [pc, #268]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	00db      	lsls	r3, r3, #3
 800798a:	4940      	ldr	r1, [pc, #256]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 800798c:	4313      	orrs	r3, r2
 800798e:	600b      	str	r3, [r1, #0]
 8007990:	e015      	b.n	80079be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007992:	4b3f      	ldr	r3, [pc, #252]	; (8007a90 <HAL_RCC_OscConfig+0x2b0>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007998:	f7fd f910 	bl	8004bbc <HAL_GetTick>
 800799c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800799e:	e008      	b.n	80079b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079a0:	f7fd f90c 	bl	8004bbc <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d901      	bls.n	80079b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e17b      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079b2:	4b36      	ldr	r3, [pc, #216]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1f0      	bne.n	80079a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0308 	and.w	r3, r3, #8
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d030      	beq.n	8007a2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d016      	beq.n	8007a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079d2:	4b30      	ldr	r3, [pc, #192]	; (8007a94 <HAL_RCC_OscConfig+0x2b4>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d8:	f7fd f8f0 	bl	8004bbc <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079e0:	f7fd f8ec 	bl	8004bbc <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e15b      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079f2:	4b26      	ldr	r3, [pc, #152]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 80079f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x200>
 80079fe:	e015      	b.n	8007a2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a00:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <HAL_RCC_OscConfig+0x2b4>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a06:	f7fd f8d9 	bl	8004bbc <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a0c:	e008      	b.n	8007a20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a0e:	f7fd f8d5 	bl	8004bbc <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e144      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1f0      	bne.n	8007a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 80a0 	beq.w	8007b7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a3e:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	4a0e      	ldr	r2, [pc, #56]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a58:	6413      	str	r3, [r2, #64]	; 0x40
 8007a5a:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <HAL_RCC_OscConfig+0x2ac>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a62:	60bb      	str	r3, [r7, #8]
 8007a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a66:	2301      	movs	r3, #1
 8007a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <HAL_RCC_OscConfig+0x2b8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d121      	bne.n	8007aba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a76:	4b08      	ldr	r3, [pc, #32]	; (8007a98 <HAL_RCC_OscConfig+0x2b8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a07      	ldr	r2, [pc, #28]	; (8007a98 <HAL_RCC_OscConfig+0x2b8>)
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a82:	f7fd f89b 	bl	8004bbc <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a88:	e011      	b.n	8007aae <HAL_RCC_OscConfig+0x2ce>
 8007a8a:	bf00      	nop
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	42470000 	.word	0x42470000
 8007a94:	42470e80 	.word	0x42470e80
 8007a98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a9c:	f7fd f88e 	bl	8004bbc <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e0fd      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aae:	4b81      	ldr	r3, [pc, #516]	; (8007cb4 <HAL_RCC_OscConfig+0x4d4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d106      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x2f0>
 8007ac2:	4b7d      	ldr	r3, [pc, #500]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	4a7c      	ldr	r2, [pc, #496]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ace:	e01c      	b.n	8007b0a <HAL_RCC_OscConfig+0x32a>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b05      	cmp	r3, #5
 8007ad6:	d10c      	bne.n	8007af2 <HAL_RCC_OscConfig+0x312>
 8007ad8:	4b77      	ldr	r3, [pc, #476]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	4a76      	ldr	r2, [pc, #472]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007ade:	f043 0304 	orr.w	r3, r3, #4
 8007ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae4:	4b74      	ldr	r3, [pc, #464]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae8:	4a73      	ldr	r2, [pc, #460]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007aea:	f043 0301 	orr.w	r3, r3, #1
 8007aee:	6713      	str	r3, [r2, #112]	; 0x70
 8007af0:	e00b      	b.n	8007b0a <HAL_RCC_OscConfig+0x32a>
 8007af2:	4b71      	ldr	r3, [pc, #452]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af6:	4a70      	ldr	r2, [pc, #448]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	6713      	str	r3, [r2, #112]	; 0x70
 8007afe:	4b6e      	ldr	r3, [pc, #440]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	4a6d      	ldr	r2, [pc, #436]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007b04:	f023 0304 	bic.w	r3, r3, #4
 8007b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d015      	beq.n	8007b3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b12:	f7fd f853 	bl	8004bbc <HAL_GetTick>
 8007b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b18:	e00a      	b.n	8007b30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b1a:	f7fd f84f 	bl	8004bbc <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d901      	bls.n	8007b30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e0bc      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b30:	4b61      	ldr	r3, [pc, #388]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0ee      	beq.n	8007b1a <HAL_RCC_OscConfig+0x33a>
 8007b3c:	e014      	b.n	8007b68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b3e:	f7fd f83d 	bl	8004bbc <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b44:	e00a      	b.n	8007b5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b46:	f7fd f839 	bl	8004bbc <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e0a6      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b5c:	4b56      	ldr	r3, [pc, #344]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1ee      	bne.n	8007b46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d105      	bne.n	8007b7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b6e:	4b52      	ldr	r3, [pc, #328]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	4a51      	ldr	r2, [pc, #324]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 8092 	beq.w	8007ca8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b84:	4b4c      	ldr	r3, [pc, #304]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 030c 	and.w	r3, r3, #12
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d05c      	beq.n	8007c4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d141      	bne.n	8007c1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b98:	4b48      	ldr	r3, [pc, #288]	; (8007cbc <HAL_RCC_OscConfig+0x4dc>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9e:	f7fd f80d 	bl	8004bbc <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba6:	f7fd f809 	bl	8004bbc <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e078      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bb8:	4b3f      	ldr	r3, [pc, #252]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f0      	bne.n	8007ba6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	019b      	lsls	r3, r3, #6
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	085b      	lsrs	r3, r3, #1
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	431a      	orrs	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	061b      	lsls	r3, r3, #24
 8007be8:	4933      	ldr	r1, [pc, #204]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bee:	4b33      	ldr	r3, [pc, #204]	; (8007cbc <HAL_RCC_OscConfig+0x4dc>)
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf4:	f7fc ffe2 	bl	8004bbc <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bfc:	f7fc ffde 	bl	8004bbc <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e04d      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c0e:	4b2a      	ldr	r3, [pc, #168]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCC_OscConfig+0x41c>
 8007c1a:	e045      	b.n	8007ca8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c1c:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <HAL_RCC_OscConfig+0x4dc>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c22:	f7fc ffcb 	bl	8004bbc <HAL_GetTick>
 8007c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c28:	e008      	b.n	8007c3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c2a:	f7fc ffc7 	bl	8004bbc <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	e036      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c3c:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1f0      	bne.n	8007c2a <HAL_RCC_OscConfig+0x44a>
 8007c48:	e02e      	b.n	8007ca8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e029      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c56:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <HAL_RCC_OscConfig+0x4d8>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d11c      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d115      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c7e:	4013      	ands	r3, r2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d10d      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d106      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d001      	beq.n	8007ca8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	40007000 	.word	0x40007000
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	42470060 	.word	0x42470060

08007cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0cc      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd4:	4b68      	ldr	r3, [pc, #416]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d90c      	bls.n	8007cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce2:	4b65      	ldr	r3, [pc, #404]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cea:	4b63      	ldr	r3, [pc, #396]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d001      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0b8      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d020      	beq.n	8007d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d14:	4b59      	ldr	r3, [pc, #356]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	4a58      	ldr	r2, [pc, #352]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d2c:	4b53      	ldr	r3, [pc, #332]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	4a52      	ldr	r2, [pc, #328]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d38:	4b50      	ldr	r3, [pc, #320]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	494d      	ldr	r1, [pc, #308]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d044      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5e:	4b47      	ldr	r3, [pc, #284]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d119      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e07f      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d003      	beq.n	8007d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d7e:	4b3f      	ldr	r3, [pc, #252]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e06f      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d8e:	4b3b      	ldr	r3, [pc, #236]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e067      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d9e:	4b37      	ldr	r3, [pc, #220]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f023 0203 	bic.w	r2, r3, #3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4934      	ldr	r1, [pc, #208]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007db0:	f7fc ff04 	bl	8004bbc <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db6:	e00a      	b.n	8007dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db8:	f7fc ff00 	bl	8004bbc <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e04f      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dce:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 020c 	and.w	r2, r3, #12
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d1eb      	bne.n	8007db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 030f 	and.w	r3, r3, #15
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d20c      	bcs.n	8007e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dee:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df6:	4b20      	ldr	r3, [pc, #128]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d001      	beq.n	8007e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e032      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d008      	beq.n	8007e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e14:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4916      	ldr	r1, [pc, #88]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e32:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	490e      	ldr	r1, [pc, #56]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e46:	f000 f821 	bl	8007e8c <HAL_RCC_GetSysClockFreq>
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	091b      	lsrs	r3, r3, #4
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	4a0a      	ldr	r2, [pc, #40]	; (8007e80 <HAL_RCC_ClockConfig+0x1c0>)
 8007e58:	5cd3      	ldrb	r3, [r2, r3]
 8007e5a:	fa21 f303 	lsr.w	r3, r1, r3
 8007e5e:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e62:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fc fe64 	bl	8004b34 <HAL_InitTick>

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40023c00 	.word	0x40023c00
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	0800ee40 	.word	0x0800ee40
 8007e84:	20000004 	.word	0x20000004
 8007e88:	20000010 	.word	0x20000010

08007e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ea2:	4b63      	ldr	r3, [pc, #396]	; (8008030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 030c 	and.w	r3, r3, #12
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d007      	beq.n	8007ebe <HAL_RCC_GetSysClockFreq+0x32>
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d008      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x38>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f040 80b4 	bne.w	8008020 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007eb8:	4b5e      	ldr	r3, [pc, #376]	; (8008034 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007eba:	60bb      	str	r3, [r7, #8]
       break;
 8007ebc:	e0b3      	b.n	8008026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ebe:	4b5e      	ldr	r3, [pc, #376]	; (8008038 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007ec0:	60bb      	str	r3, [r7, #8]
      break;
 8007ec2:	e0b0      	b.n	8008026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ec4:	4b5a      	ldr	r3, [pc, #360]	; (8008030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ecc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ece:	4b58      	ldr	r3, [pc, #352]	; (8008030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d04a      	beq.n	8007f70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eda:	4b55      	ldr	r3, [pc, #340]	; (8008030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	099b      	lsrs	r3, r3, #6
 8007ee0:	f04f 0400 	mov.w	r4, #0
 8007ee4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	ea03 0501 	and.w	r5, r3, r1
 8007ef0:	ea04 0602 	and.w	r6, r4, r2
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	f04f 0400 	mov.w	r4, #0
 8007f00:	0154      	lsls	r4, r2, #5
 8007f02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f06:	014b      	lsls	r3, r1, #5
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	1b49      	subs	r1, r1, r5
 8007f0e:	eb62 0206 	sbc.w	r2, r2, r6
 8007f12:	f04f 0300 	mov.w	r3, #0
 8007f16:	f04f 0400 	mov.w	r4, #0
 8007f1a:	0194      	lsls	r4, r2, #6
 8007f1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f20:	018b      	lsls	r3, r1, #6
 8007f22:	1a5b      	subs	r3, r3, r1
 8007f24:	eb64 0402 	sbc.w	r4, r4, r2
 8007f28:	f04f 0100 	mov.w	r1, #0
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	00e2      	lsls	r2, r4, #3
 8007f32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f36:	00d9      	lsls	r1, r3, #3
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	195b      	adds	r3, r3, r5
 8007f3e:	eb44 0406 	adc.w	r4, r4, r6
 8007f42:	f04f 0100 	mov.w	r1, #0
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	0262      	lsls	r2, r4, #9
 8007f4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007f50:	0259      	lsls	r1, r3, #9
 8007f52:	460b      	mov	r3, r1
 8007f54:	4614      	mov	r4, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	4621      	mov	r1, r4
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f04f 0400 	mov.w	r4, #0
 8007f60:	461a      	mov	r2, r3
 8007f62:	4623      	mov	r3, r4
 8007f64:	f7f8 fe0a 	bl	8000b7c <__aeabi_uldivmod>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	e049      	b.n	8008004 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f70:	4b2f      	ldr	r3, [pc, #188]	; (8008030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	099b      	lsrs	r3, r3, #6
 8007f76:	f04f 0400 	mov.w	r4, #0
 8007f7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	ea03 0501 	and.w	r5, r3, r1
 8007f86:	ea04 0602 	and.w	r6, r4, r2
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	f04f 0400 	mov.w	r4, #0
 8007f96:	0154      	lsls	r4, r2, #5
 8007f98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f9c:	014b      	lsls	r3, r1, #5
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	1b49      	subs	r1, r1, r5
 8007fa4:	eb62 0206 	sbc.w	r2, r2, r6
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	f04f 0400 	mov.w	r4, #0
 8007fb0:	0194      	lsls	r4, r2, #6
 8007fb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007fb6:	018b      	lsls	r3, r1, #6
 8007fb8:	1a5b      	subs	r3, r3, r1
 8007fba:	eb64 0402 	sbc.w	r4, r4, r2
 8007fbe:	f04f 0100 	mov.w	r1, #0
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	00e2      	lsls	r2, r4, #3
 8007fc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007fcc:	00d9      	lsls	r1, r3, #3
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4614      	mov	r4, r2
 8007fd2:	195b      	adds	r3, r3, r5
 8007fd4:	eb44 0406 	adc.w	r4, r4, r6
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	02a2      	lsls	r2, r4, #10
 8007fe2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007fe6:	0299      	lsls	r1, r3, #10
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4614      	mov	r4, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	4621      	mov	r1, r4
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f04f 0400 	mov.w	r4, #0
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	f7f8 fdbf 	bl	8000b7c <__aeabi_uldivmod>
 8007ffe:	4603      	mov	r3, r0
 8008000:	460c      	mov	r4, r1
 8008002:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008004:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	3301      	adds	r3, #1
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	60bb      	str	r3, [r7, #8]
      break;
 800801e:	e002      	b.n	8008026 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008022:	60bb      	str	r3, [r7, #8]
      break;
 8008024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008026:	68bb      	ldr	r3, [r7, #8]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008030:	40023800 	.word	0x40023800
 8008034:	00f42400 	.word	0x00f42400
 8008038:	007a1200 	.word	0x007a1200

0800803c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008040:	4b03      	ldr	r3, [pc, #12]	; (8008050 <HAL_RCC_GetHCLKFreq+0x14>)
 8008042:	681b      	ldr	r3, [r3, #0]
}
 8008044:	4618      	mov	r0, r3
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	20000004 	.word	0x20000004

08008054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008058:	f7ff fff0 	bl	800803c <HAL_RCC_GetHCLKFreq>
 800805c:	4601      	mov	r1, r0
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	0a9b      	lsrs	r3, r3, #10
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	4a03      	ldr	r2, [pc, #12]	; (8008078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800806a:	5cd3      	ldrb	r3, [r2, r3]
 800806c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008070:	4618      	mov	r0, r3
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40023800 	.word	0x40023800
 8008078:	0800ee50 	.word	0x0800ee50

0800807c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	d105      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d035      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80080a4:	4b62      	ldr	r3, [pc, #392]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080aa:	f7fc fd87 	bl	8004bbc <HAL_GetTick>
 80080ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080b0:	e008      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080b2:	f7fc fd83 	bl	8004bbc <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e0b0      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080c4:	4b5b      	ldr	r3, [pc, #364]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f0      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	019a      	lsls	r2, r3, #6
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	071b      	lsls	r3, r3, #28
 80080dc:	4955      	ldr	r1, [pc, #340]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080e4:	4b52      	ldr	r3, [pc, #328]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ea:	f7fc fd67 	bl	8004bbc <HAL_GetTick>
 80080ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080f0:	e008      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080f2:	f7fc fd63 	bl	8004bbc <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e090      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008104:	4b4b      	ldr	r3, [pc, #300]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0f0      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0302 	and.w	r3, r3, #2
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8083 	beq.w	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	4b44      	ldr	r3, [pc, #272]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	4a43      	ldr	r2, [pc, #268]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800812c:	6413      	str	r3, [r2, #64]	; 0x40
 800812e:	4b41      	ldr	r3, [pc, #260]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800813a:	4b3f      	ldr	r3, [pc, #252]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a3e      	ldr	r2, [pc, #248]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008144:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008146:	f7fc fd39 	bl	8004bbc <HAL_GetTick>
 800814a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800814c:	e008      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800814e:	f7fc fd35 	bl	8004bbc <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	2b02      	cmp	r3, #2
 800815a:	d901      	bls.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e062      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008160:	4b35      	ldr	r3, [pc, #212]	; (8008238 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0f0      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800816c:	4b31      	ldr	r3, [pc, #196]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800816e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008174:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d02f      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	d028      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800818a:	4b2a      	ldr	r3, [pc, #168]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800818c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008192:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008194:	4b29      	ldr	r3, [pc, #164]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008196:	2201      	movs	r2, #1
 8008198:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800819a:	4b28      	ldr	r3, [pc, #160]	; (800823c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80081a0:	4a24      	ldr	r2, [pc, #144]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80081a6:	4b23      	ldr	r3, [pc, #140]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d114      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80081b2:	f7fc fd03 	bl	8004bbc <HAL_GetTick>
 80081b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b8:	e00a      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ba:	f7fc fcff 	bl	8004bbc <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d901      	bls.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e02a      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081d0:	4b18      	ldr	r3, [pc, #96]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d4:	f003 0302 	and.w	r3, r3, #2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0ee      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081e8:	d10d      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80081fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081fe:	490d      	ldr	r1, [pc, #52]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008200:	4313      	orrs	r3, r2
 8008202:	608b      	str	r3, [r1, #8]
 8008204:	e005      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	4a0a      	ldr	r2, [pc, #40]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800820c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008210:	6093      	str	r3, [r2, #8]
 8008212:	4b08      	ldr	r3, [pc, #32]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800821e:	4905      	ldr	r1, [pc, #20]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008220:	4313      	orrs	r3, r2
 8008222:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	42470068 	.word	0x42470068
 8008234:	40023800 	.word	0x40023800
 8008238:	40007000 	.word	0x40007000
 800823c:	42470e40 	.word	0x42470e40

08008240 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008240:	b480      	push	{r7}
 8008242:	b087      	sub	sp, #28
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d13d      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800825e:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008266:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800826e:	2b01      	cmp	r3, #1
 8008270:	d12f      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008272:	4b1e      	ldr	r3, [pc, #120]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8008274:	617b      	str	r3, [r7, #20]
          break;
 8008276:	e02f      	b.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008278:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008284:	d108      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008286:	4b18      	ldr	r3, [pc, #96]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800828e:	4a18      	ldr	r2, [pc, #96]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	e007      	b.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008298:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082a0:	4a14      	ldr	r2, [pc, #80]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80082a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80082aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ae:	099b      	lsrs	r3, r3, #6
 80082b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	fb02 f303 	mul.w	r3, r2, r3
 80082ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80082be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c2:	0f1b      	lsrs	r3, r3, #28
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ce:	617b      	str	r3, [r7, #20]
          break;
 80082d0:	e002      	b.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
          break;
 80082d6:	bf00      	nop
        }
      }
      break;
 80082d8:	bf00      	nop
    }
  }
  return frequency;
 80082da:	697b      	ldr	r3, [r7, #20]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	371c      	adds	r7, #28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	40023800 	.word	0x40023800
 80082ec:	00bb8000 	.word	0x00bb8000
 80082f0:	007a1200 	.word	0x007a1200
 80082f4:	00f42400 	.word	0x00f42400

080082f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e022      	b.n	8008350 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d105      	bne.n	8008322 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7fb fc95 	bl	8003c4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2203      	movs	r2, #3
 8008326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f814 	bl	8008358 <HAL_SD_InitCard>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e00a      	b.n	8008350 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008358:	b5b0      	push	{r4, r5, r7, lr}
 800835a:	b08e      	sub	sp, #56	; 0x38
 800835c:	af04      	add	r7, sp, #16
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008360:	2300      	movs	r3, #0
 8008362:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008364:	2300      	movs	r3, #0
 8008366:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008368:	2300      	movs	r3, #0
 800836a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008374:	2376      	movs	r3, #118	; 0x76
 8008376:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681d      	ldr	r5, [r3, #0]
 800837c:	466c      	mov	r4, sp
 800837e:	f107 0314 	add.w	r3, r7, #20
 8008382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800838a:	f107 0308 	add.w	r3, r7, #8
 800838e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008390:	4628      	mov	r0, r5
 8008392:	f001 fe61 	bl	800a058 <SDIO_Init>
 8008396:	4603      	mov	r3, r0
 8008398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800839c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e031      	b.n	800840c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80083a8:	4b1a      	ldr	r3, [pc, #104]	; (8008414 <HAL_SD_InitCard+0xbc>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f001 fe99 	bl	800a0ea <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80083b8:	4b16      	ldr	r3, [pc, #88]	; (8008414 <HAL_SD_InitCard+0xbc>)
 80083ba:	2201      	movs	r2, #1
 80083bc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fe84 	bl	80090cc <SD_PowerON>
 80083c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	431a      	orrs	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e013      	b.n	800840c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fda3 	bl	8008f30 <SD_InitCard>
 80083ea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00b      	beq.n	800840a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3728      	adds	r7, #40	; 0x28
 8008410:	46bd      	mov	sp, r7
 8008412:	bdb0      	pop	{r4, r5, r7, pc}
 8008414:	422580a0 	.word	0x422580a0

08008418 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b092      	sub	sp, #72	; 0x48
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008426:	f7fc fbc9 	bl	8004bbc <HAL_GetTick>
 800842a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d107      	bne.n	800844a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e1d9      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b01      	cmp	r3, #1
 8008454:	f040 81cc 	bne.w	80087f0 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800845e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	441a      	add	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008468:	429a      	cmp	r2, r3
 800846a:	d907      	bls.n	800847c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008470:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e1c0      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2203      	movs	r2, #3
 8008480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2200      	movs	r2, #0
 800848a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008490:	2b01      	cmp	r3, #1
 8008492:	d002      	beq.n	800849a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	025b      	lsls	r3, r3, #9
 8008498:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 feb4 	bl	800a210 <SDMMC_CmdBlockLength>
 80084a8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80084aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00f      	beq.n	80084d0 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a9b      	ldr	r2, [pc, #620]	; (8008724 <HAL_SD_ReadBlocks+0x30c>)
 80084b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084be:	431a      	orrs	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e196      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084d0:	f04f 33ff 	mov.w	r3, #4294967295
 80084d4:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	025b      	lsls	r3, r3, #9
 80084da:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80084dc:	2390      	movs	r3, #144	; 0x90
 80084de:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80084e0:	2302      	movs	r3, #2
 80084e2:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80084e8:	2301      	movs	r3, #1
 80084ea:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f107 0214 	add.w	r2, r7, #20
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 fe5e 	bl	800a1b8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d90a      	bls.n	8008518 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2202      	movs	r2, #2
 8008506:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800850e:	4618      	mov	r0, r3
 8008510:	f001 fec2 	bl	800a298 <SDMMC_CmdReadMultiBlock>
 8008514:	6478      	str	r0, [r7, #68]	; 0x44
 8008516:	e009      	b.n	800852c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008524:	4618      	mov	r0, r3
 8008526:	f001 fe95 	bl	800a254 <SDMMC_CmdReadSingleBlock>
 800852a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800852c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800852e:	2b00      	cmp	r3, #0
 8008530:	d012      	beq.n	8008558 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a7b      	ldr	r2, [pc, #492]	; (8008724 <HAL_SD_ReadBlocks+0x30c>)
 8008538:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008540:	431a      	orrs	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e152      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800855c:	e061      	b.n	8008622 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d03c      	beq.n	80085e6 <HAL_SD_ReadBlocks+0x1ce>
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d039      	beq.n	80085e6 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008572:	2300      	movs	r3, #0
 8008574:	643b      	str	r3, [r7, #64]	; 0x40
 8008576:	e033      	b.n	80085e0 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4618      	mov	r0, r3
 800857e:	f001 fd96 	bl	800a0ae <SDIO_ReadFIFO>
 8008582:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	b2da      	uxtb	r2, r3
 8008588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	3301      	adds	r3, #1
 8008590:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008594:	3b01      	subs	r3, #1
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	b2da      	uxtb	r2, r3
 800859e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80085a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a4:	3301      	adds	r3, #1
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80085a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085aa:	3b01      	subs	r3, #1
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	3301      	adds	r3, #1
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80085be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c0:	3b01      	subs	r3, #1
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	0e1b      	lsrs	r3, r3, #24
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	3301      	adds	r3, #1
 80085d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80085d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d6:	3b01      	subs	r3, #1
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80085da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085dc:	3301      	adds	r3, #1
 80085de:	643b      	str	r3, [r7, #64]	; 0x40
 80085e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e2:	2b07      	cmp	r3, #7
 80085e4:	d9c8      	bls.n	8008578 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80085e6:	f7fc fae9 	bl	8004bbc <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d902      	bls.n	80085fc <HAL_SD_ReadBlocks+0x1e4>
 80085f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d112      	bne.n	8008622 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a48      	ldr	r2, [pc, #288]	; (8008724 <HAL_SD_ReadBlocks+0x30c>)
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e0ed      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008628:	f240 332a 	movw	r3, #810	; 0x32a
 800862c:	4013      	ands	r3, r2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d095      	beq.n	800855e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d022      	beq.n	8008686 <HAL_SD_ReadBlocks+0x26e>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d91f      	bls.n	8008686 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	2b03      	cmp	r3, #3
 800864c:	d01b      	beq.n	8008686 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fe86 	bl	800a364 <SDMMC_CmdStopTransfer>
 8008658:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800865a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800865c:	2b00      	cmp	r3, #0
 800865e:	d012      	beq.n	8008686 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a2f      	ldr	r2, [pc, #188]	; (8008724 <HAL_SD_ReadBlocks+0x30c>)
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800866c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866e:	431a      	orrs	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e0bb      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d012      	beq.n	80086ba <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a22      	ldr	r2, [pc, #136]	; (8008724 <HAL_SD_ReadBlocks+0x30c>)
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	f043 0208 	orr.w	r2, r3, #8
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e0a1      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d012      	beq.n	80086ee <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a15      	ldr	r2, [pc, #84]	; (8008724 <HAL_SD_ReadBlocks+0x30c>)
 80086ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	f043 0202 	orr.w	r2, r3, #2
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e087      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d064      	beq.n	80087c6 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a08      	ldr	r2, [pc, #32]	; (8008724 <HAL_SD_ReadBlocks+0x30c>)
 8008702:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008708:	f043 0220 	orr.w	r2, r3, #32
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e06d      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
 8008722:	bf00      	nop
 8008724:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f001 fcbe 	bl	800a0ae <SDIO_ReadFIFO>
 8008732:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008736:	b2da      	uxtb	r2, r3
 8008738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	3301      	adds	r3, #1
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	3b01      	subs	r3, #1
 8008746:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	0a1b      	lsrs	r3, r3, #8
 800874c:	b2da      	uxtb	r2, r3
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	3301      	adds	r3, #1
 8008756:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875a:	3b01      	subs	r3, #1
 800875c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	0c1b      	lsrs	r3, r3, #16
 8008762:	b2da      	uxtb	r2, r3
 8008764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008766:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876a:	3301      	adds	r3, #1
 800876c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800876e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008770:	3b01      	subs	r3, #1
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	0e1b      	lsrs	r3, r3, #24
 8008778:	b2da      	uxtb	r2, r3
 800877a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800877e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008780:	3301      	adds	r3, #1
 8008782:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008786:	3b01      	subs	r3, #1
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800878a:	f7fc fa17 	bl	8004bbc <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008796:	429a      	cmp	r2, r3
 8008798:	d902      	bls.n	80087a0 <HAL_SD_ReadBlocks+0x388>
 800879a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879c:	2b00      	cmp	r3, #0
 800879e:	d112      	bne.n	80087c6 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a18      	ldr	r2, [pc, #96]	; (8008808 <HAL_SD_ReadBlocks+0x3f0>)
 80087a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e01b      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <HAL_SD_ReadBlocks+0x3c2>
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1a6      	bne.n	8008728 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f240 523a 	movw	r2, #1338	; 0x53a
 80087e2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	e006      	b.n	80087fe <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
  }
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3748      	adds	r7, #72	; 0x48
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	004005ff 	.word	0x004005ff

0800880c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b092      	sub	sp, #72	; 0x48
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800881a:	f7fc f9cf 	bl	8004bbc <HAL_GetTick>
 800881e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d107      	bne.n	800883e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008832:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e184      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b01      	cmp	r3, #1
 8008848:	f040 8177 	bne.w	8008b3a <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008852:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	441a      	add	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885c:	429a      	cmp	r2, r3
 800885e:	d907      	bls.n	8008870 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008864:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e16b      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2203      	movs	r2, #3
 8008874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2200      	movs	r2, #0
 800887e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008884:	2b01      	cmp	r3, #1
 8008886:	d002      	beq.n	800888e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	025b      	lsls	r3, r3, #9
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008896:	4618      	mov	r0, r3
 8008898:	f001 fcba 	bl	800a210 <SDMMC_CmdBlockLength>
 800889c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800889e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00f      	beq.n	80088c4 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a9d      	ldr	r2, [pc, #628]	; (8008b20 <HAL_SD_WriteBlocks+0x314>)
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b2:	431a      	orrs	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e141      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088c4:	f04f 33ff 	mov.w	r3, #4294967295
 80088c8:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	025b      	lsls	r3, r3, #9
 80088ce:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80088d0:	2390      	movs	r3, #144	; 0x90
 80088d2:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80088d4:	2300      	movs	r3, #0
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80088d8:	2300      	movs	r3, #0
 80088da:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80088dc:	2301      	movs	r3, #1
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f107 0218 	add.w	r2, r7, #24
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f001 fc64 	bl	800a1b8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d90a      	bls.n	800890c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008902:	4618      	mov	r0, r3
 8008904:	f001 fd0c 	bl	800a320 <SDMMC_CmdWriteMultiBlock>
 8008908:	6478      	str	r0, [r7, #68]	; 0x44
 800890a:	e009      	b.n	8008920 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2210      	movs	r2, #16
 8008910:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008918:	4618      	mov	r0, r3
 800891a:	f001 fcdf 	bl	800a2dc <SDMMC_CmdWriteSingleBlock>
 800891e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	d012      	beq.n	800894c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a7d      	ldr	r2, [pc, #500]	; (8008b20 <HAL_SD_WriteBlocks+0x314>)
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008934:	431a      	orrs	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e0fd      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008950:	e065      	b.n	8008a1e <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d040      	beq.n	80089e2 <HAL_SD_WriteBlocks+0x1d6>
 8008960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d03d      	beq.n	80089e2 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008966:	2300      	movs	r3, #0
 8008968:	643b      	str	r3, [r7, #64]	; 0x40
 800896a:	e037      	b.n	80089dc <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008974:	3301      	adds	r3, #1
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897a:	3b01      	subs	r3, #1
 800897c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800897e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	021a      	lsls	r2, r3, #8
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4313      	orrs	r3, r2
 8008988:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898c:	3301      	adds	r3, #1
 800898e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008992:	3b01      	subs	r3, #1
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	041a      	lsls	r2, r3, #16
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	3301      	adds	r3, #1
 80089a6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089aa:	3b01      	subs	r3, #1
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	061a      	lsls	r2, r3, #24
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089bc:	3301      	adds	r3, #1
 80089be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c2:	3b01      	subs	r3, #1
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f107 0214 	add.w	r2, r7, #20
 80089ce:	4611      	mov	r1, r2
 80089d0:	4618      	mov	r0, r3
 80089d2:	f001 fb79 	bl	800a0c8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80089d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d8:	3301      	adds	r3, #1
 80089da:	643b      	str	r3, [r7, #64]	; 0x40
 80089dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089de:	2b07      	cmp	r3, #7
 80089e0:	d9c4      	bls.n	800896c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80089e2:	f7fc f8eb 	bl	8004bbc <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d902      	bls.n	80089f8 <HAL_SD_WriteBlocks+0x1ec>
 80089f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d112      	bne.n	8008a1e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a48      	ldr	r2, [pc, #288]	; (8008b20 <HAL_SD_WriteBlocks+0x314>)
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a06:	431a      	orrs	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e094      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a24:	f240 331a 	movw	r3, #794	; 0x31a
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d091      	beq.n	8008952 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d022      	beq.n	8008a82 <HAL_SD_WriteBlocks+0x276>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d91f      	bls.n	8008a82 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d01b      	beq.n	8008a82 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 fc88 	bl	800a364 <SDMMC_CmdStopTransfer>
 8008a54:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d012      	beq.n	8008a82 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a2f      	ldr	r2, [pc, #188]	; (8008b20 <HAL_SD_WriteBlocks+0x314>)
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e062      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	f003 0308 	and.w	r3, r3, #8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d012      	beq.n	8008ab6 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a22      	ldr	r2, [pc, #136]	; (8008b20 <HAL_SD_WriteBlocks+0x314>)
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	f043 0208 	orr.w	r2, r3, #8
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e048      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d012      	beq.n	8008aea <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a15      	ldr	r2, [pc, #84]	; (8008b20 <HAL_SD_WriteBlocks+0x314>)
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	f043 0202 	orr.w	r2, r3, #2
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e02e      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af0:	f003 0310 	and.w	r3, r3, #16
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d015      	beq.n	8008b24 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a08      	ldr	r2, [pc, #32]	; (8008b20 <HAL_SD_WriteBlocks+0x314>)
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	f043 0210 	orr.w	r2, r3, #16
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e014      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
 8008b1e:	bf00      	nop
 8008b20:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e006      	b.n	8008b48 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
  }
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3748      	adds	r7, #72	; 0x48
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b5e:	0f9b      	lsrs	r3, r3, #30
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6a:	0e9b      	lsrs	r3, r3, #26
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b7c:	0e1b      	lsrs	r3, r3, #24
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b8e:	0c1b      	lsrs	r3, r3, #16
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b9a:	0a1b      	lsrs	r3, r3, #8
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bb0:	0d1b      	lsrs	r3, r3, #20
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bbc:	0c1b      	lsrs	r3, r3, #16
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bce:	0bdb      	lsrs	r3, r3, #15
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008be0:	0b9b      	lsrs	r3, r3, #14
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bf2:	0b5b      	lsrs	r3, r3, #13
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c04:	0b1b      	lsrs	r3, r3, #12
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d163      	bne.n	8008ce8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c24:	009a      	lsls	r2, r3, #2
 8008c26:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c30:	0f92      	lsrs	r2, r2, #30
 8008c32:	431a      	orrs	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3c:	0edb      	lsrs	r3, r3, #27
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0307 	and.w	r3, r3, #7
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4e:	0e1b      	lsrs	r3, r3, #24
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c60:	0d5b      	lsrs	r3, r3, #21
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 0307 	and.w	r3, r3, #7
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c72:	0c9b      	lsrs	r3, r3, #18
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c84:	0bdb      	lsrs	r3, r3, #15
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	7e1b      	ldrb	r3, [r3, #24]
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	3302      	adds	r3, #2
 8008ca8:	2201      	movs	r2, #1
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008cb2:	fb02 f203 	mul.w	r2, r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	7a1b      	ldrb	r3, [r3, #8]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	409a      	lsls	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008cd4:	0a52      	lsrs	r2, r2, #9
 8008cd6:	fb02 f203 	mul.w	r2, r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ce4:	661a      	str	r2, [r3, #96]	; 0x60
 8008ce6:	e031      	b.n	8008d4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d11d      	bne.n	8008d2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf4:	041b      	lsls	r3, r3, #16
 8008cf6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfe:	0c1b      	lsrs	r3, r3, #16
 8008d00:	431a      	orrs	r2, r3
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	029a      	lsls	r2, r3, #10
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	661a      	str	r2, [r3, #96]	; 0x60
 8008d2a:	e00f      	b.n	8008d4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a58      	ldr	r2, [pc, #352]	; (8008e94 <HAL_SD_GetCardCSD+0x344>)
 8008d32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e09d      	b.n	8008e88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d50:	0b9b      	lsrs	r3, r3, #14
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d62:	09db      	lsrs	r3, r3, #7
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d84:	0fdb      	lsrs	r3, r3, #31
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d90:	0f5b      	lsrs	r3, r3, #29
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	0e9b      	lsrs	r3, r3, #26
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0307 	and.w	r3, r3, #7
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db4:	0d9b      	lsrs	r3, r3, #22
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc6:	0d5b      	lsrs	r3, r3, #21
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	0c1b      	lsrs	r3, r3, #16
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	0bdb      	lsrs	r3, r3, #15
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0a:	0b9b      	lsrs	r3, r3, #14
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1e:	0b5b      	lsrs	r3, r3, #13
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e32:	0b1b      	lsrs	r3, r3, #12
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e46:	0a9b      	lsrs	r3, r3, #10
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5a:	0a1b      	lsrs	r3, r3, #8
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6e:	085b      	lsrs	r3, r3, #1
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	004005ff 	.word	0x004005ff

08008e98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008efc:	f107 030c 	add.w	r3, r7, #12
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f970 	bl	80091e8 <SD_SendStatus>
 8008f08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d005      	beq.n	8008f1c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	0a5b      	lsrs	r3, r3, #9
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f26:	693b      	ldr	r3, [r7, #16]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f30:	b5b0      	push	{r4, r5, r7, lr}
 8008f32:	b094      	sub	sp, #80	; 0x50
 8008f34:	af04      	add	r7, sp, #16
 8008f36:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f8e1 	bl	800a108 <SDIO_GetPowerState>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f50:	e0b7      	b.n	80090c2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d02f      	beq.n	8008fba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f001 fac7 	bl	800a4f2 <SDMMC_CmdSendCID>
 8008f64:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <SD_InitCard+0x40>
    {
      return errorstate;
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	e0a8      	b.n	80090c2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f001 f90b 	bl	800a192 <SDIO_GetResponse>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2104      	movs	r1, #4
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f001 f902 	bl	800a192 <SDIO_GetResponse>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2108      	movs	r1, #8
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 f8f9 	bl	800a192 <SDIO_GetResponse>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	210c      	movs	r1, #12
 8008fac:	4618      	mov	r0, r3
 8008fae:	f001 f8f0 	bl	800a192 <SDIO_GetResponse>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d00d      	beq.n	8008fde <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f107 020e 	add.w	r2, r7, #14
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 facd 	bl	800a56c <SDMMC_CmdSetRelAdd>
 8008fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <SD_InitCard+0xae>
    {
      return errorstate;
 8008fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fdc:	e071      	b.n	80090c2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	d036      	beq.n	8009054 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008fe6:	89fb      	ldrh	r3, [r7, #14]
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff6:	041b      	lsls	r3, r3, #16
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f001 fa97 	bl	800a52e <SDMMC_CmdSendCSD>
 8009000:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	e05a      	b.n	80090c2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f001 f8bd 	bl	800a192 <SDIO_GetResponse>
 8009018:	4602      	mov	r2, r0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2104      	movs	r1, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f8b4 	bl	800a192 <SDIO_GetResponse>
 800902a:	4602      	mov	r2, r0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2108      	movs	r1, #8
 8009036:	4618      	mov	r0, r3
 8009038:	f001 f8ab 	bl	800a192 <SDIO_GetResponse>
 800903c:	4602      	mov	r2, r0
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	210c      	movs	r1, #12
 8009048:	4618      	mov	r0, r3
 800904a:	f001 f8a2 	bl	800a192 <SDIO_GetResponse>
 800904e:	4602      	mov	r2, r0
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2104      	movs	r1, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f001 f899 	bl	800a192 <SDIO_GetResponse>
 8009060:	4603      	mov	r3, r0
 8009062:	0d1a      	lsrs	r2, r3, #20
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009068:	f107 0310 	add.w	r3, r7, #16
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fd6e 	bl	8008b50 <HAL_SD_GetCardCSD>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800907a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800907e:	e020      	b.n	80090c2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009088:	041b      	lsls	r3, r3, #16
 800908a:	f04f 0400 	mov.w	r4, #0
 800908e:	461a      	mov	r2, r3
 8009090:	4623      	mov	r3, r4
 8009092:	4608      	mov	r0, r1
 8009094:	f001 f988 	bl	800a3a8 <SDMMC_CmdSelDesel>
 8009098:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800909a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <SD_InitCard+0x174>
  {
    return errorstate;
 80090a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a2:	e00e      	b.n	80090c2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681d      	ldr	r5, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	466c      	mov	r4, sp
 80090ac:	f103 0210 	add.w	r2, r3, #16
 80090b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80090b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090b6:	3304      	adds	r3, #4
 80090b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 ffcc 	bl	800a058 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3740      	adds	r7, #64	; 0x40
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080090cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b086      	sub	sp, #24
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	2300      	movs	r3, #0
 80090de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 f982 	bl	800a3ee <SDMMC_CmdGoIdleState>
 80090ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	e072      	b.n	80091dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 f995 	bl	800a42a <SDMMC_CmdOperCond>
 8009100:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00d      	beq.n	8009124 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4618      	mov	r0, r3
 8009114:	f001 f96b 	bl	800a3ee <SDMMC_CmdGoIdleState>
 8009118:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	e05b      	b.n	80091dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800912e:	2b01      	cmp	r3, #1
 8009130:	d137      	bne.n	80091a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f001 f995 	bl	800a468 <SDMMC_CmdAppCommand>
 800913e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d02d      	beq.n	80091a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800914a:	e047      	b.n	80091dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f001 f988 	bl	800a468 <SDMMC_CmdAppCommand>
 8009158:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <SD_PowerON+0x98>
    {
      return errorstate;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	e03b      	b.n	80091dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	491e      	ldr	r1, [pc, #120]	; (80091e4 <SD_PowerON+0x118>)
 800916a:	4618      	mov	r0, r3
 800916c:	f001 f99e 	bl	800a4ac <SDMMC_CmdAppOperCommand>
 8009170:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800917c:	e02e      	b.n	80091dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2100      	movs	r1, #0
 8009184:	4618      	mov	r0, r3
 8009186:	f001 f804 	bl	800a192 <SDIO_GetResponse>
 800918a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	0fdb      	lsrs	r3, r3, #31
 8009190:	2b01      	cmp	r3, #1
 8009192:	d101      	bne.n	8009198 <SD_PowerON+0xcc>
 8009194:	2301      	movs	r3, #1
 8009196:	e000      	b.n	800919a <SD_PowerON+0xce>
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]

    count++;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	3301      	adds	r3, #1
 80091a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d802      	bhi.n	80091b2 <SD_PowerON+0xe6>
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0cc      	beq.n	800914c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d902      	bls.n	80091c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80091bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091c0:	e00c      	b.n	80091dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	645a      	str	r2, [r3, #68]	; 0x44
 80091d2:	e002      	b.n	80091da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	c1100000 	.word	0xc1100000

080091e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80091f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091fc:	e018      	b.n	8009230 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f001 f9cf 	bl	800a5ae <SDMMC_CmdSendStatus>
 8009210:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	e009      	b.n	8009230 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2100      	movs	r1, #0
 8009222:	4618      	mov	r0, r3
 8009224:	f000 ffb5 	bl	800a192 <SDIO_GetResponse>
 8009228:	4602      	mov	r2, r0
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e01d      	b.n	8009286 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7fa fd5c 	bl	8003d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3304      	adds	r3, #4
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f000 fb4e 	bl	8009918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800928e:	b480      	push	{r7}
 8009290:	b085      	sub	sp, #20
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2202      	movs	r2, #2
 800929a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	f003 0307 	and.w	r3, r3, #7
 80092a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b06      	cmp	r3, #6
 80092ae:	d007      	beq.n	80092c0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0201 	orr.w	r2, r2, #1
 80092be:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e01d      	b.n	8009324 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d106      	bne.n	8009302 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f815 	bl	800932c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f000 faff 	bl	8009918 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2201      	movs	r2, #1
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fdca 	bl	8009eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a15      	ldr	r2, [pc, #84]	; (80093b4 <HAL_TIM_PWM_Start+0x74>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d004      	beq.n	800936c <HAL_TIM_PWM_Start+0x2c>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a14      	ldr	r2, [pc, #80]	; (80093b8 <HAL_TIM_PWM_Start+0x78>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d101      	bne.n	8009370 <HAL_TIM_PWM_Start+0x30>
 800936c:	2301      	movs	r3, #1
 800936e:	e000      	b.n	8009372 <HAL_TIM_PWM_Start+0x32>
 8009370:	2300      	movs	r3, #0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d007      	beq.n	8009386 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f003 0307 	and.w	r3, r3, #7
 8009390:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b06      	cmp	r3, #6
 8009396:	d007      	beq.n	80093a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0201 	orr.w	r2, r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	40010000 	.word	0x40010000
 80093b8:	40010400 	.word	0x40010400

080093bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d122      	bne.n	8009418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d11b      	bne.n	8009418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0202 	mvn.w	r2, #2
 80093e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	f003 0303 	and.w	r3, r3, #3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa6b 	bl	80098da <HAL_TIM_IC_CaptureCallback>
 8009404:	e005      	b.n	8009412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fa5d 	bl	80098c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 fa6e 	bl	80098ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b04      	cmp	r3, #4
 8009424:	d122      	bne.n	800946c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b04      	cmp	r3, #4
 8009432:	d11b      	bne.n	800946c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0204 	mvn.w	r2, #4
 800943c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2202      	movs	r2, #2
 8009442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa41 	bl	80098da <HAL_TIM_IC_CaptureCallback>
 8009458:	e005      	b.n	8009466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fa33 	bl	80098c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa44 	bl	80098ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0308 	and.w	r3, r3, #8
 8009476:	2b08      	cmp	r3, #8
 8009478:	d122      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b08      	cmp	r3, #8
 8009486:	d11b      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0208 	mvn.w	r2, #8
 8009490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2204      	movs	r2, #4
 8009496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	69db      	ldr	r3, [r3, #28]
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fa17 	bl	80098da <HAL_TIM_IC_CaptureCallback>
 80094ac:	e005      	b.n	80094ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fa09 	bl	80098c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fa1a 	bl	80098ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	2b10      	cmp	r3, #16
 80094cc:	d122      	bne.n	8009514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b10      	cmp	r3, #16
 80094da:	d11b      	bne.n	8009514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f06f 0210 	mvn.w	r2, #16
 80094e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2208      	movs	r2, #8
 80094ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f9ed 	bl	80098da <HAL_TIM_IC_CaptureCallback>
 8009500:	e005      	b.n	800950e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9df 	bl	80098c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f9f0 	bl	80098ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b01      	cmp	r3, #1
 8009520:	d10e      	bne.n	8009540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b01      	cmp	r3, #1
 800952e:	d107      	bne.n	8009540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0201 	mvn.w	r2, #1
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fb f978 	bl	8004830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954a:	2b80      	cmp	r3, #128	; 0x80
 800954c:	d10e      	bne.n	800956c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009558:	2b80      	cmp	r3, #128	; 0x80
 800955a:	d107      	bne.n	800956c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fd6c 	bl	800a044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009576:	2b40      	cmp	r3, #64	; 0x40
 8009578:	d10e      	bne.n	8009598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009584:	2b40      	cmp	r3, #64	; 0x40
 8009586:	d107      	bne.n	8009598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f9b5 	bl	8009902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d10e      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d107      	bne.n	80095c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f06f 0220 	mvn.w	r2, #32
 80095bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fd36 	bl	800a030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d101      	bne.n	80095e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80095e2:	2302      	movs	r3, #2
 80095e4:	e0b4      	b.n	8009750 <HAL_TIM_PWM_ConfigChannel+0x184>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2202      	movs	r2, #2
 80095f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2b0c      	cmp	r3, #12
 80095fa:	f200 809f 	bhi.w	800973c <HAL_TIM_PWM_ConfigChannel+0x170>
 80095fe:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009604:	08009639 	.word	0x08009639
 8009608:	0800973d 	.word	0x0800973d
 800960c:	0800973d 	.word	0x0800973d
 8009610:	0800973d 	.word	0x0800973d
 8009614:	08009679 	.word	0x08009679
 8009618:	0800973d 	.word	0x0800973d
 800961c:	0800973d 	.word	0x0800973d
 8009620:	0800973d 	.word	0x0800973d
 8009624:	080096bb 	.word	0x080096bb
 8009628:	0800973d 	.word	0x0800973d
 800962c:	0800973d 	.word	0x0800973d
 8009630:	0800973d 	.word	0x0800973d
 8009634:	080096fb 	.word	0x080096fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68b9      	ldr	r1, [r7, #8]
 800963e:	4618      	mov	r0, r3
 8009640:	f000 fa0a 	bl	8009a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	699a      	ldr	r2, [r3, #24]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0208 	orr.w	r2, r2, #8
 8009652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 0204 	bic.w	r2, r2, #4
 8009662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6999      	ldr	r1, [r3, #24]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	691a      	ldr	r2, [r3, #16]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	619a      	str	r2, [r3, #24]
      break;
 8009676:	e062      	b.n	800973e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68b9      	ldr	r1, [r7, #8]
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fa5a 	bl	8009b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699a      	ldr	r2, [r3, #24]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6999      	ldr	r1, [r3, #24]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	021a      	lsls	r2, r3, #8
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	619a      	str	r2, [r3, #24]
      break;
 80096b8:	e041      	b.n	800973e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68b9      	ldr	r1, [r7, #8]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 faaf 	bl	8009c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69da      	ldr	r2, [r3, #28]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0208 	orr.w	r2, r2, #8
 80096d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69da      	ldr	r2, [r3, #28]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0204 	bic.w	r2, r2, #4
 80096e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69d9      	ldr	r1, [r3, #28]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	691a      	ldr	r2, [r3, #16]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	61da      	str	r2, [r3, #28]
      break;
 80096f8:	e021      	b.n	800973e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fb03 	bl	8009d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69da      	ldr	r2, [r3, #28]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69da      	ldr	r2, [r3, #28]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69d9      	ldr	r1, [r3, #28]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	021a      	lsls	r2, r3, #8
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	61da      	str	r2, [r3, #28]
      break;
 800973a:	e000      	b.n	800973e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800973c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_TIM_ConfigClockSource+0x18>
 800976c:	2302      	movs	r3, #2
 800976e:	e0a6      	b.n	80098be <HAL_TIM_ConfigClockSource+0x166>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800978e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009796:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b40      	cmp	r3, #64	; 0x40
 80097a6:	d067      	beq.n	8009878 <HAL_TIM_ConfigClockSource+0x120>
 80097a8:	2b40      	cmp	r3, #64	; 0x40
 80097aa:	d80b      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x6c>
 80097ac:	2b10      	cmp	r3, #16
 80097ae:	d073      	beq.n	8009898 <HAL_TIM_ConfigClockSource+0x140>
 80097b0:	2b10      	cmp	r3, #16
 80097b2:	d802      	bhi.n	80097ba <HAL_TIM_ConfigClockSource+0x62>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d06f      	beq.n	8009898 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80097b8:	e078      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80097ba:	2b20      	cmp	r3, #32
 80097bc:	d06c      	beq.n	8009898 <HAL_TIM_ConfigClockSource+0x140>
 80097be:	2b30      	cmp	r3, #48	; 0x30
 80097c0:	d06a      	beq.n	8009898 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80097c2:	e073      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80097c4:	2b70      	cmp	r3, #112	; 0x70
 80097c6:	d00d      	beq.n	80097e4 <HAL_TIM_ConfigClockSource+0x8c>
 80097c8:	2b70      	cmp	r3, #112	; 0x70
 80097ca:	d804      	bhi.n	80097d6 <HAL_TIM_ConfigClockSource+0x7e>
 80097cc:	2b50      	cmp	r3, #80	; 0x50
 80097ce:	d033      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0xe0>
 80097d0:	2b60      	cmp	r3, #96	; 0x60
 80097d2:	d041      	beq.n	8009858 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80097d4:	e06a      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80097d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097da:	d066      	beq.n	80098aa <HAL_TIM_ConfigClockSource+0x152>
 80097dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e0:	d017      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80097e2:	e063      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6818      	ldr	r0, [r3, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	6899      	ldr	r1, [r3, #8]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f000 fb5a 	bl	8009eac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009806:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	609a      	str	r2, [r3, #8]
      break;
 8009810:	e04c      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	6899      	ldr	r1, [r3, #8]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f000 fb43 	bl	8009eac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689a      	ldr	r2, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009834:	609a      	str	r2, [r3, #8]
      break;
 8009836:	e039      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	6859      	ldr	r1, [r3, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	461a      	mov	r2, r3
 8009846:	f000 fab7 	bl	8009db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2150      	movs	r1, #80	; 0x50
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fb10 	bl	8009e76 <TIM_ITRx_SetConfig>
      break;
 8009856:	e029      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	6859      	ldr	r1, [r3, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	461a      	mov	r2, r3
 8009866:	f000 fad6 	bl	8009e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2160      	movs	r1, #96	; 0x60
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fb00 	bl	8009e76 <TIM_ITRx_SetConfig>
      break;
 8009876:	e019      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6818      	ldr	r0, [r3, #0]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	6859      	ldr	r1, [r3, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	461a      	mov	r2, r3
 8009886:	f000 fa97 	bl	8009db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2140      	movs	r1, #64	; 0x40
 8009890:	4618      	mov	r0, r3
 8009892:	f000 faf0 	bl	8009e76 <TIM_ITRx_SetConfig>
      break;
 8009896:	e009      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4619      	mov	r1, r3
 80098a2:	4610      	mov	r0, r2
 80098a4:	f000 fae7 	bl	8009e76 <TIM_ITRx_SetConfig>
      break;
 80098a8:	e000      	b.n	80098ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80098aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098ce:	bf00      	nop
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
	...

08009918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a40      	ldr	r2, [pc, #256]	; (8009a2c <TIM_Base_SetConfig+0x114>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d013      	beq.n	8009958 <TIM_Base_SetConfig+0x40>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009936:	d00f      	beq.n	8009958 <TIM_Base_SetConfig+0x40>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a3d      	ldr	r2, [pc, #244]	; (8009a30 <TIM_Base_SetConfig+0x118>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d00b      	beq.n	8009958 <TIM_Base_SetConfig+0x40>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a3c      	ldr	r2, [pc, #240]	; (8009a34 <TIM_Base_SetConfig+0x11c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d007      	beq.n	8009958 <TIM_Base_SetConfig+0x40>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a3b      	ldr	r2, [pc, #236]	; (8009a38 <TIM_Base_SetConfig+0x120>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d003      	beq.n	8009958 <TIM_Base_SetConfig+0x40>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a3a      	ldr	r2, [pc, #232]	; (8009a3c <TIM_Base_SetConfig+0x124>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d108      	bne.n	800996a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a2f      	ldr	r2, [pc, #188]	; (8009a2c <TIM_Base_SetConfig+0x114>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d02b      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009978:	d027      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a2c      	ldr	r2, [pc, #176]	; (8009a30 <TIM_Base_SetConfig+0x118>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d023      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a2b      	ldr	r2, [pc, #172]	; (8009a34 <TIM_Base_SetConfig+0x11c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d01f      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a2a      	ldr	r2, [pc, #168]	; (8009a38 <TIM_Base_SetConfig+0x120>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d01b      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a29      	ldr	r2, [pc, #164]	; (8009a3c <TIM_Base_SetConfig+0x124>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d017      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a28      	ldr	r2, [pc, #160]	; (8009a40 <TIM_Base_SetConfig+0x128>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d013      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a27      	ldr	r2, [pc, #156]	; (8009a44 <TIM_Base_SetConfig+0x12c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d00f      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a26      	ldr	r2, [pc, #152]	; (8009a48 <TIM_Base_SetConfig+0x130>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00b      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a25      	ldr	r2, [pc, #148]	; (8009a4c <TIM_Base_SetConfig+0x134>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d007      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a24      	ldr	r2, [pc, #144]	; (8009a50 <TIM_Base_SetConfig+0x138>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <TIM_Base_SetConfig+0xb2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a23      	ldr	r2, [pc, #140]	; (8009a54 <TIM_Base_SetConfig+0x13c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d108      	bne.n	80099dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	4313      	orrs	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <TIM_Base_SetConfig+0x114>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_Base_SetConfig+0xf8>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a0c      	ldr	r2, [pc, #48]	; (8009a3c <TIM_Base_SetConfig+0x124>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d103      	bne.n	8009a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	615a      	str	r2, [r3, #20]
}
 8009a1e:	bf00      	nop
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	40010000 	.word	0x40010000
 8009a30:	40000400 	.word	0x40000400
 8009a34:	40000800 	.word	0x40000800
 8009a38:	40000c00 	.word	0x40000c00
 8009a3c:	40010400 	.word	0x40010400
 8009a40:	40014000 	.word	0x40014000
 8009a44:	40014400 	.word	0x40014400
 8009a48:	40014800 	.word	0x40014800
 8009a4c:	40001800 	.word	0x40001800
 8009a50:	40001c00 	.word	0x40001c00
 8009a54:	40002000 	.word	0x40002000

08009a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b087      	sub	sp, #28
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f023 0201 	bic.w	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f023 0302 	bic.w	r3, r3, #2
 8009aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a20      	ldr	r2, [pc, #128]	; (8009b30 <TIM_OC1_SetConfig+0xd8>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d003      	beq.n	8009abc <TIM_OC1_SetConfig+0x64>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a1f      	ldr	r2, [pc, #124]	; (8009b34 <TIM_OC1_SetConfig+0xdc>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d10c      	bne.n	8009ad6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	f023 0308 	bic.w	r3, r3, #8
 8009ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f023 0304 	bic.w	r3, r3, #4
 8009ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a15      	ldr	r2, [pc, #84]	; (8009b30 <TIM_OC1_SetConfig+0xd8>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d003      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x8e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a14      	ldr	r2, [pc, #80]	; (8009b34 <TIM_OC1_SetConfig+0xdc>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d111      	bne.n	8009b0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	621a      	str	r2, [r3, #32]
}
 8009b24:	bf00      	nop
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40010400 	.word	0x40010400

08009b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b087      	sub	sp, #28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	f023 0210 	bic.w	r2, r3, #16
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	021b      	lsls	r3, r3, #8
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f023 0320 	bic.w	r3, r3, #32
 8009b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a22      	ldr	r2, [pc, #136]	; (8009c1c <TIM_OC2_SetConfig+0xe4>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_OC2_SetConfig+0x68>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a21      	ldr	r2, [pc, #132]	; (8009c20 <TIM_OC2_SetConfig+0xe8>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10d      	bne.n	8009bbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a17      	ldr	r2, [pc, #92]	; (8009c1c <TIM_OC2_SetConfig+0xe4>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d003      	beq.n	8009bcc <TIM_OC2_SetConfig+0x94>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a16      	ldr	r2, [pc, #88]	; (8009c20 <TIM_OC2_SetConfig+0xe8>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d113      	bne.n	8009bf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	693a      	ldr	r2, [r7, #16]
 8009bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	621a      	str	r2, [r3, #32]
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	40010000 	.word	0x40010000
 8009c20:	40010400 	.word	0x40010400

08009c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	021b      	lsls	r3, r3, #8
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a21      	ldr	r2, [pc, #132]	; (8009d04 <TIM_OC3_SetConfig+0xe0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d003      	beq.n	8009c8a <TIM_OC3_SetConfig+0x66>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a20      	ldr	r2, [pc, #128]	; (8009d08 <TIM_OC3_SetConfig+0xe4>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d10d      	bne.n	8009ca6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	021b      	lsls	r3, r3, #8
 8009c98:	697a      	ldr	r2, [r7, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <TIM_OC3_SetConfig+0xe0>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <TIM_OC3_SetConfig+0x92>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a15      	ldr	r2, [pc, #84]	; (8009d08 <TIM_OC3_SetConfig+0xe4>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d113      	bne.n	8009cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	011b      	lsls	r3, r3, #4
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	621a      	str	r2, [r3, #32]
}
 8009cf8:	bf00      	nop
 8009cfa:	371c      	adds	r7, #28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	40010000 	.word	0x40010000
 8009d08:	40010400 	.word	0x40010400

08009d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	031b      	lsls	r3, r3, #12
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a12      	ldr	r2, [pc, #72]	; (8009db0 <TIM_OC4_SetConfig+0xa4>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d003      	beq.n	8009d74 <TIM_OC4_SetConfig+0x68>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a11      	ldr	r2, [pc, #68]	; (8009db4 <TIM_OC4_SetConfig+0xa8>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d109      	bne.n	8009d88 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	695b      	ldr	r3, [r3, #20]
 8009d80:	019b      	lsls	r3, r3, #6
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	621a      	str	r2, [r3, #32]
}
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40010400 	.word	0x40010400

08009db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f023 0201 	bic.w	r2, r3, #1
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 030a 	bic.w	r3, r3, #10
 8009df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	621a      	str	r2, [r3, #32]
}
 8009e0a:	bf00      	nop
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b087      	sub	sp, #28
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	f023 0210 	bic.w	r2, r3, #16
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	031b      	lsls	r3, r3, #12
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	621a      	str	r2, [r3, #32]
}
 8009e6a:	bf00      	nop
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	f043 0307 	orr.w	r3, r3, #7
 8009e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	609a      	str	r2, [r3, #8]
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	021a      	lsls	r2, r3, #8
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	697a      	ldr	r2, [r7, #20]
 8009ede:	609a      	str	r2, [r3, #8]
}
 8009ee0:	bf00      	nop
 8009ee2:	371c      	adds	r7, #28
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	f003 031f 	and.w	r3, r3, #31
 8009efe:	2201      	movs	r2, #1
 8009f00:	fa02 f303 	lsl.w	r3, r2, r3
 8009f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6a1a      	ldr	r2, [r3, #32]
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	43db      	mvns	r3, r3
 8009f0e:	401a      	ands	r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a1a      	ldr	r2, [r3, #32]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f003 031f 	and.w	r3, r3, #31
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	fa01 f303 	lsl.w	r3, r1, r3
 8009f24:	431a      	orrs	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	621a      	str	r2, [r3, #32]
}
 8009f2a:	bf00      	nop
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
	...

08009f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d101      	bne.n	8009f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	e05a      	b.n	800a006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a21      	ldr	r2, [pc, #132]	; (800a014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d022      	beq.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f9c:	d01d      	beq.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1d      	ldr	r2, [pc, #116]	; (800a018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d018      	beq.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a1b      	ldr	r2, [pc, #108]	; (800a01c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d013      	beq.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a1a      	ldr	r2, [pc, #104]	; (800a020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d00e      	beq.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a18      	ldr	r2, [pc, #96]	; (800a024 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d009      	beq.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a17      	ldr	r2, [pc, #92]	; (800a028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d004      	beq.n	8009fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a15      	ldr	r2, [pc, #84]	; (800a02c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d10c      	bne.n	8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	40010000 	.word	0x40010000
 800a018:	40000400 	.word	0x40000400
 800a01c:	40000800 	.word	0x40000800
 800a020:	40000c00 	.word	0x40000c00
 800a024:	40010400 	.word	0x40010400
 800a028:	40014000 	.word	0x40014000
 800a02c:	40001800 	.word	0x40001800

0800a030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a058:	b084      	sub	sp, #16
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	f107 001c 	add.w	r0, r7, #28
 800a066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a06e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a070:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a072:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a076:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a078:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a07a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a07e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a082:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	4313      	orrs	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a092:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	b004      	add	sp, #16
 800a0ac:	4770      	bx	lr

0800a0ae <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a0f8:	2002      	movs	r0, #2
 800a0fa:	f7fa fd6b 	bl	8004bd4 <HAL_Delay>
  
  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 0303 	and.w	r3, r3, #3
}
 800a118:	4618      	mov	r0, r3
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a142:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a148:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a14e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a15e:	f023 030f 	bic.w	r3, r3, #15
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	b2db      	uxtb	r3, r3
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3314      	adds	r3, #20
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
}  
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1de:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a1e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a1ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a202:	2300      	movs	r3, #0

}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a21e:	2310      	movs	r3, #16
 800a220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a222:	2340      	movs	r3, #64	; 0x40
 800a224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a226:	2300      	movs	r3, #0
 800a228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a22e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a230:	f107 0308 	add.w	r3, r7, #8
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7ff ff74 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a240:	2110      	movs	r1, #16
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f9fe 	bl	800a644 <SDMMC_GetCmdResp1>
 800a248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a24a:	69fb      	ldr	r3, [r7, #28]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3720      	adds	r7, #32
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b088      	sub	sp, #32
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a262:	2311      	movs	r3, #17
 800a264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a272:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a274:	f107 0308 	add.w	r3, r7, #8
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff ff52 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a280:	f241 3288 	movw	r2, #5000	; 0x1388
 800a284:	2111      	movs	r1, #17
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f9dc 	bl	800a644 <SDMMC_GetCmdResp1>
 800a28c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a28e:	69fb      	ldr	r3, [r7, #28]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3720      	adds	r7, #32
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a2a6:	2312      	movs	r3, #18
 800a2a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2aa:	2340      	movs	r3, #64	; 0x40
 800a2ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2b8:	f107 0308 	add.w	r3, r7, #8
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7ff ff30 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c8:	2112      	movs	r1, #18
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f9ba 	bl	800a644 <SDMMC_GetCmdResp1>
 800a2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d2:	69fb      	ldr	r3, [r7, #28]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3720      	adds	r7, #32
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a2ea:	2318      	movs	r3, #24
 800a2ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2ee:	2340      	movs	r3, #64	; 0x40
 800a2f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2fc:	f107 0308 	add.w	r3, r7, #8
 800a300:	4619      	mov	r1, r3
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7ff ff0e 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a308:	f241 3288 	movw	r2, #5000	; 0x1388
 800a30c:	2118      	movs	r1, #24
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f998 	bl	800a644 <SDMMC_GetCmdResp1>
 800a314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a316:	69fb      	ldr	r3, [r7, #28]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3720      	adds	r7, #32
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a32e:	2319      	movs	r3, #25
 800a330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a332:	2340      	movs	r3, #64	; 0x40
 800a334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a336:	2300      	movs	r3, #0
 800a338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a33e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a340:	f107 0308 	add.w	r3, r7, #8
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff feec 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a34c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a350:	2119      	movs	r1, #25
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f976 	bl	800a644 <SDMMC_GetCmdResp1>
 800a358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a35a:	69fb      	ldr	r3, [r7, #28]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3720      	adds	r7, #32
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a370:	230c      	movs	r3, #12
 800a372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a374:	2340      	movs	r3, #64	; 0x40
 800a376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a378:	2300      	movs	r3, #0
 800a37a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a380:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a382:	f107 0308 	add.w	r3, r7, #8
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f7ff fecb 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a38e:	4a05      	ldr	r2, [pc, #20]	; (800a3a4 <SDMMC_CmdStopTransfer+0x40>)
 800a390:	210c      	movs	r1, #12
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f956 	bl	800a644 <SDMMC_GetCmdResp1>
 800a398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a39a:	69fb      	ldr	r3, [r7, #28]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3720      	adds	r7, #32
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	05f5e100 	.word	0x05f5e100

0800a3a8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a3b8:	2307      	movs	r3, #7
 800a3ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3bc:	2340      	movs	r3, #64	; 0x40
 800a3be:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3ca:	f107 0310 	add.w	r3, r7, #16
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7ff fea7 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a3d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3da:	2107      	movs	r1, #7
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 f931 	bl	800a644 <SDMMC_GetCmdResp1>
 800a3e2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3728      	adds	r7, #40	; 0x28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b088      	sub	sp, #32
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a3fe:	2300      	movs	r3, #0
 800a400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a402:	2300      	movs	r3, #0
 800a404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a40a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a40c:	f107 0308 	add.w	r3, r7, #8
 800a410:	4619      	mov	r1, r3
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f7ff fe86 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f8eb 	bl	800a5f4 <SDMMC_GetCmdError>
 800a41e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a420:	69fb      	ldr	r3, [r7, #28]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3720      	adds	r7, #32
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b088      	sub	sp, #32
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a432:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a438:	2308      	movs	r3, #8
 800a43a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a43c:	2340      	movs	r3, #64	; 0x40
 800a43e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a448:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a44a:	f107 0308 	add.w	r3, r7, #8
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff fe67 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 fad4 	bl	800aa04 <SDMMC_GetCmdResp7>
 800a45c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a45e:	69fb      	ldr	r3, [r7, #28]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3720      	adds	r7, #32
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b088      	sub	sp, #32
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a476:	2337      	movs	r3, #55	; 0x37
 800a478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a47a:	2340      	movs	r3, #64	; 0x40
 800a47c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a486:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a488:	f107 0308 	add.w	r3, r7, #8
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff fe48 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a494:	f241 3288 	movw	r2, #5000	; 0x1388
 800a498:	2137      	movs	r1, #55	; 0x37
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f8d2 	bl	800a644 <SDMMC_GetCmdResp1>
 800a4a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a2:	69fb      	ldr	r3, [r7, #28]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3720      	adds	r7, #32
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b088      	sub	sp, #32
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a4c2:	2329      	movs	r3, #41	; 0x29
 800a4c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4c6:	2340      	movs	r3, #64	; 0x40
 800a4c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4d4:	f107 0308 	add.w	r3, r7, #8
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fe22 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f9e1 	bl	800a8a8 <SDMMC_GetCmdResp3>
 800a4e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4e8:	69fb      	ldr	r3, [r7, #28]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3720      	adds	r7, #32
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b088      	sub	sp, #32
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a4fe:	2302      	movs	r3, #2
 800a500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a502:	23c0      	movs	r3, #192	; 0xc0
 800a504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a50e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a510:	f107 0308 	add.w	r3, r7, #8
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fe04 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f97d 	bl	800a81c <SDMMC_GetCmdResp2>
 800a522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a524:	69fb      	ldr	r3, [r7, #28]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b088      	sub	sp, #32
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a53c:	2309      	movs	r3, #9
 800a53e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a540:	23c0      	movs	r3, #192	; 0xc0
 800a542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff fde5 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f95e 	bl	800a81c <SDMMC_GetCmdResp2>
 800a560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a562:	69fb      	ldr	r3, [r7, #28]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3720      	adds	r7, #32
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b088      	sub	sp, #32
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a576:	2300      	movs	r3, #0
 800a578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a57a:	2303      	movs	r3, #3
 800a57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a57e:	2340      	movs	r3, #64	; 0x40
 800a580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a58a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a58c:	f107 0308 	add.w	r3, r7, #8
 800a590:	4619      	mov	r1, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f7ff fdc6 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	2103      	movs	r1, #3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f9bd 	bl	800a91c <SDMMC_GetCmdResp6>
 800a5a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3720      	adds	r7, #32
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b088      	sub	sp, #32
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a5bc:	230d      	movs	r3, #13
 800a5be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5c0:	2340      	movs	r3, #64	; 0x40
 800a5c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5ce:	f107 0308 	add.w	r3, r7, #8
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7ff fda5 	bl	800a124 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a5da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5de:	210d      	movs	r1, #13
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f82f 	bl	800a644 <SDMMC_GetCmdResp1>
 800a5e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3720      	adds	r7, #32
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a5f4:	b490      	push	{r4, r7}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5fc:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <SDMMC_GetCmdError+0x48>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a0f      	ldr	r2, [pc, #60]	; (800a640 <SDMMC_GetCmdError+0x4c>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	0a5b      	lsrs	r3, r3, #9
 800a608:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a610:	4623      	mov	r3, r4
 800a612:	1e5c      	subs	r4, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a61c:	e009      	b.n	800a632 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0f2      	beq.n	800a610 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	22c5      	movs	r2, #197	; 0xc5
 800a62e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bc90      	pop	{r4, r7}
 800a63a:	4770      	bx	lr
 800a63c:	20000004 	.word	0x20000004
 800a640:	10624dd3 	.word	0x10624dd3

0800a644 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	460b      	mov	r3, r1
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a652:	4b6f      	ldr	r3, [pc, #444]	; (800a810 <SDMMC_GetCmdResp1+0x1cc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a6f      	ldr	r2, [pc, #444]	; (800a814 <SDMMC_GetCmdResp1+0x1d0>)
 800a658:	fba2 2303 	umull	r2, r3, r2, r3
 800a65c:	0a5b      	lsrs	r3, r3, #9
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a664:	4623      	mov	r3, r4
 800a666:	1e5c      	subs	r4, r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d102      	bne.n	800a672 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a66c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a670:	e0c9      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a676:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d0f0      	beq.n	800a664 <SDMMC_GetCmdResp1+0x20>
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1eb      	bne.n	800a664 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	d004      	beq.n	800a6a2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2204      	movs	r2, #4
 800a69c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a69e:	2304      	movs	r3, #4
 800a6a0:	e0b1      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a6:	f003 0301 	and.w	r3, r3, #1
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e0a6      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	22c5      	movs	r2, #197	; 0xc5
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7ff fd5a 	bl	800a178 <SDIO_GetCommandResponse>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	7afb      	ldrb	r3, [r7, #11]
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d001      	beq.n	800a6d2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e099      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff fd5c 	bl	800a192 <SDIO_GetResponse>
 800a6da:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a6dc:	693a      	ldr	r2, [r7, #16]
 800a6de:	4b4e      	ldr	r3, [pc, #312]	; (800a818 <SDMMC_GetCmdResp1+0x1d4>)
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e08d      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	da02      	bge.n	800a6f6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a6f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a6f4:	e087      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a700:	2340      	movs	r3, #64	; 0x40
 800a702:	e080      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a70e:	2380      	movs	r3, #128	; 0x80
 800a710:	e079      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a71c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a720:	e071      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a72c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a730:	e069      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a740:	e061      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a74c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a750:	e059      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a75c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a760:	e051      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a76c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a770:	e049      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a77c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a780:	e041      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a78c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a790:	e039      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a79c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a7a0:	e031      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a7ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a7b0:	e029      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a7bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a7c0:	e021      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a7cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a7d0:	e019      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a7dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7e0:	e011      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a7ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a7f0:	e009      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f003 0308 	and.w	r3, r3, #8
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a7fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a800:	e001      	b.n	800a806 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a806:	4618      	mov	r0, r3
 800a808:	371c      	adds	r7, #28
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd90      	pop	{r4, r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000004 	.word	0x20000004
 800a814:	10624dd3 	.word	0x10624dd3
 800a818:	fdffe008 	.word	0xfdffe008

0800a81c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a81c:	b490      	push	{r4, r7}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a824:	4b1e      	ldr	r3, [pc, #120]	; (800a8a0 <SDMMC_GetCmdResp2+0x84>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a1e      	ldr	r2, [pc, #120]	; (800a8a4 <SDMMC_GetCmdResp2+0x88>)
 800a82a:	fba2 2303 	umull	r2, r3, r2, r3
 800a82e:	0a5b      	lsrs	r3, r3, #9
 800a830:	f241 3288 	movw	r2, #5000	; 0x1388
 800a834:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a838:	4623      	mov	r3, r4
 800a83a:	1e5c      	subs	r4, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a844:	e026      	b.n	800a894 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a84a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0f0      	beq.n	800a838 <SDMMC_GetCmdResp2+0x1c>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1eb      	bne.n	800a838 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a864:	f003 0304 	and.w	r3, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d004      	beq.n	800a876 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2204      	movs	r2, #4
 800a870:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a872:	2304      	movs	r3, #4
 800a874:	e00e      	b.n	800a894 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d004      	beq.n	800a88c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a888:	2301      	movs	r3, #1
 800a88a:	e003      	b.n	800a894 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	22c5      	movs	r2, #197	; 0xc5
 800a890:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bc90      	pop	{r4, r7}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20000004 	.word	0x20000004
 800a8a4:	10624dd3 	.word	0x10624dd3

0800a8a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a8a8:	b490      	push	{r4, r7}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8b0:	4b18      	ldr	r3, [pc, #96]	; (800a914 <SDMMC_GetCmdResp3+0x6c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a18      	ldr	r2, [pc, #96]	; (800a918 <SDMMC_GetCmdResp3+0x70>)
 800a8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ba:	0a5b      	lsrs	r3, r3, #9
 800a8bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a8c4:	4623      	mov	r3, r4
 800a8c6:	1e5c      	subs	r4, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d102      	bne.n	800a8d2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8d0:	e01b      	b.n	800a90a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8d6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0f0      	beq.n	800a8c4 <SDMMC_GetCmdResp3+0x1c>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1eb      	bne.n	800a8c4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f0:	f003 0304 	and.w	r3, r3, #4
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2204      	movs	r2, #4
 800a8fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8fe:	2304      	movs	r3, #4
 800a900:	e003      	b.n	800a90a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	22c5      	movs	r2, #197	; 0xc5
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bc90      	pop	{r4, r7}
 800a912:	4770      	bx	lr
 800a914:	20000004 	.word	0x20000004
 800a918:	10624dd3 	.word	0x10624dd3

0800a91c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a91c:	b590      	push	{r4, r7, lr}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	460b      	mov	r3, r1
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a92a:	4b34      	ldr	r3, [pc, #208]	; (800a9fc <SDMMC_GetCmdResp6+0xe0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a34      	ldr	r2, [pc, #208]	; (800aa00 <SDMMC_GetCmdResp6+0xe4>)
 800a930:	fba2 2303 	umull	r2, r3, r2, r3
 800a934:	0a5b      	lsrs	r3, r3, #9
 800a936:	f241 3288 	movw	r2, #5000	; 0x1388
 800a93a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a93e:	4623      	mov	r3, r4
 800a940:	1e5c      	subs	r4, r3, #1
 800a942:	2b00      	cmp	r3, #0
 800a944:	d102      	bne.n	800a94c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a946:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a94a:	e052      	b.n	800a9f2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a950:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d0f0      	beq.n	800a93e <SDMMC_GetCmdResp6+0x22>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1eb      	bne.n	800a93e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d004      	beq.n	800a97c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2204      	movs	r2, #4
 800a976:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a978:	2304      	movs	r3, #4
 800a97a:	e03a      	b.n	800a9f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d004      	beq.n	800a992 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2201      	movs	r2, #1
 800a98c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a98e:	2301      	movs	r3, #1
 800a990:	e02f      	b.n	800a9f2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f7ff fbf0 	bl	800a178 <SDIO_GetCommandResponse>
 800a998:	4603      	mov	r3, r0
 800a99a:	461a      	mov	r2, r3
 800a99c:	7afb      	ldrb	r3, [r7, #11]
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d001      	beq.n	800a9a6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e025      	b.n	800a9f2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	22c5      	movs	r2, #197	; 0xc5
 800a9aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff fbef 	bl	800a192 <SDIO_GetResponse>
 800a9b4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	0c1b      	lsrs	r3, r3, #16
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e011      	b.n	800a9f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a9dc:	e009      	b.n	800a9f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9ec:	e001      	b.n	800a9f2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd90      	pop	{r4, r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20000004 	.word	0x20000004
 800aa00:	10624dd3 	.word	0x10624dd3

0800aa04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aa04:	b490      	push	{r4, r7}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa0c:	4b21      	ldr	r3, [pc, #132]	; (800aa94 <SDMMC_GetCmdResp7+0x90>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a21      	ldr	r2, [pc, #132]	; (800aa98 <SDMMC_GetCmdResp7+0x94>)
 800aa12:	fba2 2303 	umull	r2, r3, r2, r3
 800aa16:	0a5b      	lsrs	r3, r3, #9
 800aa18:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aa20:	4623      	mov	r3, r4
 800aa22:	1e5c      	subs	r4, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d102      	bne.n	800aa2e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa2c:	e02c      	b.n	800aa88 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa32:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0f0      	beq.n	800aa20 <SDMMC_GetCmdResp7+0x1c>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1eb      	bne.n	800aa20 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d004      	beq.n	800aa5e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2204      	movs	r2, #4
 800aa58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa5a:	2304      	movs	r3, #4
 800aa5c:	e014      	b.n	800aa88 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d004      	beq.n	800aa74 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e009      	b.n	800aa88 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2240      	movs	r2, #64	; 0x40
 800aa84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa86:	2300      	movs	r3, #0
  
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bc90      	pop	{r4, r7}
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	20000004 	.word	0x20000004
 800aa98:	10624dd3 	.word	0x10624dd3

0800aa9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aaa0:	4904      	ldr	r1, [pc, #16]	; (800aab4 <MX_FATFS_Init+0x18>)
 800aaa2:	4805      	ldr	r0, [pc, #20]	; (800aab8 <MX_FATFS_Init+0x1c>)
 800aaa4:	f002 fbd0 	bl	800d248 <FATFS_LinkDriver>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	461a      	mov	r2, r3
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <MX_FATFS_Init+0x20>)
 800aaae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aab0:	bf00      	nop
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	2001025c 	.word	0x2001025c
 800aab8:	0800ef60 	.word	0x0800ef60
 800aabc:	20010258 	.word	0x20010258

0800aac0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aac4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aada:	f000 f86b 	bl	800abb4 <BSP_SD_IsDetected>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d001      	beq.n	800aae8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e005      	b.n	800aaf4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800aae8:	4804      	ldr	r0, [pc, #16]	; (800aafc <BSP_SD_Init+0x2c>)
 800aaea:	f7fd fc05 	bl	80082f8 <HAL_SD_Init>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	20003994 	.word	0x20003994

0800ab00 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af02      	add	r7, sp, #8
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
 800ab0c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	68f9      	ldr	r1, [r7, #12]
 800ab1c:	4806      	ldr	r0, [pc, #24]	; (800ab38 <BSP_SD_ReadBlocks+0x38>)
 800ab1e:	f7fd fc7b 	bl	8008418 <HAL_SD_ReadBlocks>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20003994 	.word	0x20003994

0800ab3c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b088      	sub	sp, #32
 800ab40:	af02      	add	r7, sp, #8
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	68f9      	ldr	r1, [r7, #12]
 800ab58:	4806      	ldr	r0, [pc, #24]	; (800ab74 <BSP_SD_WriteBlocks+0x38>)
 800ab5a:	f7fd fe57 	bl	800880c <HAL_SD_WriteBlocks>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3718      	adds	r7, #24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20003994 	.word	0x20003994

0800ab78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ab7c:	4805      	ldr	r0, [pc, #20]	; (800ab94 <BSP_SD_GetCardState+0x1c>)
 800ab7e:	f7fe f9b7 	bl	8008ef0 <HAL_SD_GetCardState>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	bf14      	ite	ne
 800ab88:	2301      	movne	r3, #1
 800ab8a:	2300      	moveq	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20003994 	.word	0x20003994

0800ab98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	4803      	ldr	r0, [pc, #12]	; (800abb0 <BSP_SD_GetCardInfo+0x18>)
 800aba4:	f7fe f978 	bl	8008e98 <HAL_SD_GetCardInfo>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20003994 	.word	0x20003994

0800abb4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800abba:	2301      	movs	r3, #1
 800abbc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800abbe:	79fb      	ldrb	r3, [r7, #7]
 800abc0:	b2db      	uxtb	r3, r3
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800abda:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <SD_CheckStatus+0x38>)
 800abdc:	2201      	movs	r2, #1
 800abde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800abe0:	f7ff ffca 	bl	800ab78 <BSP_SD_GetCardState>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d107      	bne.n	800abfa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800abea:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <SD_CheckStatus+0x38>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	4b04      	ldr	r3, [pc, #16]	; (800ac08 <SD_CheckStatus+0x38>)
 800abf8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800abfa:	4b03      	ldr	r3, [pc, #12]	; (800ac08 <SD_CheckStatus+0x38>)
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	b2db      	uxtb	r3, r3
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20000015 	.word	0x20000015

0800ac0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ac16:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <SD_initialize+0x38>)
 800ac18:	2201      	movs	r2, #1
 800ac1a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ac1c:	f7ff ff58 	bl	800aad0 <BSP_SD_Init>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d107      	bne.n	800ac36 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff ffd1 	bl	800abd0 <SD_CheckStatus>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	461a      	mov	r2, r3
 800ac32:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <SD_initialize+0x38>)
 800ac34:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ac36:	4b03      	ldr	r3, [pc, #12]	; (800ac44 <SD_initialize+0x38>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b2db      	uxtb	r3, r3
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20000015 	.word	0x20000015

0800ac48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ac52:	79fb      	ldrb	r3, [r7, #7]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff ffbb 	bl	800abd0 <SD_CheckStatus>
 800ac5a:	4603      	mov	r3, r0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607a      	str	r2, [r7, #4]
 800ac6e:	603b      	str	r3, [r7, #0]
 800ac70:	4603      	mov	r3, r0
 800ac72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ac78:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	68b8      	ldr	r0, [r7, #8]
 800ac82:	f7ff ff3d 	bl	800ab00 <BSP_SD_ReadBlocks>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d107      	bne.n	800ac9c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ac8c:	bf00      	nop
 800ac8e:	f7ff ff73 	bl	800ab78 <BSP_SD_GetCardState>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1fa      	bne.n	800ac8e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b086      	sub	sp, #24
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	603b      	str	r3, [r7, #0]
 800acb2:	4603      	mov	r3, r0
 800acb4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	68b8      	ldr	r0, [r7, #8]
 800acc4:	f7ff ff3a 	bl	800ab3c <BSP_SD_WriteBlocks>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d107      	bne.n	800acde <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800acce:	bf00      	nop
 800acd0:	f7ff ff52 	bl	800ab78 <BSP_SD_GetCardState>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1fa      	bne.n	800acd0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800acde:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3718      	adds	r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08c      	sub	sp, #48	; 0x30
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	603a      	str	r2, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
 800acf4:	460b      	mov	r3, r1
 800acf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800acfe:	4b25      	ldr	r3, [pc, #148]	; (800ad94 <SD_ioctl+0xac>)
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <SD_ioctl+0x28>
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e03c      	b.n	800ad8a <SD_ioctl+0xa2>

  switch (cmd)
 800ad10:	79bb      	ldrb	r3, [r7, #6]
 800ad12:	2b03      	cmp	r3, #3
 800ad14:	d834      	bhi.n	800ad80 <SD_ioctl+0x98>
 800ad16:	a201      	add	r2, pc, #4	; (adr r2, 800ad1c <SD_ioctl+0x34>)
 800ad18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1c:	0800ad2d 	.word	0x0800ad2d
 800ad20:	0800ad35 	.word	0x0800ad35
 800ad24:	0800ad4d 	.word	0x0800ad4d
 800ad28:	0800ad67 	.word	0x0800ad67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad32:	e028      	b.n	800ad86 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ad34:	f107 030c 	add.w	r3, r7, #12
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7ff ff2d 	bl	800ab98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ad3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad4a:	e01c      	b.n	800ad86 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ad4c:	f107 030c 	add.w	r3, r7, #12
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff ff21 	bl	800ab98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad64:	e00f      	b.n	800ad86 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ad66:	f107 030c 	add.w	r3, r7, #12
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff ff14 	bl	800ab98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ad70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad72:	0a5a      	lsrs	r2, r3, #9
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad7e:	e002      	b.n	800ad86 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ad80:	2304      	movs	r3, #4
 800ad82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ad86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3730      	adds	r7, #48	; 0x30
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20000015 	.word	0x20000015

0800ad98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b084      	sub	sp, #16
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	4a08      	ldr	r2, [pc, #32]	; (800adc8 <disk_status+0x30>)
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	79fa      	ldrb	r2, [r7, #7]
 800adb0:	4905      	ldr	r1, [pc, #20]	; (800adc8 <disk_status+0x30>)
 800adb2:	440a      	add	r2, r1
 800adb4:	7a12      	ldrb	r2, [r2, #8]
 800adb6:	4610      	mov	r0, r2
 800adb8:	4798      	blx	r3
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	200003f4 	.word	0x200003f4

0800adcc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	4603      	mov	r3, r0
 800add4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	4a0d      	ldr	r2, [pc, #52]	; (800ae14 <disk_initialize+0x48>)
 800adde:	5cd3      	ldrb	r3, [r2, r3]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d111      	bne.n	800ae08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	4a0b      	ldr	r2, [pc, #44]	; (800ae14 <disk_initialize+0x48>)
 800ade8:	2101      	movs	r1, #1
 800adea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	4a09      	ldr	r2, [pc, #36]	; (800ae14 <disk_initialize+0x48>)
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	79fa      	ldrb	r2, [r7, #7]
 800adfa:	4906      	ldr	r1, [pc, #24]	; (800ae14 <disk_initialize+0x48>)
 800adfc:	440a      	add	r2, r1
 800adfe:	7a12      	ldrb	r2, [r2, #8]
 800ae00:	4610      	mov	r0, r2
 800ae02:	4798      	blx	r3
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	200003f4 	.word	0x200003f4

0800ae18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ae18:	b590      	push	{r4, r7, lr}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60b9      	str	r1, [r7, #8]
 800ae20:	607a      	str	r2, [r7, #4]
 800ae22:	603b      	str	r3, [r7, #0]
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	4a0a      	ldr	r2, [pc, #40]	; (800ae54 <disk_read+0x3c>)
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	689c      	ldr	r4, [r3, #8]
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	4a07      	ldr	r2, [pc, #28]	; (800ae54 <disk_read+0x3c>)
 800ae38:	4413      	add	r3, r2
 800ae3a:	7a18      	ldrb	r0, [r3, #8]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	68b9      	ldr	r1, [r7, #8]
 800ae42:	47a0      	blx	r4
 800ae44:	4603      	mov	r3, r0
 800ae46:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	371c      	adds	r7, #28
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd90      	pop	{r4, r7, pc}
 800ae52:	bf00      	nop
 800ae54:	200003f4 	.word	0x200003f4

0800ae58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ae58:	b590      	push	{r4, r7, lr}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
 800ae6a:	4a0a      	ldr	r2, [pc, #40]	; (800ae94 <disk_write+0x3c>)
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	68dc      	ldr	r4, [r3, #12]
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	4a07      	ldr	r2, [pc, #28]	; (800ae94 <disk_write+0x3c>)
 800ae78:	4413      	add	r3, r2
 800ae7a:	7a18      	ldrb	r0, [r3, #8]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	47a0      	blx	r4
 800ae84:	4603      	mov	r3, r0
 800ae86:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	371c      	adds	r7, #28
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd90      	pop	{r4, r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200003f4 	.word	0x200003f4

0800ae98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	603a      	str	r2, [r7, #0]
 800aea2:	71fb      	strb	r3, [r7, #7]
 800aea4:	460b      	mov	r3, r1
 800aea6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aea8:	79fb      	ldrb	r3, [r7, #7]
 800aeaa:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <disk_ioctl+0x38>)
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	79fa      	ldrb	r2, [r7, #7]
 800aeb6:	4906      	ldr	r1, [pc, #24]	; (800aed0 <disk_ioctl+0x38>)
 800aeb8:	440a      	add	r2, r1
 800aeba:	7a10      	ldrb	r0, [r2, #8]
 800aebc:	79b9      	ldrb	r1, [r7, #6]
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	4798      	blx	r3
 800aec2:	4603      	mov	r3, r0
 800aec4:	73fb      	strb	r3, [r7, #15]
  return res;
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	200003f4 	.word	0x200003f4

0800aed4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	3301      	adds	r3, #1
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aee4:	89fb      	ldrh	r3, [r7, #14]
 800aee6:	021b      	lsls	r3, r3, #8
 800aee8:	b21a      	sxth	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	b21b      	sxth	r3, r3
 800aef0:	4313      	orrs	r3, r2
 800aef2:	b21b      	sxth	r3, r3
 800aef4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aef6:	89fb      	ldrh	r3, [r7, #14]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800af04:	b480      	push	{r7}
 800af06:	b085      	sub	sp, #20
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3303      	adds	r3, #3
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	021b      	lsls	r3, r3, #8
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	3202      	adds	r2, #2
 800af1c:	7812      	ldrb	r2, [r2, #0]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	021b      	lsls	r3, r3, #8
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	3201      	adds	r2, #1
 800af2a:	7812      	ldrb	r2, [r2, #0]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	021b      	lsls	r3, r3, #8
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	7812      	ldrb	r2, [r2, #0]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]
	return rv;
 800af3c:	68fb      	ldr	r3, [r7, #12]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800af4a:	b480      	push	{r7}
 800af4c:	b083      	sub	sp, #12
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	460b      	mov	r3, r1
 800af54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	887a      	ldrh	r2, [r7, #2]
 800af5e:	b2d2      	uxtb	r2, r2
 800af60:	701a      	strb	r2, [r3, #0]
 800af62:	887b      	ldrh	r3, [r7, #2]
 800af64:	0a1b      	lsrs	r3, r3, #8
 800af66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	1c5a      	adds	r2, r3, #1
 800af6c:	607a      	str	r2, [r7, #4]
 800af6e:	887a      	ldrh	r2, [r7, #2]
 800af70:	b2d2      	uxtb	r2, r2
 800af72:	701a      	strb	r2, [r3, #0]
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	b2d2      	uxtb	r2, r2
 800af94:	701a      	strb	r2, [r3, #0]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	0a1b      	lsrs	r3, r3, #8
 800af9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	1c5a      	adds	r2, r3, #1
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	b2d2      	uxtb	r2, r2
 800afa6:	701a      	strb	r2, [r3, #0]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	0a1b      	lsrs	r3, r3, #8
 800afac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	683a      	ldr	r2, [r7, #0]
 800afb6:	b2d2      	uxtb	r2, r2
 800afb8:	701a      	strb	r2, [r3, #0]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	0a1b      	lsrs	r3, r3, #8
 800afbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	607a      	str	r2, [r7, #4]
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	b2d2      	uxtb	r2, r2
 800afca:	701a      	strb	r2, [r3, #0]
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00d      	beq.n	800b00e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	1c53      	adds	r3, r2, #1
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	1c59      	adds	r1, r3, #1
 800affc:	6179      	str	r1, [r7, #20]
 800affe:	7812      	ldrb	r2, [r2, #0]
 800b000:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	3b01      	subs	r3, #1
 800b006:	607b      	str	r3, [r7, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1f1      	bne.n	800aff2 <mem_cpy+0x1a>
	}
}
 800b00e:	bf00      	nop
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b01a:	b480      	push	{r7}
 800b01c:	b087      	sub	sp, #28
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	617a      	str	r2, [r7, #20]
 800b030:	68ba      	ldr	r2, [r7, #8]
 800b032:	b2d2      	uxtb	r2, r2
 800b034:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	3b01      	subs	r3, #1
 800b03a:	607b      	str	r3, [r7, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1f3      	bne.n	800b02a <mem_set+0x10>
}
 800b042:	bf00      	nop
 800b044:	371c      	adds	r7, #28
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b04e:	b480      	push	{r7}
 800b050:	b089      	sub	sp, #36	; 0x24
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	61fb      	str	r3, [r7, #28]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	61fa      	str	r2, [r7, #28]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	4619      	mov	r1, r3
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	1c5a      	adds	r2, r3, #1
 800b074:	61ba      	str	r2, [r7, #24]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	1acb      	subs	r3, r1, r3
 800b07a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	3b01      	subs	r3, #1
 800b080:	607b      	str	r3, [r7, #4]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <mem_cmp+0x40>
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0eb      	beq.n	800b066 <mem_cmp+0x18>

	return r;
 800b08e:	697b      	ldr	r3, [r7, #20]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3724      	adds	r7, #36	; 0x24
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b0a6:	e002      	b.n	800b0ae <chk_chr+0x12>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d005      	beq.n	800b0c2 <chk_chr+0x26>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d1f2      	bne.n	800b0a8 <chk_chr+0xc>
	return *str;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60bb      	str	r3, [r7, #8]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	60fb      	str	r3, [r7, #12]
 800b0e6:	e029      	b.n	800b13c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b0e8:	4a27      	ldr	r2, [pc, #156]	; (800b188 <chk_lock+0xb4>)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	011b      	lsls	r3, r3, #4
 800b0ee:	4413      	add	r3, r2
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d01d      	beq.n	800b132 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b0f6:	4a24      	ldr	r2, [pc, #144]	; (800b188 <chk_lock+0xb4>)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	4413      	add	r3, r2
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d116      	bne.n	800b136 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b108:	4a1f      	ldr	r2, [pc, #124]	; (800b188 <chk_lock+0xb4>)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	011b      	lsls	r3, r3, #4
 800b10e:	4413      	add	r3, r2
 800b110:	3304      	adds	r3, #4
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b118:	429a      	cmp	r2, r3
 800b11a:	d10c      	bne.n	800b136 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b11c:	4a1a      	ldr	r2, [pc, #104]	; (800b188 <chk_lock+0xb4>)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	011b      	lsls	r3, r3, #4
 800b122:	4413      	add	r3, r2
 800b124:	3308      	adds	r3, #8
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d102      	bne.n	800b136 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b130:	e007      	b.n	800b142 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b132:	2301      	movs	r3, #1
 800b134:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	3301      	adds	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d9d2      	bls.n	800b0e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d109      	bne.n	800b15c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <chk_lock+0x80>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	2b02      	cmp	r3, #2
 800b152:	d101      	bne.n	800b158 <chk_lock+0x84>
 800b154:	2300      	movs	r3, #0
 800b156:	e010      	b.n	800b17a <chk_lock+0xa6>
 800b158:	2312      	movs	r3, #18
 800b15a:	e00e      	b.n	800b17a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d108      	bne.n	800b174 <chk_lock+0xa0>
 800b162:	4a09      	ldr	r2, [pc, #36]	; (800b188 <chk_lock+0xb4>)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	4413      	add	r3, r2
 800b16a:	330c      	adds	r3, #12
 800b16c:	881b      	ldrh	r3, [r3, #0]
 800b16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b172:	d101      	bne.n	800b178 <chk_lock+0xa4>
 800b174:	2310      	movs	r3, #16
 800b176:	e000      	b.n	800b17a <chk_lock+0xa6>
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	200003d4 	.word	0x200003d4

0800b18c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b192:	2300      	movs	r3, #0
 800b194:	607b      	str	r3, [r7, #4]
 800b196:	e002      	b.n	800b19e <enq_lock+0x12>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3301      	adds	r3, #1
 800b19c:	607b      	str	r3, [r7, #4]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d806      	bhi.n	800b1b2 <enq_lock+0x26>
 800b1a4:	4a09      	ldr	r2, [pc, #36]	; (800b1cc <enq_lock+0x40>)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	011b      	lsls	r3, r3, #4
 800b1aa:	4413      	add	r3, r2
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1f2      	bne.n	800b198 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	bf14      	ite	ne
 800b1b8:	2301      	movne	r3, #1
 800b1ba:	2300      	moveq	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	200003d4 	.word	0x200003d4

0800b1d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
 800b1de:	e01f      	b.n	800b220 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b1e0:	4a41      	ldr	r2, [pc, #260]	; (800b2e8 <inc_lock+0x118>)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	011b      	lsls	r3, r3, #4
 800b1e6:	4413      	add	r3, r2
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d113      	bne.n	800b21a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b1f2:	4a3d      	ldr	r2, [pc, #244]	; (800b2e8 <inc_lock+0x118>)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	4413      	add	r3, r2
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b202:	429a      	cmp	r2, r3
 800b204:	d109      	bne.n	800b21a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b206:	4a38      	ldr	r2, [pc, #224]	; (800b2e8 <inc_lock+0x118>)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	011b      	lsls	r3, r3, #4
 800b20c:	4413      	add	r3, r2
 800b20e:	3308      	adds	r3, #8
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b216:	429a      	cmp	r2, r3
 800b218:	d006      	beq.n	800b228 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	3301      	adds	r3, #1
 800b21e:	60fb      	str	r3, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d9dc      	bls.n	800b1e0 <inc_lock+0x10>
 800b226:	e000      	b.n	800b22a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b228:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d132      	bne.n	800b296 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	e002      	b.n	800b23c <inc_lock+0x6c>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3301      	adds	r3, #1
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d806      	bhi.n	800b250 <inc_lock+0x80>
 800b242:	4a29      	ldr	r2, [pc, #164]	; (800b2e8 <inc_lock+0x118>)
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	011b      	lsls	r3, r3, #4
 800b248:	4413      	add	r3, r2
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1f2      	bne.n	800b236 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b02      	cmp	r3, #2
 800b254:	d101      	bne.n	800b25a <inc_lock+0x8a>
 800b256:	2300      	movs	r3, #0
 800b258:	e040      	b.n	800b2dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	4922      	ldr	r1, [pc, #136]	; (800b2e8 <inc_lock+0x118>)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	011b      	lsls	r3, r3, #4
 800b264:	440b      	add	r3, r1
 800b266:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	491e      	ldr	r1, [pc, #120]	; (800b2e8 <inc_lock+0x118>)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	011b      	lsls	r3, r3, #4
 800b272:	440b      	add	r3, r1
 800b274:	3304      	adds	r3, #4
 800b276:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	695a      	ldr	r2, [r3, #20]
 800b27c:	491a      	ldr	r1, [pc, #104]	; (800b2e8 <inc_lock+0x118>)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	011b      	lsls	r3, r3, #4
 800b282:	440b      	add	r3, r1
 800b284:	3308      	adds	r3, #8
 800b286:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b288:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <inc_lock+0x118>)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	011b      	lsls	r3, r3, #4
 800b28e:	4413      	add	r3, r2
 800b290:	330c      	adds	r3, #12
 800b292:	2200      	movs	r2, #0
 800b294:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d009      	beq.n	800b2b0 <inc_lock+0xe0>
 800b29c:	4a12      	ldr	r2, [pc, #72]	; (800b2e8 <inc_lock+0x118>)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	011b      	lsls	r3, r3, #4
 800b2a2:	4413      	add	r3, r2
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <inc_lock+0xe0>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	e015      	b.n	800b2dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d108      	bne.n	800b2c8 <inc_lock+0xf8>
 800b2b6:	4a0c      	ldr	r2, [pc, #48]	; (800b2e8 <inc_lock+0x118>)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	011b      	lsls	r3, r3, #4
 800b2bc:	4413      	add	r3, r2
 800b2be:	330c      	adds	r3, #12
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	b29a      	uxth	r2, r3
 800b2c6:	e001      	b.n	800b2cc <inc_lock+0xfc>
 800b2c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2cc:	4906      	ldr	r1, [pc, #24]	; (800b2e8 <inc_lock+0x118>)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	011b      	lsls	r3, r3, #4
 800b2d2:	440b      	add	r3, r1
 800b2d4:	330c      	adds	r3, #12
 800b2d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3301      	adds	r3, #1
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	200003d4 	.word	0x200003d4

0800b2ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	607b      	str	r3, [r7, #4]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d825      	bhi.n	800b34c <dec_lock+0x60>
		n = Files[i].ctr;
 800b300:	4a17      	ldr	r2, [pc, #92]	; (800b360 <dec_lock+0x74>)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	011b      	lsls	r3, r3, #4
 800b306:	4413      	add	r3, r2
 800b308:	330c      	adds	r3, #12
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b30e:	89fb      	ldrh	r3, [r7, #14]
 800b310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b314:	d101      	bne.n	800b31a <dec_lock+0x2e>
 800b316:	2300      	movs	r3, #0
 800b318:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b31a:	89fb      	ldrh	r3, [r7, #14]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <dec_lock+0x3a>
 800b320:	89fb      	ldrh	r3, [r7, #14]
 800b322:	3b01      	subs	r3, #1
 800b324:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b326:	4a0e      	ldr	r2, [pc, #56]	; (800b360 <dec_lock+0x74>)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	4413      	add	r3, r2
 800b32e:	330c      	adds	r3, #12
 800b330:	89fa      	ldrh	r2, [r7, #14]
 800b332:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b334:	89fb      	ldrh	r3, [r7, #14]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d105      	bne.n	800b346 <dec_lock+0x5a>
 800b33a:	4a09      	ldr	r2, [pc, #36]	; (800b360 <dec_lock+0x74>)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	4413      	add	r3, r2
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	737b      	strb	r3, [r7, #13]
 800b34a:	e001      	b.n	800b350 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b34c:	2302      	movs	r3, #2
 800b34e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b350:	7b7b      	ldrb	r3, [r7, #13]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	200003d4 	.word	0x200003d4

0800b364 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b36c:	2300      	movs	r3, #0
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e010      	b.n	800b394 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b372:	4a0d      	ldr	r2, [pc, #52]	; (800b3a8 <clear_lock+0x44>)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	4413      	add	r3, r2
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d105      	bne.n	800b38e <clear_lock+0x2a>
 800b382:	4a09      	ldr	r2, [pc, #36]	; (800b3a8 <clear_lock+0x44>)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	4413      	add	r3, r2
 800b38a:	2200      	movs	r2, #0
 800b38c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3301      	adds	r3, #1
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d9eb      	bls.n	800b372 <clear_lock+0xe>
	}
}
 800b39a:	bf00      	nop
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	200003d4 	.word	0x200003d4

0800b3ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	78db      	ldrb	r3, [r3, #3]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d034      	beq.n	800b42a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	7858      	ldrb	r0, [r3, #1]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	f7ff fd40 	bl	800ae58 <disk_write>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d002      	beq.n	800b3e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	73fb      	strb	r3, [r7, #15]
 800b3e2:	e022      	b.n	800b42a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	1ad2      	subs	r2, r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d217      	bcs.n	800b42a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	789b      	ldrb	r3, [r3, #2]
 800b3fe:	613b      	str	r3, [r7, #16]
 800b400:	e010      	b.n	800b424 <sync_window+0x78>
					wsect += fs->fsize;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4413      	add	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7858      	ldrb	r0, [r3, #1]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b416:	2301      	movs	r3, #1
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	f7ff fd1d 	bl	800ae58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	3b01      	subs	r3, #1
 800b422:	613b      	str	r3, [r7, #16]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d8eb      	bhi.n	800b402 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d01b      	beq.n	800b484 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff ffad 	bl	800b3ac <sync_window>
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b456:	7bfb      	ldrb	r3, [r7, #15]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d113      	bne.n	800b484 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	7858      	ldrb	r0, [r3, #1]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b466:	2301      	movs	r3, #1
 800b468:	683a      	ldr	r2, [r7, #0]
 800b46a:	f7ff fcd5 	bl	800ae18 <disk_read>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d004      	beq.n	800b47e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b474:	f04f 33ff 	mov.w	r3, #4294967295
 800b478:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800b484:	7bfb      	ldrb	r3, [r7, #15]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
	...

0800b490 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7ff ff87 	bl	800b3ac <sync_window>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d159      	bne.n	800b55c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d149      	bne.n	800b544 <sync_fs+0xb4>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	791b      	ldrb	r3, [r3, #4]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d145      	bne.n	800b544 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	899b      	ldrh	r3, [r3, #12]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	f7ff fda8 	bl	800b01a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3334      	adds	r3, #52	; 0x34
 800b4ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b4d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7ff fd37 	bl	800af4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3334      	adds	r3, #52	; 0x34
 800b4e0:	4921      	ldr	r1, [pc, #132]	; (800b568 <sync_fs+0xd8>)
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fd4c 	bl	800af80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3334      	adds	r3, #52	; 0x34
 800b4ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b4f0:	491e      	ldr	r1, [pc, #120]	; (800b56c <sync_fs+0xdc>)
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff fd44 	bl	800af80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	3334      	adds	r3, #52	; 0x34
 800b4fc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7ff fd3a 	bl	800af80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	3334      	adds	r3, #52	; 0x34
 800b510:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	4619      	mov	r1, r3
 800b51a:	4610      	mov	r0, r2
 800b51c:	f7ff fd30 	bl	800af80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	7858      	ldrb	r0, [r3, #1]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b538:	2301      	movs	r3, #1
 800b53a:	f7ff fc8d 	bl	800ae58 <disk_write>
			fs->fsi_flag = 0;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2200      	movs	r2, #0
 800b542:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	785b      	ldrb	r3, [r3, #1]
 800b548:	2200      	movs	r2, #0
 800b54a:	2100      	movs	r1, #0
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7ff fca3 	bl	800ae98 <disk_ioctl>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <sync_fs+0xcc>
 800b558:	2301      	movs	r3, #1
 800b55a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	41615252 	.word	0x41615252
 800b56c:	61417272 	.word	0x61417272

0800b570 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	3b02      	subs	r3, #2
 800b57e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	3b02      	subs	r3, #2
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d301      	bcc.n	800b590 <clust2sect+0x20>
 800b58c:	2300      	movs	r3, #0
 800b58e:	e008      	b.n	800b5a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	895b      	ldrh	r3, [r3, #10]
 800b594:	461a      	mov	r2, r3
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	fb03 f202 	mul.w	r2, r3, r2
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a0:	4413      	add	r3, r2
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b086      	sub	sp, #24
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d904      	bls.n	800b5ce <get_fat+0x20>
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d302      	bcc.n	800b5d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e0b7      	b.n	800b744 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d05a      	beq.n	800b698 <get_fat+0xea>
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	d07d      	beq.n	800b6e2 <get_fat+0x134>
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	f040 80a2 	bne.w	800b730 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	60fb      	str	r3, [r7, #12]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	085b      	lsrs	r3, r3, #1
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	899b      	ldrh	r3, [r3, #12]
 800b602:	4619      	mov	r1, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	fbb3 f3f1 	udiv	r3, r3, r1
 800b60a:	4413      	add	r3, r2
 800b60c:	4619      	mov	r1, r3
 800b60e:	6938      	ldr	r0, [r7, #16]
 800b610:	f7ff ff10 	bl	800b434 <move_window>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	f040 808d 	bne.w	800b736 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	60fa      	str	r2, [r7, #12]
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	8992      	ldrh	r2, [r2, #12]
 800b626:	fbb3 f1f2 	udiv	r1, r3, r2
 800b62a:	fb02 f201 	mul.w	r2, r2, r1
 800b62e:	1a9b      	subs	r3, r3, r2
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	4413      	add	r3, r2
 800b634:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b638:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	899b      	ldrh	r3, [r3, #12]
 800b642:	4619      	mov	r1, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	fbb3 f3f1 	udiv	r3, r3, r1
 800b64a:	4413      	add	r3, r2
 800b64c:	4619      	mov	r1, r3
 800b64e:	6938      	ldr	r0, [r7, #16]
 800b650:	f7ff fef0 	bl	800b434 <move_window>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d16f      	bne.n	800b73a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	899b      	ldrh	r3, [r3, #12]
 800b65e:	461a      	mov	r2, r3
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	fbb3 f1f2 	udiv	r1, r3, r2
 800b666:	fb02 f201 	mul.w	r2, r2, r1
 800b66a:	1a9b      	subs	r3, r3, r2
 800b66c:	693a      	ldr	r2, [r7, #16]
 800b66e:	4413      	add	r3, r2
 800b670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b674:	021b      	lsls	r3, r3, #8
 800b676:	461a      	mov	r2, r3
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <get_fat+0xe0>
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	091b      	lsrs	r3, r3, #4
 800b68c:	e002      	b.n	800b694 <get_fat+0xe6>
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b694:	617b      	str	r3, [r7, #20]
			break;
 800b696:	e055      	b.n	800b744 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	899b      	ldrh	r3, [r3, #12]
 800b6a0:	085b      	lsrs	r3, r3, #1
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6938      	ldr	r0, [r7, #16]
 800b6b2:	f7ff febf 	bl	800b434 <move_window>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d140      	bne.n	800b73e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	8992      	ldrh	r2, [r2, #12]
 800b6ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6ce:	fb02 f200 	mul.w	r2, r2, r0
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	440b      	add	r3, r1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff fbfc 	bl	800aed4 <ld_word>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	617b      	str	r3, [r7, #20]
			break;
 800b6e0:	e030      	b.n	800b744 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	899b      	ldrh	r3, [r3, #12]
 800b6ea:	089b      	lsrs	r3, r3, #2
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6f6:	4413      	add	r3, r2
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6938      	ldr	r0, [r7, #16]
 800b6fc:	f7ff fe9a 	bl	800b434 <move_window>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d11d      	bne.n	800b742 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	8992      	ldrh	r2, [r2, #12]
 800b714:	fbb3 f0f2 	udiv	r0, r3, r2
 800b718:	fb02 f200 	mul.w	r2, r2, r0
 800b71c:	1a9b      	subs	r3, r3, r2
 800b71e:	440b      	add	r3, r1
 800b720:	4618      	mov	r0, r3
 800b722:	f7ff fbef 	bl	800af04 <ld_dword>
 800b726:	4603      	mov	r3, r0
 800b728:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b72c:	617b      	str	r3, [r7, #20]
			break;
 800b72e:	e009      	b.n	800b744 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b730:	2301      	movs	r3, #1
 800b732:	617b      	str	r3, [r7, #20]
 800b734:	e006      	b.n	800b744 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b736:	bf00      	nop
 800b738:	e004      	b.n	800b744 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b73a:	bf00      	nop
 800b73c:	e002      	b.n	800b744 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b73e:	bf00      	nop
 800b740:	e000      	b.n	800b744 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b742:	bf00      	nop
		}
	}

	return val;
 800b744:	697b      	ldr	r3, [r7, #20]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b74e:	b590      	push	{r4, r7, lr}
 800b750:	b089      	sub	sp, #36	; 0x24
 800b752:	af00      	add	r7, sp, #0
 800b754:	60f8      	str	r0, [r7, #12]
 800b756:	60b9      	str	r1, [r7, #8]
 800b758:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b75a:	2302      	movs	r3, #2
 800b75c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b01      	cmp	r3, #1
 800b762:	f240 8106 	bls.w	800b972 <put_fat+0x224>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	699b      	ldr	r3, [r3, #24]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	f080 8100 	bcs.w	800b972 <put_fat+0x224>
		switch (fs->fs_type) {
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	2b02      	cmp	r3, #2
 800b778:	f000 8088 	beq.w	800b88c <put_fat+0x13e>
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	f000 80b0 	beq.w	800b8e2 <put_fat+0x194>
 800b782:	2b01      	cmp	r3, #1
 800b784:	f040 80f5 	bne.w	800b972 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	61bb      	str	r3, [r7, #24]
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	085b      	lsrs	r3, r3, #1
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	4413      	add	r3, r2
 800b794:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	899b      	ldrh	r3, [r3, #12]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b7a6:	4413      	add	r3, r2
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f7ff fe42 	bl	800b434 <move_window>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b7b4:	7ffb      	ldrb	r3, [r7, #31]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f040 80d4 	bne.w	800b964 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	61ba      	str	r2, [r7, #24]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	8992      	ldrh	r2, [r2, #12]
 800b7cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7d0:	fb02 f200 	mul.w	r2, r2, r0
 800b7d4:	1a9b      	subs	r3, r3, r2
 800b7d6:	440b      	add	r3, r1
 800b7d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00d      	beq.n	800b800 <put_fat+0xb2>
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	b25b      	sxtb	r3, r3
 800b7ea:	f003 030f 	and.w	r3, r3, #15
 800b7ee:	b25a      	sxtb	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	011b      	lsls	r3, r3, #4
 800b7f6:	b25b      	sxtb	r3, r3
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	b25b      	sxtb	r3, r3
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	e001      	b.n	800b804 <put_fat+0xb6>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2201      	movs	r2, #1
 800b80c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	899b      	ldrh	r3, [r3, #12]
 800b816:	4619      	mov	r1, r3
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b81e:	4413      	add	r3, r2
 800b820:	4619      	mov	r1, r3
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7ff fe06 	bl	800b434 <move_window>
 800b828:	4603      	mov	r3, r0
 800b82a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b82c:	7ffb      	ldrb	r3, [r7, #31]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f040 809a 	bne.w	800b968 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	899b      	ldrh	r3, [r3, #12]
 800b83e:	461a      	mov	r2, r3
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	fbb3 f0f2 	udiv	r0, r3, r2
 800b846:	fb02 f200 	mul.w	r2, r2, r0
 800b84a:	1a9b      	subs	r3, r3, r2
 800b84c:	440b      	add	r3, r1
 800b84e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	f003 0301 	and.w	r3, r3, #1
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <put_fat+0x114>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	091b      	lsrs	r3, r3, #4
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	e00e      	b.n	800b880 <put_fat+0x132>
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	b25b      	sxtb	r3, r3
 800b868:	f023 030f 	bic.w	r3, r3, #15
 800b86c:	b25a      	sxtb	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	0a1b      	lsrs	r3, r3, #8
 800b872:	b25b      	sxtb	r3, r3
 800b874:	f003 030f 	and.w	r3, r3, #15
 800b878:	b25b      	sxtb	r3, r3
 800b87a:	4313      	orrs	r3, r2
 800b87c:	b25b      	sxtb	r3, r3
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2201      	movs	r2, #1
 800b888:	70da      	strb	r2, [r3, #3]
			break;
 800b88a:	e072      	b.n	800b972 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	899b      	ldrh	r3, [r3, #12]
 800b894:	085b      	lsrs	r3, r3, #1
 800b896:	b29b      	uxth	r3, r3
 800b898:	4619      	mov	r1, r3
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8a0:	4413      	add	r3, r2
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff fdc5 	bl	800b434 <move_window>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8ae:	7ffb      	ldrb	r3, [r7, #31]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d15b      	bne.n	800b96c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	8992      	ldrh	r2, [r2, #12]
 800b8c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8c6:	fb02 f200 	mul.w	r2, r2, r0
 800b8ca:	1a9b      	subs	r3, r3, r2
 800b8cc:	440b      	add	r3, r1
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	b292      	uxth	r2, r2
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff fb38 	bl	800af4a <st_word>
			fs->wflag = 1;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	70da      	strb	r2, [r3, #3]
			break;
 800b8e0:	e047      	b.n	800b972 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	899b      	ldrh	r3, [r3, #12]
 800b8ea:	089b      	lsrs	r3, r3, #2
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8f6:	4413      	add	r3, r2
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7ff fd9a 	bl	800b434 <move_window>
 800b900:	4603      	mov	r3, r0
 800b902:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b904:	7ffb      	ldrb	r3, [r7, #31]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d132      	bne.n	800b970 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	8992      	ldrh	r2, [r2, #12]
 800b91e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b922:	fb02 f200 	mul.w	r2, r2, r0
 800b926:	1a9b      	subs	r3, r3, r2
 800b928:	440b      	add	r3, r1
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff faea 	bl	800af04 <ld_dword>
 800b930:	4603      	mov	r3, r0
 800b932:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b936:	4323      	orrs	r3, r4
 800b938:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	8992      	ldrh	r2, [r2, #12]
 800b948:	fbb3 f0f2 	udiv	r0, r3, r2
 800b94c:	fb02 f200 	mul.w	r2, r2, r0
 800b950:	1a9b      	subs	r3, r3, r2
 800b952:	440b      	add	r3, r1
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff fb12 	bl	800af80 <st_dword>
			fs->wflag = 1;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2201      	movs	r2, #1
 800b960:	70da      	strb	r2, [r3, #3]
			break;
 800b962:	e006      	b.n	800b972 <put_fat+0x224>
			if (res != FR_OK) break;
 800b964:	bf00      	nop
 800b966:	e004      	b.n	800b972 <put_fat+0x224>
			if (res != FR_OK) break;
 800b968:	bf00      	nop
 800b96a:	e002      	b.n	800b972 <put_fat+0x224>
			if (res != FR_OK) break;
 800b96c:	bf00      	nop
 800b96e:	e000      	b.n	800b972 <put_fat+0x224>
			if (res != FR_OK) break;
 800b970:	bf00      	nop
		}
	}
	return res;
 800b972:	7ffb      	ldrb	r3, [r7, #31]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3724      	adds	r7, #36	; 0x24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd90      	pop	{r4, r7, pc}

0800b97c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d904      	bls.n	800b9a2 <remove_chain+0x26>
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d301      	bcc.n	800b9a6 <remove_chain+0x2a>
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	e04b      	b.n	800ba3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00c      	beq.n	800b9c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b0:	6879      	ldr	r1, [r7, #4]
 800b9b2:	69b8      	ldr	r0, [r7, #24]
 800b9b4:	f7ff fecb 	bl	800b74e <put_fat>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b9bc:	7ffb      	ldrb	r3, [r7, #31]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <remove_chain+0x4a>
 800b9c2:	7ffb      	ldrb	r3, [r7, #31]
 800b9c4:	e03b      	b.n	800ba3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b9c6:	68b9      	ldr	r1, [r7, #8]
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f7ff fdf0 	bl	800b5ae <get_fat>
 800b9ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d031      	beq.n	800ba3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d101      	bne.n	800b9e0 <remove_chain+0x64>
 800b9dc:	2302      	movs	r3, #2
 800b9de:	e02e      	b.n	800ba3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e6:	d101      	bne.n	800b9ec <remove_chain+0x70>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e028      	b.n	800ba3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	68b9      	ldr	r1, [r7, #8]
 800b9f0:	69b8      	ldr	r0, [r7, #24]
 800b9f2:	f7ff feac 	bl	800b74e <put_fat>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b9fa:	7ffb      	ldrb	r3, [r7, #31]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <remove_chain+0x88>
 800ba00:	7ffb      	ldrb	r3, [r7, #31]
 800ba02:	e01c      	b.n	800ba3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	695a      	ldr	r2, [r3, #20]
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	3b02      	subs	r3, #2
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d20b      	bcs.n	800ba2a <remove_chain+0xae>
			fs->free_clst++;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	791b      	ldrb	r3, [r3, #4]
 800ba20:	f043 0301 	orr.w	r3, r3, #1
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d3c6      	bcc.n	800b9c6 <remove_chain+0x4a>
 800ba38:	e000      	b.n	800ba3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ba3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3720      	adds	r7, #32
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b088      	sub	sp, #32
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10d      	bne.n	800ba78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <create_chain+0x2c>
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	69ba      	ldr	r2, [r7, #24]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d31b      	bcc.n	800baaa <create_chain+0x64>
 800ba72:	2301      	movs	r3, #1
 800ba74:	61bb      	str	r3, [r7, #24]
 800ba76:	e018      	b.n	800baaa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7ff fd97 	bl	800b5ae <get_fat>
 800ba80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d801      	bhi.n	800ba8c <create_chain+0x46>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e070      	b.n	800bb6e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba92:	d101      	bne.n	800ba98 <create_chain+0x52>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	e06a      	b.n	800bb6e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d201      	bcs.n	800baa6 <create_chain+0x60>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	e063      	b.n	800bb6e <create_chain+0x128>
		scl = clst;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	3301      	adds	r3, #1
 800bab2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	699b      	ldr	r3, [r3, #24]
 800bab8:	69fa      	ldr	r2, [r7, #28]
 800baba:	429a      	cmp	r2, r3
 800babc:	d307      	bcc.n	800bace <create_chain+0x88>
				ncl = 2;
 800babe:	2302      	movs	r3, #2
 800bac0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bac2:	69fa      	ldr	r2, [r7, #28]
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d901      	bls.n	800bace <create_chain+0x88>
 800baca:	2300      	movs	r3, #0
 800bacc:	e04f      	b.n	800bb6e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bace:	69f9      	ldr	r1, [r7, #28]
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f7ff fd6c 	bl	800b5ae <get_fat>
 800bad6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00e      	beq.n	800bafc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d003      	beq.n	800baec <create_chain+0xa6>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baea:	d101      	bne.n	800baf0 <create_chain+0xaa>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	e03e      	b.n	800bb6e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800baf0:	69fa      	ldr	r2, [r7, #28]
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d1da      	bne.n	800baae <create_chain+0x68>
 800baf8:	2300      	movs	r3, #0
 800bafa:	e038      	b.n	800bb6e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bafc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bafe:	f04f 32ff 	mov.w	r2, #4294967295
 800bb02:	69f9      	ldr	r1, [r7, #28]
 800bb04:	6938      	ldr	r0, [r7, #16]
 800bb06:	f7ff fe22 	bl	800b74e <put_fat>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bb0e:	7dfb      	ldrb	r3, [r7, #23]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d109      	bne.n	800bb28 <create_chain+0xe2>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d006      	beq.n	800bb28 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bb1a:	69fa      	ldr	r2, [r7, #28]
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6938      	ldr	r0, [r7, #16]
 800bb20:	f7ff fe15 	bl	800b74e <put_fat>
 800bb24:	4603      	mov	r3, r0
 800bb26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d116      	bne.n	800bb5c <create_chain+0x116>
		fs->last_clst = ncl;
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	69fa      	ldr	r2, [r7, #28]
 800bb32:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	695a      	ldr	r2, [r3, #20]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	699b      	ldr	r3, [r3, #24]
 800bb3c:	3b02      	subs	r3, #2
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d804      	bhi.n	800bb4c <create_chain+0x106>
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	1e5a      	subs	r2, r3, #1
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	791b      	ldrb	r3, [r3, #4]
 800bb50:	f043 0301 	orr.w	r3, r3, #1
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	711a      	strb	r2, [r3, #4]
 800bb5a:	e007      	b.n	800bb6c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bb5c:	7dfb      	ldrb	r3, [r7, #23]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d102      	bne.n	800bb68 <create_chain+0x122>
 800bb62:	f04f 33ff 	mov.w	r3, #4294967295
 800bb66:	e000      	b.n	800bb6a <create_chain+0x124>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bb6c:	69fb      	ldr	r3, [r7, #28]
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3720      	adds	r7, #32
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b087      	sub	sp, #28
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	899b      	ldrh	r3, [r3, #12]
 800bb92:	461a      	mov	r2, r3
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	8952      	ldrh	r2, [r2, #10]
 800bb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bba2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	1d1a      	adds	r2, r3, #4
 800bba8:	613a      	str	r2, [r7, #16]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d101      	bne.n	800bbb8 <clmt_clust+0x42>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e010      	b.n	800bbda <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d307      	bcc.n	800bbd0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bbce:	e7e9      	b.n	800bba4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bbd0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	4413      	add	r3, r2
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr

0800bbe6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b086      	sub	sp, #24
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bbfc:	d204      	bcs.n	800bc08 <dir_sdi+0x22>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f003 031f 	and.w	r3, r3, #31
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <dir_sdi+0x26>
		return FR_INT_ERR;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e071      	b.n	800bcf0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d106      	bne.n	800bc2c <dir_sdi+0x46>
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d902      	bls.n	800bc2c <dir_sdi+0x46>
		clst = fs->dirbase;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10c      	bne.n	800bc4c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	095b      	lsrs	r3, r3, #5
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	8912      	ldrh	r2, [r2, #8]
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d301      	bcc.n	800bc42 <dir_sdi+0x5c>
 800bc3e:	2302      	movs	r3, #2
 800bc40:	e056      	b.n	800bcf0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	61da      	str	r2, [r3, #28]
 800bc4a:	e02d      	b.n	800bca8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	895b      	ldrh	r3, [r3, #10]
 800bc50:	461a      	mov	r2, r3
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	899b      	ldrh	r3, [r3, #12]
 800bc56:	fb03 f302 	mul.w	r3, r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bc5c:	e019      	b.n	800bc92 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6979      	ldr	r1, [r7, #20]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff fca3 	bl	800b5ae <get_fat>
 800bc68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d101      	bne.n	800bc76 <dir_sdi+0x90>
 800bc72:	2301      	movs	r3, #1
 800bc74:	e03c      	b.n	800bcf0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d904      	bls.n	800bc86 <dir_sdi+0xa0>
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	699b      	ldr	r3, [r3, #24]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d301      	bcc.n	800bc8a <dir_sdi+0xa4>
 800bc86:	2302      	movs	r3, #2
 800bc88:	e032      	b.n	800bcf0 <dir_sdi+0x10a>
			ofs -= csz;
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d2e1      	bcs.n	800bc5e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bc9a:	6979      	ldr	r1, [r7, #20]
 800bc9c:	6938      	ldr	r0, [r7, #16]
 800bc9e:	f7ff fc67 	bl	800b570 <clust2sect>
 800bca2:	4602      	mov	r2, r0
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <dir_sdi+0xd4>
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	e01a      	b.n	800bcf0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	69da      	ldr	r2, [r3, #28]
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	899b      	ldrh	r3, [r3, #12]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcca:	441a      	add	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	899b      	ldrh	r3, [r3, #12]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	fbb3 f0f2 	udiv	r0, r3, r2
 800bce2:	fb02 f200 	mul.w	r2, r2, r0
 800bce6:	1a9b      	subs	r3, r3, r2
 800bce8:	18ca      	adds	r2, r1, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	3320      	adds	r3, #32
 800bd0e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <dir_next+0x28>
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd1e:	d301      	bcc.n	800bd24 <dir_next+0x2c>
 800bd20:	2304      	movs	r3, #4
 800bd22:	e0bb      	b.n	800be9c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	899b      	ldrh	r3, [r3, #12]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd30:	fb02 f201 	mul.w	r2, r2, r1
 800bd34:	1a9b      	subs	r3, r3, r2
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f040 809d 	bne.w	800be76 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	69db      	ldr	r3, [r3, #28]
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10b      	bne.n	800bd66 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	095b      	lsrs	r3, r3, #5
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	8912      	ldrh	r2, [r2, #8]
 800bd56:	4293      	cmp	r3, r2
 800bd58:	f0c0 808d 	bcc.w	800be76 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	61da      	str	r2, [r3, #28]
 800bd62:	2304      	movs	r3, #4
 800bd64:	e09a      	b.n	800be9c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	8952      	ldrh	r2, [r2, #10]
 800bd76:	3a01      	subs	r2, #1
 800bd78:	4013      	ands	r3, r2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d17b      	bne.n	800be76 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	4619      	mov	r1, r3
 800bd86:	4610      	mov	r0, r2
 800bd88:	f7ff fc11 	bl	800b5ae <get_fat>
 800bd8c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d801      	bhi.n	800bd98 <dir_next+0xa0>
 800bd94:	2302      	movs	r3, #2
 800bd96:	e081      	b.n	800be9c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9e:	d101      	bne.n	800bda4 <dir_next+0xac>
 800bda0:	2301      	movs	r3, #1
 800bda2:	e07b      	b.n	800be9c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d359      	bcc.n	800be62 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d104      	bne.n	800bdbe <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	61da      	str	r2, [r3, #28]
 800bdba:	2304      	movs	r3, #4
 800bdbc:	e06e      	b.n	800be9c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	699b      	ldr	r3, [r3, #24]
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4610      	mov	r0, r2
 800bdc8:	f7ff fe3d 	bl	800ba46 <create_chain>
 800bdcc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <dir_next+0xe0>
 800bdd4:	2307      	movs	r3, #7
 800bdd6:	e061      	b.n	800be9c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d101      	bne.n	800bde2 <dir_next+0xea>
 800bdde:	2302      	movs	r3, #2
 800bde0:	e05c      	b.n	800be9c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde8:	d101      	bne.n	800bdee <dir_next+0xf6>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e056      	b.n	800be9c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f7ff fadc 	bl	800b3ac <sync_window>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <dir_next+0x106>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e04e      	b.n	800be9c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	899b      	ldrh	r3, [r3, #12]
 800be08:	461a      	mov	r2, r3
 800be0a:	2100      	movs	r1, #0
 800be0c:	f7ff f905 	bl	800b01a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800be10:	2300      	movs	r3, #0
 800be12:	613b      	str	r3, [r7, #16]
 800be14:	6979      	ldr	r1, [r7, #20]
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fbaa 	bl	800b570 <clust2sect>
 800be1c:	4602      	mov	r2, r0
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	631a      	str	r2, [r3, #48]	; 0x30
 800be22:	e012      	b.n	800be4a <dir_next+0x152>
						fs->wflag = 1;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2201      	movs	r2, #1
 800be28:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7ff fabe 	bl	800b3ac <sync_window>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <dir_next+0x142>
 800be36:	2301      	movs	r3, #1
 800be38:	e030      	b.n	800be9c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	3301      	adds	r3, #1
 800be3e:	613b      	str	r3, [r7, #16]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	631a      	str	r2, [r3, #48]	; 0x30
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	895b      	ldrh	r3, [r3, #10]
 800be4e:	461a      	mov	r2, r3
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	4293      	cmp	r3, r2
 800be54:	d3e6      	bcc.n	800be24 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	1ad2      	subs	r2, r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800be68:	6979      	ldr	r1, [r7, #20]
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f7ff fb80 	bl	800b570 <clust2sect>
 800be70:	4602      	mov	r2, r0
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	899b      	ldrh	r3, [r3, #12]
 800be86:	461a      	mov	r2, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	fbb3 f0f2 	udiv	r0, r3, r2
 800be8e:	fb02 f200 	mul.w	r2, r2, r0
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	18ca      	adds	r2, r1, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3718      	adds	r7, #24
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800beb4:	2100      	movs	r1, #0
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7ff fe95 	bl	800bbe6 <dir_sdi>
 800bebc:	4603      	mov	r3, r0
 800bebe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d12b      	bne.n	800bf1e <dir_alloc+0x7a>
		n = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	4619      	mov	r1, r3
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f7ff faaf 	bl	800b434 <move_window>
 800bed6:	4603      	mov	r3, r0
 800bed8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d11d      	bne.n	800bf1c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2be5      	cmp	r3, #229	; 0xe5
 800bee8:	d004      	beq.n	800bef4 <dir_alloc+0x50>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a1b      	ldr	r3, [r3, #32]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d107      	bne.n	800bf04 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	3301      	adds	r3, #1
 800bef8:	613b      	str	r3, [r7, #16]
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d102      	bne.n	800bf08 <dir_alloc+0x64>
 800bf02:	e00c      	b.n	800bf1e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bf04:	2300      	movs	r3, #0
 800bf06:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bf08:	2101      	movs	r1, #1
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff fef4 	bl	800bcf8 <dir_next>
 800bf10:	4603      	mov	r3, r0
 800bf12:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d0d7      	beq.n	800beca <dir_alloc+0x26>
 800bf1a:	e000      	b.n	800bf1e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bf1c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	2b04      	cmp	r3, #4
 800bf22:	d101      	bne.n	800bf28 <dir_alloc+0x84>
 800bf24:	2307      	movs	r3, #7
 800bf26:	75fb      	strb	r3, [r7, #23]
	return res;
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	331a      	adds	r3, #26
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe ffc7 	bl	800aed4 <ld_word>
 800bf46:	4603      	mov	r3, r0
 800bf48:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d109      	bne.n	800bf66 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	3314      	adds	r3, #20
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe ffbc 	bl	800aed4 <ld_word>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	041b      	lsls	r3, r3, #16
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bf66:	68fb      	ldr	r3, [r7, #12]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	331a      	adds	r3, #26
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	b292      	uxth	r2, r2
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7fe ffdf 	bl	800af4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	d109      	bne.n	800bfa8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	f103 0214 	add.w	r2, r3, #20
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	0c1b      	lsrs	r3, r3, #16
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	f7fe ffd1 	bl	800af4a <st_word>
	}
}
 800bfa8:	bf00      	nop
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b086      	sub	sp, #24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff fe10 	bl	800bbe6 <dir_sdi>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <dir_find+0x24>
 800bfd0:	7dfb      	ldrb	r3, [r7, #23]
 800bfd2:	e03e      	b.n	800c052 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6938      	ldr	r0, [r7, #16]
 800bfdc:	f7ff fa2a 	bl	800b434 <move_window>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bfe4:	7dfb      	ldrb	r3, [r7, #23]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d12f      	bne.n	800c04a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bff2:	7bfb      	ldrb	r3, [r7, #15]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d102      	bne.n	800bffe <dir_find+0x4e>
 800bff8:	2304      	movs	r3, #4
 800bffa:	75fb      	strb	r3, [r7, #23]
 800bffc:	e028      	b.n	800c050 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	330b      	adds	r3, #11
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	330b      	adds	r3, #11
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	f003 0308 	and.w	r3, r3, #8
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <dir_find+0x86>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a18      	ldr	r0, [r3, #32]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3324      	adds	r3, #36	; 0x24
 800c028:	220b      	movs	r2, #11
 800c02a:	4619      	mov	r1, r3
 800c02c:	f7ff f80f 	bl	800b04e <mem_cmp>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00b      	beq.n	800c04e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c036:	2100      	movs	r1, #0
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff fe5d 	bl	800bcf8 <dir_next>
 800c03e:	4603      	mov	r3, r0
 800c040:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d0c5      	beq.n	800bfd4 <dir_find+0x24>
 800c048:	e002      	b.n	800c050 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c04a:	bf00      	nop
 800c04c:	e000      	b.n	800c050 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c04e:	bf00      	nop

	return res;
 800c050:	7dfb      	ldrb	r3, [r7, #23]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3718      	adds	r7, #24
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b084      	sub	sp, #16
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c068:	2101      	movs	r1, #1
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff ff1a 	bl	800bea4 <dir_alloc>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d11c      	bne.n	800c0b4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	4619      	mov	r1, r3
 800c080:	68b8      	ldr	r0, [r7, #8]
 800c082:	f7ff f9d7 	bl	800b434 <move_window>
 800c086:	4603      	mov	r3, r0
 800c088:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d111      	bne.n	800c0b4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6a1b      	ldr	r3, [r3, #32]
 800c094:	2220      	movs	r2, #32
 800c096:	2100      	movs	r1, #0
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fe ffbe 	bl	800b01a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a18      	ldr	r0, [r3, #32]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3324      	adds	r3, #36	; 0x24
 800c0a6:	220b      	movs	r2, #11
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f7fe ff95 	bl	800afd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b088      	sub	sp, #32
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3324      	adds	r3, #36	; 0x24
 800c0d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c0d6:	220b      	movs	r2, #11
 800c0d8:	2120      	movs	r1, #32
 800c0da:	68b8      	ldr	r0, [r7, #8]
 800c0dc:	f7fe ff9d 	bl	800b01a <mem_set>
	si = i = 0; ni = 8;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	613b      	str	r3, [r7, #16]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	2308      	movs	r3, #8
 800c0ea:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	617a      	str	r2, [r7, #20]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c0fa:	7ffb      	ldrb	r3, [r7, #31]
 800c0fc:	2b20      	cmp	r3, #32
 800c0fe:	d94e      	bls.n	800c19e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c100:	7ffb      	ldrb	r3, [r7, #31]
 800c102:	2b2f      	cmp	r3, #47	; 0x2f
 800c104:	d006      	beq.n	800c114 <create_name+0x54>
 800c106:	7ffb      	ldrb	r3, [r7, #31]
 800c108:	2b5c      	cmp	r3, #92	; 0x5c
 800c10a:	d110      	bne.n	800c12e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c10c:	e002      	b.n	800c114 <create_name+0x54>
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	3301      	adds	r3, #1
 800c112:	617b      	str	r3, [r7, #20]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	4413      	add	r3, r2
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b2f      	cmp	r3, #47	; 0x2f
 800c11e:	d0f6      	beq.n	800c10e <create_name+0x4e>
 800c120:	68fa      	ldr	r2, [r7, #12]
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	4413      	add	r3, r2
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	2b5c      	cmp	r3, #92	; 0x5c
 800c12a:	d0f0      	beq.n	800c10e <create_name+0x4e>
			break;
 800c12c:	e038      	b.n	800c1a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c12e:	7ffb      	ldrb	r3, [r7, #31]
 800c130:	2b2e      	cmp	r3, #46	; 0x2e
 800c132:	d003      	beq.n	800c13c <create_name+0x7c>
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d30c      	bcc.n	800c156 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	2b0b      	cmp	r3, #11
 800c140:	d002      	beq.n	800c148 <create_name+0x88>
 800c142:	7ffb      	ldrb	r3, [r7, #31]
 800c144:	2b2e      	cmp	r3, #46	; 0x2e
 800c146:	d001      	beq.n	800c14c <create_name+0x8c>
 800c148:	2306      	movs	r3, #6
 800c14a:	e044      	b.n	800c1d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c14c:	2308      	movs	r3, #8
 800c14e:	613b      	str	r3, [r7, #16]
 800c150:	230b      	movs	r3, #11
 800c152:	61bb      	str	r3, [r7, #24]
			continue;
 800c154:	e022      	b.n	800c19c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c156:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	da04      	bge.n	800c168 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c15e:	7ffb      	ldrb	r3, [r7, #31]
 800c160:	3b80      	subs	r3, #128	; 0x80
 800c162:	4a1f      	ldr	r2, [pc, #124]	; (800c1e0 <create_name+0x120>)
 800c164:	5cd3      	ldrb	r3, [r2, r3]
 800c166:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c168:	7ffb      	ldrb	r3, [r7, #31]
 800c16a:	4619      	mov	r1, r3
 800c16c:	481d      	ldr	r0, [pc, #116]	; (800c1e4 <create_name+0x124>)
 800c16e:	f7fe ff95 	bl	800b09c <chk_chr>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <create_name+0xbc>
 800c178:	2306      	movs	r3, #6
 800c17a:	e02c      	b.n	800c1d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c17c:	7ffb      	ldrb	r3, [r7, #31]
 800c17e:	2b60      	cmp	r3, #96	; 0x60
 800c180:	d905      	bls.n	800c18e <create_name+0xce>
 800c182:	7ffb      	ldrb	r3, [r7, #31]
 800c184:	2b7a      	cmp	r3, #122	; 0x7a
 800c186:	d802      	bhi.n	800c18e <create_name+0xce>
 800c188:	7ffb      	ldrb	r3, [r7, #31]
 800c18a:	3b20      	subs	r3, #32
 800c18c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	613a      	str	r2, [r7, #16]
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	4413      	add	r3, r2
 800c198:	7ffa      	ldrb	r2, [r7, #31]
 800c19a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c19c:	e7a6      	b.n	800c0ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c19e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	441a      	add	r2, r3
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d101      	bne.n	800c1b4 <create_name+0xf4>
 800c1b0:	2306      	movs	r3, #6
 800c1b2:	e010      	b.n	800c1d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2be5      	cmp	r3, #229	; 0xe5
 800c1ba:	d102      	bne.n	800c1c2 <create_name+0x102>
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2205      	movs	r2, #5
 800c1c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c1c2:	7ffb      	ldrb	r3, [r7, #31]
 800c1c4:	2b20      	cmp	r3, #32
 800c1c6:	d801      	bhi.n	800c1cc <create_name+0x10c>
 800c1c8:	2204      	movs	r2, #4
 800c1ca:	e000      	b.n	800c1ce <create_name+0x10e>
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	330b      	adds	r3, #11
 800c1d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c1d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3720      	adds	r7, #32
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800ef74 	.word	0x0800ef74
 800c1e4:	0800ebfc 	.word	0x0800ebfc

0800c1e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b086      	sub	sp, #24
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c1fc:	e002      	b.n	800c204 <follow_path+0x1c>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	3301      	adds	r3, #1
 800c202:	603b      	str	r3, [r7, #0]
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b2f      	cmp	r3, #47	; 0x2f
 800c20a:	d0f8      	beq.n	800c1fe <follow_path+0x16>
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b5c      	cmp	r3, #92	; 0x5c
 800c212:	d0f4      	beq.n	800c1fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2200      	movs	r2, #0
 800c218:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b1f      	cmp	r3, #31
 800c220:	d80a      	bhi.n	800c238 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2280      	movs	r2, #128	; 0x80
 800c226:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c22a:	2100      	movs	r1, #0
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fcda 	bl	800bbe6 <dir_sdi>
 800c232:	4603      	mov	r3, r0
 800c234:	75fb      	strb	r3, [r7, #23]
 800c236:	e048      	b.n	800c2ca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c238:	463b      	mov	r3, r7
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f7ff ff3f 	bl	800c0c0 <create_name>
 800c242:	4603      	mov	r3, r0
 800c244:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c246:	7dfb      	ldrb	r3, [r7, #23]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d139      	bne.n	800c2c0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7ff feaf 	bl	800bfb0 <dir_find>
 800c252:	4603      	mov	r3, r0
 800c254:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c25c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c25e:	7dfb      	ldrb	r3, [r7, #23]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	2b04      	cmp	r3, #4
 800c268:	d12c      	bne.n	800c2c4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c26a:	7afb      	ldrb	r3, [r7, #11]
 800c26c:	f003 0304 	and.w	r3, r3, #4
 800c270:	2b00      	cmp	r3, #0
 800c272:	d127      	bne.n	800c2c4 <follow_path+0xdc>
 800c274:	2305      	movs	r3, #5
 800c276:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c278:	e024      	b.n	800c2c4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c27a:	7afb      	ldrb	r3, [r7, #11]
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d121      	bne.n	800c2c8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	799b      	ldrb	r3, [r3, #6]
 800c288:	f003 0310 	and.w	r3, r3, #16
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d102      	bne.n	800c296 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c290:	2305      	movs	r3, #5
 800c292:	75fb      	strb	r3, [r7, #23]
 800c294:	e019      	b.n	800c2ca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	8992      	ldrh	r2, [r2, #12]
 800c2a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2a8:	fb02 f200 	mul.w	r2, r2, r0
 800c2ac:	1a9b      	subs	r3, r3, r2
 800c2ae:	440b      	add	r3, r1
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f7ff fe3d 	bl	800bf32 <ld_clust>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c2be:	e7bb      	b.n	800c238 <follow_path+0x50>
			if (res != FR_OK) break;
 800c2c0:	bf00      	nop
 800c2c2:	e002      	b.n	800c2ca <follow_path+0xe2>
				break;
 800c2c4:	bf00      	nop
 800c2c6:	e000      	b.n	800c2ca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c2c8:	bf00      	nop
			}
		}
	}

	return res;
 800c2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3718      	adds	r7, #24
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b087      	sub	sp, #28
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d031      	beq.n	800c34e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	e002      	b.n	800c2f8 <get_ldnumber+0x24>
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b20      	cmp	r3, #32
 800c2fe:	d903      	bls.n	800c308 <get_ldnumber+0x34>
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b3a      	cmp	r3, #58	; 0x3a
 800c306:	d1f4      	bne.n	800c2f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	2b3a      	cmp	r3, #58	; 0x3a
 800c30e:	d11c      	bne.n	800c34a <get_ldnumber+0x76>
			tp = *path;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	1c5a      	adds	r2, r3, #1
 800c31a:	60fa      	str	r2, [r7, #12]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	3b30      	subs	r3, #48	; 0x30
 800c320:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	2b09      	cmp	r3, #9
 800c326:	d80e      	bhi.n	800c346 <get_ldnumber+0x72>
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d10a      	bne.n	800c346 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d107      	bne.n	800c346 <get_ldnumber+0x72>
					vol = (int)i;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	3301      	adds	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	e002      	b.n	800c350 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c34a:	2300      	movs	r3, #0
 800c34c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c34e:	693b      	ldr	r3, [r7, #16]
}
 800c350:	4618      	mov	r0, r3
 800c352:	371c      	adds	r7, #28
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	70da      	strb	r2, [r3, #3]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f04f 32ff 	mov.w	r2, #4294967295
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff f85c 	bl	800b434 <move_window>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <check_fs+0x2a>
 800c382:	2304      	movs	r3, #4
 800c384:	e038      	b.n	800c3f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3334      	adds	r3, #52	; 0x34
 800c38a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fda0 	bl	800aed4 <ld_word>
 800c394:	4603      	mov	r3, r0
 800c396:	461a      	mov	r2, r3
 800c398:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d001      	beq.n	800c3a4 <check_fs+0x48>
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e029      	b.n	800c3f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3aa:	2be9      	cmp	r3, #233	; 0xe9
 800c3ac:	d009      	beq.n	800c3c2 <check_fs+0x66>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3b4:	2beb      	cmp	r3, #235	; 0xeb
 800c3b6:	d11e      	bne.n	800c3f6 <check_fs+0x9a>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c3be:	2b90      	cmp	r3, #144	; 0x90
 800c3c0:	d119      	bne.n	800c3f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3334      	adds	r3, #52	; 0x34
 800c3c6:	3336      	adds	r3, #54	; 0x36
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fe fd9b 	bl	800af04 <ld_dword>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3d4:	4a0a      	ldr	r2, [pc, #40]	; (800c400 <check_fs+0xa4>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d101      	bne.n	800c3de <check_fs+0x82>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e00c      	b.n	800c3f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	3334      	adds	r3, #52	; 0x34
 800c3e2:	3352      	adds	r3, #82	; 0x52
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe fd8d 	bl	800af04 <ld_dword>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <check_fs+0xa8>)
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d101      	bne.n	800c3f6 <check_fs+0x9a>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e000      	b.n	800c3f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c3f6:	2302      	movs	r3, #2
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	00544146 	.word	0x00544146
 800c404:	33544146 	.word	0x33544146

0800c408 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b096      	sub	sp, #88	; 0x58
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	4613      	mov	r3, r2
 800c414:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff ff59 	bl	800c2d4 <get_ldnumber>
 800c422:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c426:	2b00      	cmp	r3, #0
 800c428:	da01      	bge.n	800c42e <find_volume+0x26>
 800c42a:	230b      	movs	r3, #11
 800c42c:	e265      	b.n	800c8fa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c42e:	4ab0      	ldr	r2, [pc, #704]	; (800c6f0 <find_volume+0x2e8>)
 800c430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c436:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <find_volume+0x3a>
 800c43e:	230c      	movs	r3, #12
 800c440:	e25b      	b.n	800c8fa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c446:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	f023 0301 	bic.w	r3, r3, #1
 800c44e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d01a      	beq.n	800c48e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	785b      	ldrb	r3, [r3, #1]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fe fc9b 	bl	800ad98 <disk_status>
 800c462:	4603      	mov	r3, r0
 800c464:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10c      	bne.n	800c48e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c474:	79fb      	ldrb	r3, [r7, #7]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d007      	beq.n	800c48a <find_volume+0x82>
 800c47a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c47e:	f003 0304 	and.w	r3, r3, #4
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c486:	230a      	movs	r3, #10
 800c488:	e237      	b.n	800c8fa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c48a:	2300      	movs	r3, #0
 800c48c:	e235      	b.n	800c8fa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c490:	2200      	movs	r2, #0
 800c492:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c496:	b2da      	uxtb	r2, r3
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49e:	785b      	ldrb	r3, [r3, #1]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fe fc93 	bl	800adcc <disk_initialize>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c4ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4b0:	f003 0301 	and.w	r3, r3, #1
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	e21e      	b.n	800c8fa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d007      	beq.n	800c4d2 <find_volume+0xca>
 800c4c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4c6:	f003 0304 	and.w	r3, r3, #4
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c4ce:	230a      	movs	r3, #10
 800c4d0:	e213      	b.n	800c8fa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d4:	7858      	ldrb	r0, [r3, #1]
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d8:	330c      	adds	r3, #12
 800c4da:	461a      	mov	r2, r3
 800c4dc:	2102      	movs	r1, #2
 800c4de:	f7fe fcdb 	bl	800ae98 <disk_ioctl>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d001      	beq.n	800c4ec <find_volume+0xe4>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e206      	b.n	800c8fa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ee:	899b      	ldrh	r3, [r3, #12]
 800c4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4f4:	d80d      	bhi.n	800c512 <find_volume+0x10a>
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f8:	899b      	ldrh	r3, [r3, #12]
 800c4fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4fe:	d308      	bcc.n	800c512 <find_volume+0x10a>
 800c500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c502:	899b      	ldrh	r3, [r3, #12]
 800c504:	461a      	mov	r2, r3
 800c506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c508:	899b      	ldrh	r3, [r3, #12]
 800c50a:	3b01      	subs	r3, #1
 800c50c:	4013      	ands	r3, r2
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d001      	beq.n	800c516 <find_volume+0x10e>
 800c512:	2301      	movs	r3, #1
 800c514:	e1f1      	b.n	800c8fa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c51a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c51c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c51e:	f7ff ff1d 	bl	800c35c <check_fs>
 800c522:	4603      	mov	r3, r0
 800c524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d14b      	bne.n	800c5c8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c530:	2300      	movs	r3, #0
 800c532:	643b      	str	r3, [r7, #64]	; 0x40
 800c534:	e01f      	b.n	800c576 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c53c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c53e:	011b      	lsls	r3, r3, #4
 800c540:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c544:	4413      	add	r3, r2
 800c546:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	3304      	adds	r3, #4
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d006      	beq.n	800c560 <find_volume+0x158>
 800c552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c554:	3308      	adds	r3, #8
 800c556:	4618      	mov	r0, r3
 800c558:	f7fe fcd4 	bl	800af04 <ld_dword>
 800c55c:	4602      	mov	r2, r0
 800c55e:	e000      	b.n	800c562 <find_volume+0x15a>
 800c560:	2200      	movs	r2, #0
 800c562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c56a:	440b      	add	r3, r1
 800c56c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c572:	3301      	adds	r3, #1
 800c574:	643b      	str	r3, [r7, #64]	; 0x40
 800c576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d9dc      	bls.n	800c536 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c57c:	2300      	movs	r3, #0
 800c57e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <find_volume+0x184>
 800c586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c588:	3b01      	subs	r3, #1
 800c58a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c58c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c594:	4413      	add	r3, r2
 800c596:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c59a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d005      	beq.n	800c5ae <find_volume+0x1a6>
 800c5a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5a6:	f7ff fed9 	bl	800c35c <check_fs>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	e000      	b.n	800c5b0 <find_volume+0x1a8>
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c5b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d905      	bls.n	800c5c8 <find_volume+0x1c0>
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5be:	3301      	adds	r3, #1
 800c5c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d9e1      	bls.n	800c58c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c5c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5cc:	2b04      	cmp	r3, #4
 800c5ce:	d101      	bne.n	800c5d4 <find_volume+0x1cc>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e192      	b.n	800c8fa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c5d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d901      	bls.n	800c5e0 <find_volume+0x1d8>
 800c5dc:	230d      	movs	r3, #13
 800c5de:	e18c      	b.n	800c8fa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	3334      	adds	r3, #52	; 0x34
 800c5e4:	330b      	adds	r3, #11
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fe fc74 	bl	800aed4 <ld_word>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f2:	899b      	ldrh	r3, [r3, #12]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d001      	beq.n	800c5fc <find_volume+0x1f4>
 800c5f8:	230d      	movs	r3, #13
 800c5fa:	e17e      	b.n	800c8fa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	3334      	adds	r3, #52	; 0x34
 800c600:	3316      	adds	r3, #22
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fc66 	bl	800aed4 <ld_word>
 800c608:	4603      	mov	r3, r0
 800c60a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c60c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d106      	bne.n	800c620 <find_volume+0x218>
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	3334      	adds	r3, #52	; 0x34
 800c616:	3324      	adds	r3, #36	; 0x24
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fc73 	bl	800af04 <ld_dword>
 800c61e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c624:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c628:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	789b      	ldrb	r3, [r3, #2]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d005      	beq.n	800c644 <find_volume+0x23c>
 800c638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63a:	789b      	ldrb	r3, [r3, #2]
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d001      	beq.n	800c644 <find_volume+0x23c>
 800c640:	230d      	movs	r3, #13
 800c642:	e15a      	b.n	800c8fa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c646:	789b      	ldrb	r3, [r3, #2]
 800c648:	461a      	mov	r2, r3
 800c64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c64c:	fb02 f303 	mul.w	r3, r2, r3
 800c650:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c658:	b29a      	uxth	r2, r3
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	895b      	ldrh	r3, [r3, #10]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d008      	beq.n	800c678 <find_volume+0x270>
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	895b      	ldrh	r3, [r3, #10]
 800c66a:	461a      	mov	r2, r3
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	895b      	ldrh	r3, [r3, #10]
 800c670:	3b01      	subs	r3, #1
 800c672:	4013      	ands	r3, r2
 800c674:	2b00      	cmp	r3, #0
 800c676:	d001      	beq.n	800c67c <find_volume+0x274>
 800c678:	230d      	movs	r3, #13
 800c67a:	e13e      	b.n	800c8fa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67e:	3334      	adds	r3, #52	; 0x34
 800c680:	3311      	adds	r3, #17
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe fc26 	bl	800aed4 <ld_word>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	891b      	ldrh	r3, [r3, #8]
 800c694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c696:	8992      	ldrh	r2, [r2, #12]
 800c698:	0952      	lsrs	r2, r2, #5
 800c69a:	b292      	uxth	r2, r2
 800c69c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6a0:	fb02 f201 	mul.w	r2, r2, r1
 800c6a4:	1a9b      	subs	r3, r3, r2
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <find_volume+0x2a8>
 800c6ac:	230d      	movs	r3, #13
 800c6ae:	e124      	b.n	800c8fa <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b2:	3334      	adds	r3, #52	; 0x34
 800c6b4:	3313      	adds	r3, #19
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fe fc0c 	bl	800aed4 <ld_word>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d106      	bne.n	800c6d4 <find_volume+0x2cc>
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	3334      	adds	r3, #52	; 0x34
 800c6ca:	3320      	adds	r3, #32
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f7fe fc19 	bl	800af04 <ld_dword>
 800c6d2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d6:	3334      	adds	r3, #52	; 0x34
 800c6d8:	330e      	adds	r3, #14
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe fbfa 	bl	800aed4 <ld_word>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c6e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d104      	bne.n	800c6f4 <find_volume+0x2ec>
 800c6ea:	230d      	movs	r3, #13
 800c6ec:	e105      	b.n	800c8fa <find_volume+0x4f2>
 800c6ee:	bf00      	nop
 800c6f0:	200003cc 	.word	0x200003cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c6f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6f8:	4413      	add	r3, r2
 800c6fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6fc:	8911      	ldrh	r1, [r2, #8]
 800c6fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c700:	8992      	ldrh	r2, [r2, #12]
 800c702:	0952      	lsrs	r2, r2, #5
 800c704:	b292      	uxth	r2, r2
 800c706:	fbb1 f2f2 	udiv	r2, r1, r2
 800c70a:	b292      	uxth	r2, r2
 800c70c:	4413      	add	r3, r2
 800c70e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c714:	429a      	cmp	r2, r3
 800c716:	d201      	bcs.n	800c71c <find_volume+0x314>
 800c718:	230d      	movs	r3, #13
 800c71a:	e0ee      	b.n	800c8fa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c71c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c724:	8952      	ldrh	r2, [r2, #10]
 800c726:	fbb3 f3f2 	udiv	r3, r3, r2
 800c72a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <find_volume+0x32e>
 800c732:	230d      	movs	r3, #13
 800c734:	e0e1      	b.n	800c8fa <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c736:	2303      	movs	r3, #3
 800c738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c742:	4293      	cmp	r3, r2
 800c744:	d802      	bhi.n	800c74c <find_volume+0x344>
 800c746:	2302      	movs	r3, #2
 800c748:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c752:	4293      	cmp	r3, r2
 800c754:	d802      	bhi.n	800c75c <find_volume+0x354>
 800c756:	2301      	movs	r3, #1
 800c758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75e:	1c9a      	adds	r2, r3, #2
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c768:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c76a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c76c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c76e:	441a      	add	r2, r3
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c774:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c778:	441a      	add	r2, r3
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c77e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c782:	2b03      	cmp	r3, #3
 800c784:	d11e      	bne.n	800c7c4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c788:	3334      	adds	r3, #52	; 0x34
 800c78a:	332a      	adds	r3, #42	; 0x2a
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe fba1 	bl	800aed4 <ld_word>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <find_volume+0x394>
 800c798:	230d      	movs	r3, #13
 800c79a:	e0ae      	b.n	800c8fa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	891b      	ldrh	r3, [r3, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d001      	beq.n	800c7a8 <find_volume+0x3a0>
 800c7a4:	230d      	movs	r3, #13
 800c7a6:	e0a8      	b.n	800c8fa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	3334      	adds	r3, #52	; 0x34
 800c7ac:	332c      	adds	r3, #44	; 0x2c
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fe fba8 	bl	800af04 <ld_dword>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c7c2:	e01f      	b.n	800c804 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	891b      	ldrh	r3, [r3, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <find_volume+0x3c8>
 800c7cc:	230d      	movs	r3, #13
 800c7ce:	e094      	b.n	800c8fa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7d6:	441a      	add	r2, r3
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7da:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d103      	bne.n	800c7ec <find_volume+0x3e4>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	699b      	ldr	r3, [r3, #24]
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	e00a      	b.n	800c802 <find_volume+0x3fa>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	699a      	ldr	r2, [r3, #24]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	4413      	add	r3, r2
 800c7f6:	085a      	lsrs	r2, r3, #1
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c802:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	69da      	ldr	r2, [r3, #28]
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	899b      	ldrh	r3, [r3, #12]
 800c80c:	4619      	mov	r1, r3
 800c80e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c810:	440b      	add	r3, r1
 800c812:	3b01      	subs	r3, #1
 800c814:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c816:	8989      	ldrh	r1, [r1, #12]
 800c818:	fbb3 f3f1 	udiv	r3, r3, r1
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d201      	bcs.n	800c824 <find_volume+0x41c>
 800c820:	230d      	movs	r3, #13
 800c822:	e06a      	b.n	800c8fa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	f04f 32ff 	mov.w	r2, #4294967295
 800c82a:	615a      	str	r2, [r3, #20]
 800c82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82e:	695a      	ldr	r2, [r3, #20]
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c836:	2280      	movs	r2, #128	; 0x80
 800c838:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c83a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c83e:	2b03      	cmp	r3, #3
 800c840:	d149      	bne.n	800c8d6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c844:	3334      	adds	r3, #52	; 0x34
 800c846:	3330      	adds	r3, #48	; 0x30
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fe fb43 	bl	800aed4 <ld_word>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b01      	cmp	r3, #1
 800c852:	d140      	bne.n	800c8d6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c856:	3301      	adds	r3, #1
 800c858:	4619      	mov	r1, r3
 800c85a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c85c:	f7fe fdea 	bl	800b434 <move_window>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d137      	bne.n	800c8d6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	2200      	movs	r2, #0
 800c86a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	3334      	adds	r3, #52	; 0x34
 800c870:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c874:	4618      	mov	r0, r3
 800c876:	f7fe fb2d 	bl	800aed4 <ld_word>
 800c87a:	4603      	mov	r3, r0
 800c87c:	461a      	mov	r2, r3
 800c87e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c882:	429a      	cmp	r2, r3
 800c884:	d127      	bne.n	800c8d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c888:	3334      	adds	r3, #52	; 0x34
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe fb3a 	bl	800af04 <ld_dword>
 800c890:	4602      	mov	r2, r0
 800c892:	4b1c      	ldr	r3, [pc, #112]	; (800c904 <find_volume+0x4fc>)
 800c894:	429a      	cmp	r2, r3
 800c896:	d11e      	bne.n	800c8d6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	3334      	adds	r3, #52	; 0x34
 800c89c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fe fb2f 	bl	800af04 <ld_dword>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	4b17      	ldr	r3, [pc, #92]	; (800c908 <find_volume+0x500>)
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d113      	bne.n	800c8d6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	3334      	adds	r3, #52	; 0x34
 800c8b2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe fb24 	bl	800af04 <ld_dword>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c4:	3334      	adds	r3, #52	; 0x34
 800c8c6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fe fb1a 	bl	800af04 <ld_dword>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c8dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c8de:	4b0b      	ldr	r3, [pc, #44]	; (800c90c <find_volume+0x504>)
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	4b09      	ldr	r3, [pc, #36]	; (800c90c <find_volume+0x504>)
 800c8e8:	801a      	strh	r2, [r3, #0]
 800c8ea:	4b08      	ldr	r3, [pc, #32]	; (800c90c <find_volume+0x504>)
 800c8ec:	881a      	ldrh	r2, [r3, #0]
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c8f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8f4:	f7fe fd36 	bl	800b364 <clear_lock>
#endif
	return FR_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3758      	adds	r7, #88	; 0x58
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	41615252 	.word	0x41615252
 800c908:	61417272 	.word	0x61417272
 800c90c:	200003d0 	.word	0x200003d0

0800c910 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c91a:	2309      	movs	r3, #9
 800c91c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01c      	beq.n	800c95e <validate+0x4e>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d018      	beq.n	800c95e <validate+0x4e>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d013      	beq.n	800c95e <validate+0x4e>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	889a      	ldrh	r2, [r3, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	88db      	ldrh	r3, [r3, #6]
 800c940:	429a      	cmp	r2, r3
 800c942:	d10c      	bne.n	800c95e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	785b      	ldrb	r3, [r3, #1]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fe fa24 	bl	800ad98 <disk_status>
 800c950:	4603      	mov	r3, r0
 800c952:	f003 0301 	and.w	r3, r3, #1
 800c956:	2b00      	cmp	r3, #0
 800c958:	d101      	bne.n	800c95e <validate+0x4e>
			res = FR_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <validate+0x5a>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	e000      	b.n	800c96c <validate+0x5c>
 800c96a:	2300      	movs	r3, #0
 800c96c:	683a      	ldr	r2, [r7, #0]
 800c96e:	6013      	str	r3, [r2, #0]
	return res;
 800c970:	7bfb      	ldrb	r3, [r7, #15]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	4613      	mov	r3, r2
 800c988:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c98e:	f107 0310 	add.w	r3, r7, #16
 800c992:	4618      	mov	r0, r3
 800c994:	f7ff fc9e 	bl	800c2d4 <get_ldnumber>
 800c998:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	da01      	bge.n	800c9a4 <f_mount+0x28>
 800c9a0:	230b      	movs	r3, #11
 800c9a2:	e02b      	b.n	800c9fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c9a4:	4a17      	ldr	r2, [pc, #92]	; (800ca04 <f_mount+0x88>)
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d005      	beq.n	800c9c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c9b4:	69b8      	ldr	r0, [r7, #24]
 800c9b6:	f7fe fcd5 	bl	800b364 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	490d      	ldr	r1, [pc, #52]	; (800ca04 <f_mount+0x88>)
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <f_mount+0x66>
 800c9dc:	79fb      	ldrb	r3, [r7, #7]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d001      	beq.n	800c9e6 <f_mount+0x6a>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e00a      	b.n	800c9fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c9e6:	f107 010c 	add.w	r1, r7, #12
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fd09 	bl	800c408 <find_volume>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	200003cc 	.word	0x200003cc

0800ca08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b098      	sub	sp, #96	; 0x60
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	4613      	mov	r3, r2
 800ca14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d101      	bne.n	800ca20 <f_open+0x18>
 800ca1c:	2309      	movs	r3, #9
 800ca1e:	e1bb      	b.n	800cd98 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ca20:	79fb      	ldrb	r3, [r7, #7]
 800ca22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ca28:	79fa      	ldrb	r2, [r7, #7]
 800ca2a:	f107 0110 	add.w	r1, r7, #16
 800ca2e:	f107 0308 	add.w	r3, r7, #8
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7ff fce8 	bl	800c408 <find_volume>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ca3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 819f 	bne.w	800cd86 <f_open+0x37e>
		dj.obj.fs = fs;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	f107 0314 	add.w	r3, r7, #20
 800ca52:	4611      	mov	r1, r2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7ff fbc7 	bl	800c1e8 <follow_path>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ca60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d11a      	bne.n	800ca9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ca68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca6c:	b25b      	sxtb	r3, r3
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	da03      	bge.n	800ca7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca72:	2306      	movs	r3, #6
 800ca74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ca78:	e011      	b.n	800ca9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	f023 0301 	bic.w	r3, r3, #1
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	bf14      	ite	ne
 800ca84:	2301      	movne	r3, #1
 800ca86:	2300      	moveq	r3, #0
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	f107 0314 	add.w	r3, r7, #20
 800ca90:	4611      	mov	r1, r2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe fb1e 	bl	800b0d4 <chk_lock>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca9e:	79fb      	ldrb	r3, [r7, #7]
 800caa0:	f003 031c 	and.w	r3, r3, #28
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d07f      	beq.n	800cba8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800caa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caac:	2b00      	cmp	r3, #0
 800caae:	d017      	beq.n	800cae0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cab4:	2b04      	cmp	r3, #4
 800cab6:	d10e      	bne.n	800cad6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cab8:	f7fe fb68 	bl	800b18c <enq_lock>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d006      	beq.n	800cad0 <f_open+0xc8>
 800cac2:	f107 0314 	add.w	r3, r7, #20
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7ff fac7 	bl	800c05a <dir_register>
 800cacc:	4603      	mov	r3, r0
 800cace:	e000      	b.n	800cad2 <f_open+0xca>
 800cad0:	2312      	movs	r3, #18
 800cad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	f043 0308 	orr.w	r3, r3, #8
 800cadc:	71fb      	strb	r3, [r7, #7]
 800cade:	e010      	b.n	800cb02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cae0:	7ebb      	ldrb	r3, [r7, #26]
 800cae2:	f003 0311 	and.w	r3, r3, #17
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <f_open+0xea>
					res = FR_DENIED;
 800caea:	2307      	movs	r3, #7
 800caec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800caf0:	e007      	b.n	800cb02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	f003 0304 	and.w	r3, r3, #4
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d002      	beq.n	800cb02 <f_open+0xfa>
 800cafc:	2308      	movs	r3, #8
 800cafe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cb02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d168      	bne.n	800cbdc <f_open+0x1d4>
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	f003 0308 	and.w	r3, r3, #8
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d063      	beq.n	800cbdc <f_open+0x1d4>
				dw = GET_FATTIME();
 800cb14:	f7fd ffd4 	bl	800aac0 <get_fattime>
 800cb18:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1c:	330e      	adds	r3, #14
 800cb1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe fa2d 	bl	800af80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb28:	3316      	adds	r3, #22
 800cb2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7fe fa27 	bl	800af80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb34:	330b      	adds	r3, #11
 800cb36:	2220      	movs	r2, #32
 800cb38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb3e:	4611      	mov	r1, r2
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff f9f6 	bl	800bf32 <ld_clust>
 800cb46:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7ff fa0e 	bl	800bf70 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cb54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb56:	331c      	adds	r3, #28
 800cb58:	2100      	movs	r1, #0
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fa10 	bl	800af80 <st_dword>
					fs->wflag = 1;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	2201      	movs	r2, #1
 800cb64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d037      	beq.n	800cbdc <f_open+0x1d4>
						dw = fs->winsect;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb70:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cb72:	f107 0314 	add.w	r3, r7, #20
 800cb76:	2200      	movs	r2, #0
 800cb78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fefe 	bl	800b97c <remove_chain>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cb86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d126      	bne.n	800cbdc <f_open+0x1d4>
							res = move_window(fs, dw);
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe fc4e 	bl	800b434 <move_window>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cba2:	3a01      	subs	r2, #1
 800cba4:	611a      	str	r2, [r3, #16]
 800cba6:	e019      	b.n	800cbdc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d115      	bne.n	800cbdc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cbb0:	7ebb      	ldrb	r3, [r7, #26]
 800cbb2:	f003 0310 	and.w	r3, r3, #16
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cbba:	2304      	movs	r3, #4
 800cbbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cbc0:	e00c      	b.n	800cbdc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	f003 0302 	and.w	r3, r3, #2
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d007      	beq.n	800cbdc <f_open+0x1d4>
 800cbcc:	7ebb      	ldrb	r3, [r7, #26]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d002      	beq.n	800cbdc <f_open+0x1d4>
						res = FR_DENIED;
 800cbd6:	2307      	movs	r3, #7
 800cbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cbdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d128      	bne.n	800cc36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	f003 0308 	and.w	r3, r3, #8
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d003      	beq.n	800cbf6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cbfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc04:	79fb      	ldrb	r3, [r7, #7]
 800cc06:	f023 0301 	bic.w	r3, r3, #1
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	bf14      	ite	ne
 800cc0e:	2301      	movne	r3, #1
 800cc10:	2300      	moveq	r3, #0
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	f107 0314 	add.w	r3, r7, #20
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fe fad7 	bl	800b1d0 <inc_lock>
 800cc22:	4602      	mov	r2, r0
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d102      	bne.n	800cc36 <f_open+0x22e>
 800cc30:	2302      	movs	r3, #2
 800cc32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cc36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f040 80a3 	bne.w	800cd86 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc44:	4611      	mov	r1, r2
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff f973 	bl	800bf32 <ld_clust>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc54:	331c      	adds	r3, #28
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fe f954 	bl	800af04 <ld_dword>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc68:	693a      	ldr	r2, [r7, #16]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	88da      	ldrh	r2, [r3, #6]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	79fa      	ldrb	r2, [r7, #7]
 800cc7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2200      	movs	r2, #0
 800cc86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3330      	adds	r3, #48	; 0x30
 800cc92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc96:	2100      	movs	r1, #0
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fe f9be 	bl	800b01a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc9e:	79fb      	ldrb	r3, [r7, #7]
 800cca0:	f003 0320 	and.w	r3, r3, #32
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d06e      	beq.n	800cd86 <f_open+0x37e>
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d06a      	beq.n	800cd86 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	68da      	ldr	r2, [r3, #12]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	895b      	ldrh	r3, [r3, #10]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	899b      	ldrh	r3, [r3, #12]
 800ccc2:	fb03 f302 	mul.w	r3, r3, r2
 800ccc6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	657b      	str	r3, [r7, #84]	; 0x54
 800ccd4:	e016      	b.n	800cd04 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe fc67 	bl	800b5ae <get_fat>
 800cce0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d802      	bhi.n	800ccee <f_open+0x2e6>
 800cce8:	2302      	movs	r3, #2
 800ccea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ccee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ccf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf4:	d102      	bne.n	800ccfc <f_open+0x2f4>
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ccfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	657b      	str	r3, [r7, #84]	; 0x54
 800cd04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d103      	bne.n	800cd14 <f_open+0x30c>
 800cd0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d8e0      	bhi.n	800ccd6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd18:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cd1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d131      	bne.n	800cd86 <f_open+0x37e>
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	899b      	ldrh	r3, [r3, #12]
 800cd26:	461a      	mov	r2, r3
 800cd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd2e:	fb02 f201 	mul.w	r2, r2, r1
 800cd32:	1a9b      	subs	r3, r3, r2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d026      	beq.n	800cd86 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fe fc17 	bl	800b570 <clust2sect>
 800cd42:	6478      	str	r0, [r7, #68]	; 0x44
 800cd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d103      	bne.n	800cd52 <f_open+0x34a>
						res = FR_INT_ERR;
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cd50:	e019      	b.n	800cd86 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	899b      	ldrh	r3, [r3, #12]
 800cd56:	461a      	mov	r2, r3
 800cd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd5a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd60:	441a      	add	r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	7858      	ldrb	r0, [r3, #1]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6a1a      	ldr	r2, [r3, #32]
 800cd74:	2301      	movs	r3, #1
 800cd76:	f7fe f84f 	bl	800ae18 <disk_read>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <f_open+0x37e>
 800cd80:	2301      	movs	r3, #1
 800cd82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d002      	beq.n	800cd94 <f_open+0x38c>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3760      	adds	r7, #96	; 0x60
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08e      	sub	sp, #56	; 0x38
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f107 0214 	add.w	r2, r7, #20
 800cdbe:	4611      	mov	r1, r2
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fda5 	bl	800c910 <validate>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cdcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d107      	bne.n	800cde4 <f_read+0x44>
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	7d5b      	ldrb	r3, [r3, #21]
 800cdd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <f_read+0x4a>
 800cde4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cde8:	e135      	b.n	800d056 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	7d1b      	ldrb	r3, [r3, #20]
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d101      	bne.n	800cdfa <f_read+0x5a>
 800cdf6:	2307      	movs	r3, #7
 800cdf8:	e12d      	b.n	800d056 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	68da      	ldr	r2, [r3, #12]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	f240 811e 	bls.w	800d04c <f_read+0x2ac>
 800ce10:	6a3b      	ldr	r3, [r7, #32]
 800ce12:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ce14:	e11a      	b.n	800d04c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	8992      	ldrh	r2, [r2, #12]
 800ce1e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce22:	fb02 f201 	mul.w	r2, r2, r1
 800ce26:	1a9b      	subs	r3, r3, r2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f040 80d5 	bne.w	800cfd8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	697a      	ldr	r2, [r7, #20]
 800ce34:	8992      	ldrh	r2, [r2, #12]
 800ce36:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	8952      	ldrh	r2, [r2, #10]
 800ce3e:	3a01      	subs	r2, #1
 800ce40:	4013      	ands	r3, r2
 800ce42:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d12f      	bne.n	800ceaa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d103      	bne.n	800ce5a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	633b      	str	r3, [r7, #48]	; 0x30
 800ce58:	e013      	b.n	800ce82 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d007      	beq.n	800ce72 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	699b      	ldr	r3, [r3, #24]
 800ce66:	4619      	mov	r1, r3
 800ce68:	68f8      	ldr	r0, [r7, #12]
 800ce6a:	f7fe fe84 	bl	800bb76 <clmt_clust>
 800ce6e:	6338      	str	r0, [r7, #48]	; 0x30
 800ce70:	e007      	b.n	800ce82 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	69db      	ldr	r3, [r3, #28]
 800ce78:	4619      	mov	r1, r3
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	f7fe fb97 	bl	800b5ae <get_fat>
 800ce80:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ce82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d804      	bhi.n	800ce92 <f_read+0xf2>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	755a      	strb	r2, [r3, #21]
 800ce8e:	2302      	movs	r3, #2
 800ce90:	e0e1      	b.n	800d056 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce98:	d104      	bne.n	800cea4 <f_read+0x104>
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	755a      	strb	r2, [r3, #21]
 800cea0:	2301      	movs	r3, #1
 800cea2:	e0d8      	b.n	800d056 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cea8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fe fb5c 	bl	800b570 <clust2sect>
 800ceb8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d104      	bne.n	800ceca <f_read+0x12a>
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2202      	movs	r2, #2
 800cec4:	755a      	strb	r2, [r3, #21]
 800cec6:	2302      	movs	r3, #2
 800cec8:	e0c5      	b.n	800d056 <f_read+0x2b6>
			sect += csect;
 800ceca:	69ba      	ldr	r2, [r7, #24]
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	4413      	add	r3, r2
 800ced0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	899b      	ldrh	r3, [r3, #12]
 800ced6:	461a      	mov	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	fbb3 f3f2 	udiv	r3, r3, r2
 800cede:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d041      	beq.n	800cf6a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cee6:	69fa      	ldr	r2, [r7, #28]
 800cee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceea:	4413      	add	r3, r2
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	8952      	ldrh	r2, [r2, #10]
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d905      	bls.n	800cf00 <f_read+0x160>
					cc = fs->csize - csect;
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	895b      	ldrh	r3, [r3, #10]
 800cef8:	461a      	mov	r2, r3
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	7858      	ldrb	r0, [r3, #1]
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	69ba      	ldr	r2, [r7, #24]
 800cf08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf0a:	f7fd ff85 	bl	800ae18 <disk_read>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d004      	beq.n	800cf1e <f_read+0x17e>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2201      	movs	r2, #1
 800cf18:	755a      	strb	r2, [r3, #21]
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e09b      	b.n	800d056 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	7d1b      	ldrb	r3, [r3, #20]
 800cf22:	b25b      	sxtb	r3, r3
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	da18      	bge.n	800cf5a <f_read+0x1ba>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6a1a      	ldr	r2, [r3, #32]
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d911      	bls.n	800cf5a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6a1a      	ldr	r2, [r3, #32]
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	697a      	ldr	r2, [r7, #20]
 800cf40:	8992      	ldrh	r2, [r2, #12]
 800cf42:	fb02 f303 	mul.w	r3, r2, r3
 800cf46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf48:	18d0      	adds	r0, r2, r3
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	899b      	ldrh	r3, [r3, #12]
 800cf54:	461a      	mov	r2, r3
 800cf56:	f7fe f83f 	bl	800afd8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	899b      	ldrh	r3, [r3, #12]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf62:	fb02 f303 	mul.w	r3, r2, r3
 800cf66:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cf68:	e05c      	b.n	800d024 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	69ba      	ldr	r2, [r7, #24]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d02e      	beq.n	800cfd2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	7d1b      	ldrb	r3, [r3, #20]
 800cf78:	b25b      	sxtb	r3, r3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	da18      	bge.n	800cfb0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	7858      	ldrb	r0, [r3, #1]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6a1a      	ldr	r2, [r3, #32]
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	f7fd ff63 	bl	800ae58 <disk_write>
 800cf92:	4603      	mov	r3, r0
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <f_read+0x202>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	755a      	strb	r2, [r3, #21]
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e059      	b.n	800d056 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	7d1b      	ldrb	r3, [r3, #20]
 800cfa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	7858      	ldrb	r0, [r3, #1]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cfba:	2301      	movs	r3, #1
 800cfbc:	69ba      	ldr	r2, [r7, #24]
 800cfbe:	f7fd ff2b 	bl	800ae18 <disk_read>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d004      	beq.n	800cfd2 <f_read+0x232>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	755a      	strb	r2, [r3, #21]
 800cfce:	2301      	movs	r3, #1
 800cfd0:	e041      	b.n	800d056 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	69ba      	ldr	r2, [r7, #24]
 800cfd6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	899b      	ldrh	r3, [r3, #12]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	699b      	ldr	r3, [r3, #24]
 800cfe2:	697a      	ldr	r2, [r7, #20]
 800cfe4:	8992      	ldrh	r2, [r2, #12]
 800cfe6:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfea:	fb02 f201 	mul.w	r2, r2, r1
 800cfee:	1a9b      	subs	r3, r3, r2
 800cff0:	1ac3      	subs	r3, r0, r3
 800cff2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d901      	bls.n	800d000 <f_read+0x260>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	8992      	ldrh	r2, [r2, #12]
 800d00e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d012:	fb02 f200 	mul.w	r2, r2, r0
 800d016:	1a9b      	subs	r3, r3, r2
 800d018:	440b      	add	r3, r1
 800d01a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d01c:	4619      	mov	r1, r3
 800d01e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d020:	f7fd ffda 	bl	800afd8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d028:	4413      	add	r3, r2
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	699a      	ldr	r2, [r3, #24]
 800d030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d032:	441a      	add	r2, r3
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	619a      	str	r2, [r3, #24]
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	441a      	add	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f47f aee1 	bne.w	800ce16 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3738      	adds	r7, #56	; 0x38
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b086      	sub	sp, #24
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f107 0208 	add.w	r2, r7, #8
 800d06c:	4611      	mov	r1, r2
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fc4e 	bl	800c910 <validate>
 800d074:	4603      	mov	r3, r0
 800d076:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d168      	bne.n	800d150 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	7d1b      	ldrb	r3, [r3, #20]
 800d082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	d062      	beq.n	800d150 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7d1b      	ldrb	r3, [r3, #20]
 800d08e:	b25b      	sxtb	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	da15      	bge.n	800d0c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	7858      	ldrb	r0, [r3, #1]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a1a      	ldr	r2, [r3, #32]
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	f7fd fed8 	bl	800ae58 <disk_write>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d001      	beq.n	800d0b2 <f_sync+0x54>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e04f      	b.n	800d152 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	7d1b      	ldrb	r3, [r3, #20]
 800d0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d0c0:	f7fd fcfe 	bl	800aac0 <get_fattime>
 800d0c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	4610      	mov	r0, r2
 800d0d0:	f7fe f9b0 	bl	800b434 <move_window>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d138      	bne.n	800d150 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	330b      	adds	r3, #11
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	330b      	adds	r3, #11
 800d0ee:	f042 0220 	orr.w	r2, r2, #32
 800d0f2:	b2d2      	uxtb	r2, r2
 800d0f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6818      	ldr	r0, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	461a      	mov	r2, r3
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	f7fe ff35 	bl	800bf70 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f103 021c 	add.w	r2, r3, #28
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	4619      	mov	r1, r3
 800d112:	4610      	mov	r0, r2
 800d114:	f7fd ff34 	bl	800af80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3316      	adds	r3, #22
 800d11c:	6939      	ldr	r1, [r7, #16]
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fd ff2e 	bl	800af80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3312      	adds	r3, #18
 800d128:	2100      	movs	r1, #0
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fd ff0d 	bl	800af4a <st_word>
					fs->wflag = 1;
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2201      	movs	r2, #1
 800d134:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fe f9a9 	bl	800b490 <sync_fs>
 800d13e:	4603      	mov	r3, r0
 800d140:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	7d1b      	ldrb	r3, [r3, #20]
 800d146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d150:	7dfb      	ldrb	r3, [r7, #23]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3718      	adds	r7, #24
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff ff7b 	bl	800d05e <f_sync>
 800d168:	4603      	mov	r3, r0
 800d16a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d118      	bne.n	800d1a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f107 0208 	add.w	r2, r7, #8
 800d178:	4611      	mov	r1, r2
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fbc8 	bl	800c910 <validate>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10c      	bne.n	800d1a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe f8ac 	bl	800b2ec <dec_lock>
 800d194:	4603      	mov	r3, r0
 800d196:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d102      	bne.n	800d1a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d1c6:	4b1f      	ldr	r3, [pc, #124]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d1c8:	7a5b      	ldrb	r3, [r3, #9]
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d131      	bne.n	800d234 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1d0:	4b1c      	ldr	r3, [pc, #112]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d1d2:	7a5b      	ldrb	r3, [r3, #9]
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	4b1a      	ldr	r3, [pc, #104]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d1da:	2100      	movs	r1, #0
 800d1dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1de:	4b19      	ldr	r3, [pc, #100]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d1e0:	7a5b      	ldrb	r3, [r3, #9]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	4a17      	ldr	r2, [pc, #92]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	4413      	add	r3, r2
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1ee:	4b15      	ldr	r3, [pc, #84]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d1f0:	7a5b      	ldrb	r3, [r3, #9]
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	4b13      	ldr	r3, [pc, #76]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d1f8:	4413      	add	r3, r2
 800d1fa:	79fa      	ldrb	r2, [r7, #7]
 800d1fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d1fe:	4b11      	ldr	r3, [pc, #68]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d200:	7a5b      	ldrb	r3, [r3, #9]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	b2d1      	uxtb	r1, r2
 800d208:	4a0e      	ldr	r2, [pc, #56]	; (800d244 <FATFS_LinkDriverEx+0x94>)
 800d20a:	7251      	strb	r1, [r2, #9]
 800d20c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d20e:	7dbb      	ldrb	r3, [r7, #22]
 800d210:	3330      	adds	r3, #48	; 0x30
 800d212:	b2da      	uxtb	r2, r3
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	3301      	adds	r3, #1
 800d21c:	223a      	movs	r2, #58	; 0x3a
 800d21e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	3302      	adds	r3, #2
 800d224:	222f      	movs	r2, #47	; 0x2f
 800d226:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	3303      	adds	r3, #3
 800d22c:	2200      	movs	r2, #0
 800d22e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d230:	2300      	movs	r3, #0
 800d232:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d234:	7dfb      	ldrb	r3, [r7, #23]
}
 800d236:	4618      	mov	r0, r3
 800d238:	371c      	adds	r7, #28
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	200003f4 	.word	0x200003f4

0800d248 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d252:	2200      	movs	r2, #0
 800d254:	6839      	ldr	r1, [r7, #0]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f7ff ffaa 	bl	800d1b0 <FATFS_LinkDriverEx>
 800d25c:	4603      	mov	r3, r0
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <__errno>:
 800d268:	4b01      	ldr	r3, [pc, #4]	; (800d270 <__errno+0x8>)
 800d26a:	6818      	ldr	r0, [r3, #0]
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	20000018 	.word	0x20000018

0800d274 <__libc_init_array>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	4e0d      	ldr	r6, [pc, #52]	; (800d2ac <__libc_init_array+0x38>)
 800d278:	4c0d      	ldr	r4, [pc, #52]	; (800d2b0 <__libc_init_array+0x3c>)
 800d27a:	1ba4      	subs	r4, r4, r6
 800d27c:	10a4      	asrs	r4, r4, #2
 800d27e:	2500      	movs	r5, #0
 800d280:	42a5      	cmp	r5, r4
 800d282:	d109      	bne.n	800d298 <__libc_init_array+0x24>
 800d284:	4e0b      	ldr	r6, [pc, #44]	; (800d2b4 <__libc_init_array+0x40>)
 800d286:	4c0c      	ldr	r4, [pc, #48]	; (800d2b8 <__libc_init_array+0x44>)
 800d288:	f001 fc4c 	bl	800eb24 <_init>
 800d28c:	1ba4      	subs	r4, r4, r6
 800d28e:	10a4      	asrs	r4, r4, #2
 800d290:	2500      	movs	r5, #0
 800d292:	42a5      	cmp	r5, r4
 800d294:	d105      	bne.n	800d2a2 <__libc_init_array+0x2e>
 800d296:	bd70      	pop	{r4, r5, r6, pc}
 800d298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d29c:	4798      	blx	r3
 800d29e:	3501      	adds	r5, #1
 800d2a0:	e7ee      	b.n	800d280 <__libc_init_array+0xc>
 800d2a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2a6:	4798      	blx	r3
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	e7f2      	b.n	800d292 <__libc_init_array+0x1e>
 800d2ac:	0800f208 	.word	0x0800f208
 800d2b0:	0800f208 	.word	0x0800f208
 800d2b4:	0800f208 	.word	0x0800f208
 800d2b8:	0800f20c 	.word	0x0800f20c

0800d2bc <memcpy>:
 800d2bc:	b510      	push	{r4, lr}
 800d2be:	1e43      	subs	r3, r0, #1
 800d2c0:	440a      	add	r2, r1
 800d2c2:	4291      	cmp	r1, r2
 800d2c4:	d100      	bne.n	800d2c8 <memcpy+0xc>
 800d2c6:	bd10      	pop	{r4, pc}
 800d2c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2d0:	e7f7      	b.n	800d2c2 <memcpy+0x6>

0800d2d2 <memset>:
 800d2d2:	4402      	add	r2, r0
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d100      	bne.n	800d2dc <memset+0xa>
 800d2da:	4770      	bx	lr
 800d2dc:	f803 1b01 	strb.w	r1, [r3], #1
 800d2e0:	e7f9      	b.n	800d2d6 <memset+0x4>

0800d2e2 <strncmp>:
 800d2e2:	b510      	push	{r4, lr}
 800d2e4:	b16a      	cbz	r2, 800d302 <strncmp+0x20>
 800d2e6:	3901      	subs	r1, #1
 800d2e8:	1884      	adds	r4, r0, r2
 800d2ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d2ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d103      	bne.n	800d2fe <strncmp+0x1c>
 800d2f6:	42a0      	cmp	r0, r4
 800d2f8:	d001      	beq.n	800d2fe <strncmp+0x1c>
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1f5      	bne.n	800d2ea <strncmp+0x8>
 800d2fe:	1a98      	subs	r0, r3, r2
 800d300:	bd10      	pop	{r4, pc}
 800d302:	4610      	mov	r0, r2
 800d304:	e7fc      	b.n	800d300 <strncmp+0x1e>
	...

0800d308 <_vsiprintf_r>:
 800d308:	b500      	push	{lr}
 800d30a:	b09b      	sub	sp, #108	; 0x6c
 800d30c:	9100      	str	r1, [sp, #0]
 800d30e:	9104      	str	r1, [sp, #16]
 800d310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d314:	9105      	str	r1, [sp, #20]
 800d316:	9102      	str	r1, [sp, #8]
 800d318:	4905      	ldr	r1, [pc, #20]	; (800d330 <_vsiprintf_r+0x28>)
 800d31a:	9103      	str	r1, [sp, #12]
 800d31c:	4669      	mov	r1, sp
 800d31e:	f000 f86d 	bl	800d3fc <_svfiprintf_r>
 800d322:	9b00      	ldr	r3, [sp, #0]
 800d324:	2200      	movs	r2, #0
 800d326:	701a      	strb	r2, [r3, #0]
 800d328:	b01b      	add	sp, #108	; 0x6c
 800d32a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d32e:	bf00      	nop
 800d330:	ffff0208 	.word	0xffff0208

0800d334 <vsiprintf>:
 800d334:	4613      	mov	r3, r2
 800d336:	460a      	mov	r2, r1
 800d338:	4601      	mov	r1, r0
 800d33a:	4802      	ldr	r0, [pc, #8]	; (800d344 <vsiprintf+0x10>)
 800d33c:	6800      	ldr	r0, [r0, #0]
 800d33e:	f7ff bfe3 	b.w	800d308 <_vsiprintf_r>
 800d342:	bf00      	nop
 800d344:	20000018 	.word	0x20000018

0800d348 <__ssputs_r>:
 800d348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	688e      	ldr	r6, [r1, #8]
 800d34e:	429e      	cmp	r6, r3
 800d350:	4682      	mov	sl, r0
 800d352:	460c      	mov	r4, r1
 800d354:	4690      	mov	r8, r2
 800d356:	4699      	mov	r9, r3
 800d358:	d837      	bhi.n	800d3ca <__ssputs_r+0x82>
 800d35a:	898a      	ldrh	r2, [r1, #12]
 800d35c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d360:	d031      	beq.n	800d3c6 <__ssputs_r+0x7e>
 800d362:	6825      	ldr	r5, [r4, #0]
 800d364:	6909      	ldr	r1, [r1, #16]
 800d366:	1a6f      	subs	r7, r5, r1
 800d368:	6965      	ldr	r5, [r4, #20]
 800d36a:	2302      	movs	r3, #2
 800d36c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d370:	fb95 f5f3 	sdiv	r5, r5, r3
 800d374:	f109 0301 	add.w	r3, r9, #1
 800d378:	443b      	add	r3, r7
 800d37a:	429d      	cmp	r5, r3
 800d37c:	bf38      	it	cc
 800d37e:	461d      	movcc	r5, r3
 800d380:	0553      	lsls	r3, r2, #21
 800d382:	d530      	bpl.n	800d3e6 <__ssputs_r+0x9e>
 800d384:	4629      	mov	r1, r5
 800d386:	f000 fb21 	bl	800d9cc <_malloc_r>
 800d38a:	4606      	mov	r6, r0
 800d38c:	b950      	cbnz	r0, 800d3a4 <__ssputs_r+0x5c>
 800d38e:	230c      	movs	r3, #12
 800d390:	f8ca 3000 	str.w	r3, [sl]
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3a4:	463a      	mov	r2, r7
 800d3a6:	6921      	ldr	r1, [r4, #16]
 800d3a8:	f7ff ff88 	bl	800d2bc <memcpy>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	6126      	str	r6, [r4, #16]
 800d3ba:	6165      	str	r5, [r4, #20]
 800d3bc:	443e      	add	r6, r7
 800d3be:	1bed      	subs	r5, r5, r7
 800d3c0:	6026      	str	r6, [r4, #0]
 800d3c2:	60a5      	str	r5, [r4, #8]
 800d3c4:	464e      	mov	r6, r9
 800d3c6:	454e      	cmp	r6, r9
 800d3c8:	d900      	bls.n	800d3cc <__ssputs_r+0x84>
 800d3ca:	464e      	mov	r6, r9
 800d3cc:	4632      	mov	r2, r6
 800d3ce:	4641      	mov	r1, r8
 800d3d0:	6820      	ldr	r0, [r4, #0]
 800d3d2:	f000 fa93 	bl	800d8fc <memmove>
 800d3d6:	68a3      	ldr	r3, [r4, #8]
 800d3d8:	1b9b      	subs	r3, r3, r6
 800d3da:	60a3      	str	r3, [r4, #8]
 800d3dc:	6823      	ldr	r3, [r4, #0]
 800d3de:	441e      	add	r6, r3
 800d3e0:	6026      	str	r6, [r4, #0]
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	e7dc      	b.n	800d3a0 <__ssputs_r+0x58>
 800d3e6:	462a      	mov	r2, r5
 800d3e8:	f000 fb4a 	bl	800da80 <_realloc_r>
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d1e2      	bne.n	800d3b8 <__ssputs_r+0x70>
 800d3f2:	6921      	ldr	r1, [r4, #16]
 800d3f4:	4650      	mov	r0, sl
 800d3f6:	f000 fa9b 	bl	800d930 <_free_r>
 800d3fa:	e7c8      	b.n	800d38e <__ssputs_r+0x46>

0800d3fc <_svfiprintf_r>:
 800d3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d400:	461d      	mov	r5, r3
 800d402:	898b      	ldrh	r3, [r1, #12]
 800d404:	061f      	lsls	r7, r3, #24
 800d406:	b09d      	sub	sp, #116	; 0x74
 800d408:	4680      	mov	r8, r0
 800d40a:	460c      	mov	r4, r1
 800d40c:	4616      	mov	r6, r2
 800d40e:	d50f      	bpl.n	800d430 <_svfiprintf_r+0x34>
 800d410:	690b      	ldr	r3, [r1, #16]
 800d412:	b96b      	cbnz	r3, 800d430 <_svfiprintf_r+0x34>
 800d414:	2140      	movs	r1, #64	; 0x40
 800d416:	f000 fad9 	bl	800d9cc <_malloc_r>
 800d41a:	6020      	str	r0, [r4, #0]
 800d41c:	6120      	str	r0, [r4, #16]
 800d41e:	b928      	cbnz	r0, 800d42c <_svfiprintf_r+0x30>
 800d420:	230c      	movs	r3, #12
 800d422:	f8c8 3000 	str.w	r3, [r8]
 800d426:	f04f 30ff 	mov.w	r0, #4294967295
 800d42a:	e0c8      	b.n	800d5be <_svfiprintf_r+0x1c2>
 800d42c:	2340      	movs	r3, #64	; 0x40
 800d42e:	6163      	str	r3, [r4, #20]
 800d430:	2300      	movs	r3, #0
 800d432:	9309      	str	r3, [sp, #36]	; 0x24
 800d434:	2320      	movs	r3, #32
 800d436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d43a:	2330      	movs	r3, #48	; 0x30
 800d43c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d440:	9503      	str	r5, [sp, #12]
 800d442:	f04f 0b01 	mov.w	fp, #1
 800d446:	4637      	mov	r7, r6
 800d448:	463d      	mov	r5, r7
 800d44a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d44e:	b10b      	cbz	r3, 800d454 <_svfiprintf_r+0x58>
 800d450:	2b25      	cmp	r3, #37	; 0x25
 800d452:	d13e      	bne.n	800d4d2 <_svfiprintf_r+0xd6>
 800d454:	ebb7 0a06 	subs.w	sl, r7, r6
 800d458:	d00b      	beq.n	800d472 <_svfiprintf_r+0x76>
 800d45a:	4653      	mov	r3, sl
 800d45c:	4632      	mov	r2, r6
 800d45e:	4621      	mov	r1, r4
 800d460:	4640      	mov	r0, r8
 800d462:	f7ff ff71 	bl	800d348 <__ssputs_r>
 800d466:	3001      	adds	r0, #1
 800d468:	f000 80a4 	beq.w	800d5b4 <_svfiprintf_r+0x1b8>
 800d46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d46e:	4453      	add	r3, sl
 800d470:	9309      	str	r3, [sp, #36]	; 0x24
 800d472:	783b      	ldrb	r3, [r7, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 809d 	beq.w	800d5b4 <_svfiprintf_r+0x1b8>
 800d47a:	2300      	movs	r3, #0
 800d47c:	f04f 32ff 	mov.w	r2, #4294967295
 800d480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	9307      	str	r3, [sp, #28]
 800d488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d48c:	931a      	str	r3, [sp, #104]	; 0x68
 800d48e:	462f      	mov	r7, r5
 800d490:	2205      	movs	r2, #5
 800d492:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d496:	4850      	ldr	r0, [pc, #320]	; (800d5d8 <_svfiprintf_r+0x1dc>)
 800d498:	f7f2 fea2 	bl	80001e0 <memchr>
 800d49c:	9b04      	ldr	r3, [sp, #16]
 800d49e:	b9d0      	cbnz	r0, 800d4d6 <_svfiprintf_r+0xda>
 800d4a0:	06d9      	lsls	r1, r3, #27
 800d4a2:	bf44      	itt	mi
 800d4a4:	2220      	movmi	r2, #32
 800d4a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4aa:	071a      	lsls	r2, r3, #28
 800d4ac:	bf44      	itt	mi
 800d4ae:	222b      	movmi	r2, #43	; 0x2b
 800d4b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d4b4:	782a      	ldrb	r2, [r5, #0]
 800d4b6:	2a2a      	cmp	r2, #42	; 0x2a
 800d4b8:	d015      	beq.n	800d4e6 <_svfiprintf_r+0xea>
 800d4ba:	9a07      	ldr	r2, [sp, #28]
 800d4bc:	462f      	mov	r7, r5
 800d4be:	2000      	movs	r0, #0
 800d4c0:	250a      	movs	r5, #10
 800d4c2:	4639      	mov	r1, r7
 800d4c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4c8:	3b30      	subs	r3, #48	; 0x30
 800d4ca:	2b09      	cmp	r3, #9
 800d4cc:	d94d      	bls.n	800d56a <_svfiprintf_r+0x16e>
 800d4ce:	b1b8      	cbz	r0, 800d500 <_svfiprintf_r+0x104>
 800d4d0:	e00f      	b.n	800d4f2 <_svfiprintf_r+0xf6>
 800d4d2:	462f      	mov	r7, r5
 800d4d4:	e7b8      	b.n	800d448 <_svfiprintf_r+0x4c>
 800d4d6:	4a40      	ldr	r2, [pc, #256]	; (800d5d8 <_svfiprintf_r+0x1dc>)
 800d4d8:	1a80      	subs	r0, r0, r2
 800d4da:	fa0b f000 	lsl.w	r0, fp, r0
 800d4de:	4318      	orrs	r0, r3
 800d4e0:	9004      	str	r0, [sp, #16]
 800d4e2:	463d      	mov	r5, r7
 800d4e4:	e7d3      	b.n	800d48e <_svfiprintf_r+0x92>
 800d4e6:	9a03      	ldr	r2, [sp, #12]
 800d4e8:	1d11      	adds	r1, r2, #4
 800d4ea:	6812      	ldr	r2, [r2, #0]
 800d4ec:	9103      	str	r1, [sp, #12]
 800d4ee:	2a00      	cmp	r2, #0
 800d4f0:	db01      	blt.n	800d4f6 <_svfiprintf_r+0xfa>
 800d4f2:	9207      	str	r2, [sp, #28]
 800d4f4:	e004      	b.n	800d500 <_svfiprintf_r+0x104>
 800d4f6:	4252      	negs	r2, r2
 800d4f8:	f043 0302 	orr.w	r3, r3, #2
 800d4fc:	9207      	str	r2, [sp, #28]
 800d4fe:	9304      	str	r3, [sp, #16]
 800d500:	783b      	ldrb	r3, [r7, #0]
 800d502:	2b2e      	cmp	r3, #46	; 0x2e
 800d504:	d10c      	bne.n	800d520 <_svfiprintf_r+0x124>
 800d506:	787b      	ldrb	r3, [r7, #1]
 800d508:	2b2a      	cmp	r3, #42	; 0x2a
 800d50a:	d133      	bne.n	800d574 <_svfiprintf_r+0x178>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	1d1a      	adds	r2, r3, #4
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	9203      	str	r2, [sp, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	bfb8      	it	lt
 800d518:	f04f 33ff 	movlt.w	r3, #4294967295
 800d51c:	3702      	adds	r7, #2
 800d51e:	9305      	str	r3, [sp, #20]
 800d520:	4d2e      	ldr	r5, [pc, #184]	; (800d5dc <_svfiprintf_r+0x1e0>)
 800d522:	7839      	ldrb	r1, [r7, #0]
 800d524:	2203      	movs	r2, #3
 800d526:	4628      	mov	r0, r5
 800d528:	f7f2 fe5a 	bl	80001e0 <memchr>
 800d52c:	b138      	cbz	r0, 800d53e <_svfiprintf_r+0x142>
 800d52e:	2340      	movs	r3, #64	; 0x40
 800d530:	1b40      	subs	r0, r0, r5
 800d532:	fa03 f000 	lsl.w	r0, r3, r0
 800d536:	9b04      	ldr	r3, [sp, #16]
 800d538:	4303      	orrs	r3, r0
 800d53a:	3701      	adds	r7, #1
 800d53c:	9304      	str	r3, [sp, #16]
 800d53e:	7839      	ldrb	r1, [r7, #0]
 800d540:	4827      	ldr	r0, [pc, #156]	; (800d5e0 <_svfiprintf_r+0x1e4>)
 800d542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d546:	2206      	movs	r2, #6
 800d548:	1c7e      	adds	r6, r7, #1
 800d54a:	f7f2 fe49 	bl	80001e0 <memchr>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d038      	beq.n	800d5c4 <_svfiprintf_r+0x1c8>
 800d552:	4b24      	ldr	r3, [pc, #144]	; (800d5e4 <_svfiprintf_r+0x1e8>)
 800d554:	bb13      	cbnz	r3, 800d59c <_svfiprintf_r+0x1a0>
 800d556:	9b03      	ldr	r3, [sp, #12]
 800d558:	3307      	adds	r3, #7
 800d55a:	f023 0307 	bic.w	r3, r3, #7
 800d55e:	3308      	adds	r3, #8
 800d560:	9303      	str	r3, [sp, #12]
 800d562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d564:	444b      	add	r3, r9
 800d566:	9309      	str	r3, [sp, #36]	; 0x24
 800d568:	e76d      	b.n	800d446 <_svfiprintf_r+0x4a>
 800d56a:	fb05 3202 	mla	r2, r5, r2, r3
 800d56e:	2001      	movs	r0, #1
 800d570:	460f      	mov	r7, r1
 800d572:	e7a6      	b.n	800d4c2 <_svfiprintf_r+0xc6>
 800d574:	2300      	movs	r3, #0
 800d576:	3701      	adds	r7, #1
 800d578:	9305      	str	r3, [sp, #20]
 800d57a:	4619      	mov	r1, r3
 800d57c:	250a      	movs	r5, #10
 800d57e:	4638      	mov	r0, r7
 800d580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d584:	3a30      	subs	r2, #48	; 0x30
 800d586:	2a09      	cmp	r2, #9
 800d588:	d903      	bls.n	800d592 <_svfiprintf_r+0x196>
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0c8      	beq.n	800d520 <_svfiprintf_r+0x124>
 800d58e:	9105      	str	r1, [sp, #20]
 800d590:	e7c6      	b.n	800d520 <_svfiprintf_r+0x124>
 800d592:	fb05 2101 	mla	r1, r5, r1, r2
 800d596:	2301      	movs	r3, #1
 800d598:	4607      	mov	r7, r0
 800d59a:	e7f0      	b.n	800d57e <_svfiprintf_r+0x182>
 800d59c:	ab03      	add	r3, sp, #12
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	4622      	mov	r2, r4
 800d5a2:	4b11      	ldr	r3, [pc, #68]	; (800d5e8 <_svfiprintf_r+0x1ec>)
 800d5a4:	a904      	add	r1, sp, #16
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	f3af 8000 	nop.w
 800d5ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d5b0:	4681      	mov	r9, r0
 800d5b2:	d1d6      	bne.n	800d562 <_svfiprintf_r+0x166>
 800d5b4:	89a3      	ldrh	r3, [r4, #12]
 800d5b6:	065b      	lsls	r3, r3, #25
 800d5b8:	f53f af35 	bmi.w	800d426 <_svfiprintf_r+0x2a>
 800d5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5be:	b01d      	add	sp, #116	; 0x74
 800d5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c4:	ab03      	add	r3, sp, #12
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	4622      	mov	r2, r4
 800d5ca:	4b07      	ldr	r3, [pc, #28]	; (800d5e8 <_svfiprintf_r+0x1ec>)
 800d5cc:	a904      	add	r1, sp, #16
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	f000 f882 	bl	800d6d8 <_printf_i>
 800d5d4:	e7ea      	b.n	800d5ac <_svfiprintf_r+0x1b0>
 800d5d6:	bf00      	nop
 800d5d8:	0800eff4 	.word	0x0800eff4
 800d5dc:	0800effa 	.word	0x0800effa
 800d5e0:	0800effe 	.word	0x0800effe
 800d5e4:	00000000 	.word	0x00000000
 800d5e8:	0800d349 	.word	0x0800d349

0800d5ec <_printf_common>:
 800d5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f0:	4691      	mov	r9, r2
 800d5f2:	461f      	mov	r7, r3
 800d5f4:	688a      	ldr	r2, [r1, #8]
 800d5f6:	690b      	ldr	r3, [r1, #16]
 800d5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	bfb8      	it	lt
 800d600:	4613      	movlt	r3, r2
 800d602:	f8c9 3000 	str.w	r3, [r9]
 800d606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d60a:	4606      	mov	r6, r0
 800d60c:	460c      	mov	r4, r1
 800d60e:	b112      	cbz	r2, 800d616 <_printf_common+0x2a>
 800d610:	3301      	adds	r3, #1
 800d612:	f8c9 3000 	str.w	r3, [r9]
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	0699      	lsls	r1, r3, #26
 800d61a:	bf42      	ittt	mi
 800d61c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d620:	3302      	addmi	r3, #2
 800d622:	f8c9 3000 	strmi.w	r3, [r9]
 800d626:	6825      	ldr	r5, [r4, #0]
 800d628:	f015 0506 	ands.w	r5, r5, #6
 800d62c:	d107      	bne.n	800d63e <_printf_common+0x52>
 800d62e:	f104 0a19 	add.w	sl, r4, #25
 800d632:	68e3      	ldr	r3, [r4, #12]
 800d634:	f8d9 2000 	ldr.w	r2, [r9]
 800d638:	1a9b      	subs	r3, r3, r2
 800d63a:	42ab      	cmp	r3, r5
 800d63c:	dc28      	bgt.n	800d690 <_printf_common+0xa4>
 800d63e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d642:	6822      	ldr	r2, [r4, #0]
 800d644:	3300      	adds	r3, #0
 800d646:	bf18      	it	ne
 800d648:	2301      	movne	r3, #1
 800d64a:	0692      	lsls	r2, r2, #26
 800d64c:	d42d      	bmi.n	800d6aa <_printf_common+0xbe>
 800d64e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d652:	4639      	mov	r1, r7
 800d654:	4630      	mov	r0, r6
 800d656:	47c0      	blx	r8
 800d658:	3001      	adds	r0, #1
 800d65a:	d020      	beq.n	800d69e <_printf_common+0xb2>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	68e5      	ldr	r5, [r4, #12]
 800d660:	f8d9 2000 	ldr.w	r2, [r9]
 800d664:	f003 0306 	and.w	r3, r3, #6
 800d668:	2b04      	cmp	r3, #4
 800d66a:	bf08      	it	eq
 800d66c:	1aad      	subeq	r5, r5, r2
 800d66e:	68a3      	ldr	r3, [r4, #8]
 800d670:	6922      	ldr	r2, [r4, #16]
 800d672:	bf0c      	ite	eq
 800d674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d678:	2500      	movne	r5, #0
 800d67a:	4293      	cmp	r3, r2
 800d67c:	bfc4      	itt	gt
 800d67e:	1a9b      	subgt	r3, r3, r2
 800d680:	18ed      	addgt	r5, r5, r3
 800d682:	f04f 0900 	mov.w	r9, #0
 800d686:	341a      	adds	r4, #26
 800d688:	454d      	cmp	r5, r9
 800d68a:	d11a      	bne.n	800d6c2 <_printf_common+0xd6>
 800d68c:	2000      	movs	r0, #0
 800d68e:	e008      	b.n	800d6a2 <_printf_common+0xb6>
 800d690:	2301      	movs	r3, #1
 800d692:	4652      	mov	r2, sl
 800d694:	4639      	mov	r1, r7
 800d696:	4630      	mov	r0, r6
 800d698:	47c0      	blx	r8
 800d69a:	3001      	adds	r0, #1
 800d69c:	d103      	bne.n	800d6a6 <_printf_common+0xba>
 800d69e:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6a6:	3501      	adds	r5, #1
 800d6a8:	e7c3      	b.n	800d632 <_printf_common+0x46>
 800d6aa:	18e1      	adds	r1, r4, r3
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	2030      	movs	r0, #48	; 0x30
 800d6b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6b4:	4422      	add	r2, r4
 800d6b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6be:	3302      	adds	r3, #2
 800d6c0:	e7c5      	b.n	800d64e <_printf_common+0x62>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	4639      	mov	r1, r7
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	47c0      	blx	r8
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d0e6      	beq.n	800d69e <_printf_common+0xb2>
 800d6d0:	f109 0901 	add.w	r9, r9, #1
 800d6d4:	e7d8      	b.n	800d688 <_printf_common+0x9c>
	...

0800d6d8 <_printf_i>:
 800d6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	7e09      	ldrb	r1, [r1, #24]
 800d6e4:	b085      	sub	sp, #20
 800d6e6:	296e      	cmp	r1, #110	; 0x6e
 800d6e8:	4617      	mov	r7, r2
 800d6ea:	4606      	mov	r6, r0
 800d6ec:	4698      	mov	r8, r3
 800d6ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6f0:	f000 80b3 	beq.w	800d85a <_printf_i+0x182>
 800d6f4:	d822      	bhi.n	800d73c <_printf_i+0x64>
 800d6f6:	2963      	cmp	r1, #99	; 0x63
 800d6f8:	d036      	beq.n	800d768 <_printf_i+0x90>
 800d6fa:	d80a      	bhi.n	800d712 <_printf_i+0x3a>
 800d6fc:	2900      	cmp	r1, #0
 800d6fe:	f000 80b9 	beq.w	800d874 <_printf_i+0x19c>
 800d702:	2958      	cmp	r1, #88	; 0x58
 800d704:	f000 8083 	beq.w	800d80e <_printf_i+0x136>
 800d708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d70c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d710:	e032      	b.n	800d778 <_printf_i+0xa0>
 800d712:	2964      	cmp	r1, #100	; 0x64
 800d714:	d001      	beq.n	800d71a <_printf_i+0x42>
 800d716:	2969      	cmp	r1, #105	; 0x69
 800d718:	d1f6      	bne.n	800d708 <_printf_i+0x30>
 800d71a:	6820      	ldr	r0, [r4, #0]
 800d71c:	6813      	ldr	r3, [r2, #0]
 800d71e:	0605      	lsls	r5, r0, #24
 800d720:	f103 0104 	add.w	r1, r3, #4
 800d724:	d52a      	bpl.n	800d77c <_printf_i+0xa4>
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6011      	str	r1, [r2, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	da03      	bge.n	800d736 <_printf_i+0x5e>
 800d72e:	222d      	movs	r2, #45	; 0x2d
 800d730:	425b      	negs	r3, r3
 800d732:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d736:	486f      	ldr	r0, [pc, #444]	; (800d8f4 <_printf_i+0x21c>)
 800d738:	220a      	movs	r2, #10
 800d73a:	e039      	b.n	800d7b0 <_printf_i+0xd8>
 800d73c:	2973      	cmp	r1, #115	; 0x73
 800d73e:	f000 809d 	beq.w	800d87c <_printf_i+0x1a4>
 800d742:	d808      	bhi.n	800d756 <_printf_i+0x7e>
 800d744:	296f      	cmp	r1, #111	; 0x6f
 800d746:	d020      	beq.n	800d78a <_printf_i+0xb2>
 800d748:	2970      	cmp	r1, #112	; 0x70
 800d74a:	d1dd      	bne.n	800d708 <_printf_i+0x30>
 800d74c:	6823      	ldr	r3, [r4, #0]
 800d74e:	f043 0320 	orr.w	r3, r3, #32
 800d752:	6023      	str	r3, [r4, #0]
 800d754:	e003      	b.n	800d75e <_printf_i+0x86>
 800d756:	2975      	cmp	r1, #117	; 0x75
 800d758:	d017      	beq.n	800d78a <_printf_i+0xb2>
 800d75a:	2978      	cmp	r1, #120	; 0x78
 800d75c:	d1d4      	bne.n	800d708 <_printf_i+0x30>
 800d75e:	2378      	movs	r3, #120	; 0x78
 800d760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d764:	4864      	ldr	r0, [pc, #400]	; (800d8f8 <_printf_i+0x220>)
 800d766:	e055      	b.n	800d814 <_printf_i+0x13c>
 800d768:	6813      	ldr	r3, [r2, #0]
 800d76a:	1d19      	adds	r1, r3, #4
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	6011      	str	r1, [r2, #0]
 800d770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d778:	2301      	movs	r3, #1
 800d77a:	e08c      	b.n	800d896 <_printf_i+0x1be>
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6011      	str	r1, [r2, #0]
 800d780:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d784:	bf18      	it	ne
 800d786:	b21b      	sxthne	r3, r3
 800d788:	e7cf      	b.n	800d72a <_printf_i+0x52>
 800d78a:	6813      	ldr	r3, [r2, #0]
 800d78c:	6825      	ldr	r5, [r4, #0]
 800d78e:	1d18      	adds	r0, r3, #4
 800d790:	6010      	str	r0, [r2, #0]
 800d792:	0628      	lsls	r0, r5, #24
 800d794:	d501      	bpl.n	800d79a <_printf_i+0xc2>
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	e002      	b.n	800d7a0 <_printf_i+0xc8>
 800d79a:	0668      	lsls	r0, r5, #25
 800d79c:	d5fb      	bpl.n	800d796 <_printf_i+0xbe>
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	4854      	ldr	r0, [pc, #336]	; (800d8f4 <_printf_i+0x21c>)
 800d7a2:	296f      	cmp	r1, #111	; 0x6f
 800d7a4:	bf14      	ite	ne
 800d7a6:	220a      	movne	r2, #10
 800d7a8:	2208      	moveq	r2, #8
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7b0:	6865      	ldr	r5, [r4, #4]
 800d7b2:	60a5      	str	r5, [r4, #8]
 800d7b4:	2d00      	cmp	r5, #0
 800d7b6:	f2c0 8095 	blt.w	800d8e4 <_printf_i+0x20c>
 800d7ba:	6821      	ldr	r1, [r4, #0]
 800d7bc:	f021 0104 	bic.w	r1, r1, #4
 800d7c0:	6021      	str	r1, [r4, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d13d      	bne.n	800d842 <_printf_i+0x16a>
 800d7c6:	2d00      	cmp	r5, #0
 800d7c8:	f040 808e 	bne.w	800d8e8 <_printf_i+0x210>
 800d7cc:	4665      	mov	r5, ip
 800d7ce:	2a08      	cmp	r2, #8
 800d7d0:	d10b      	bne.n	800d7ea <_printf_i+0x112>
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	07db      	lsls	r3, r3, #31
 800d7d6:	d508      	bpl.n	800d7ea <_printf_i+0x112>
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	6862      	ldr	r2, [r4, #4]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	bfde      	ittt	le
 800d7e0:	2330      	movle	r3, #48	; 0x30
 800d7e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7ea:	ebac 0305 	sub.w	r3, ip, r5
 800d7ee:	6123      	str	r3, [r4, #16]
 800d7f0:	f8cd 8000 	str.w	r8, [sp]
 800d7f4:	463b      	mov	r3, r7
 800d7f6:	aa03      	add	r2, sp, #12
 800d7f8:	4621      	mov	r1, r4
 800d7fa:	4630      	mov	r0, r6
 800d7fc:	f7ff fef6 	bl	800d5ec <_printf_common>
 800d800:	3001      	adds	r0, #1
 800d802:	d14d      	bne.n	800d8a0 <_printf_i+0x1c8>
 800d804:	f04f 30ff 	mov.w	r0, #4294967295
 800d808:	b005      	add	sp, #20
 800d80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d80e:	4839      	ldr	r0, [pc, #228]	; (800d8f4 <_printf_i+0x21c>)
 800d810:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d814:	6813      	ldr	r3, [r2, #0]
 800d816:	6821      	ldr	r1, [r4, #0]
 800d818:	1d1d      	adds	r5, r3, #4
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6015      	str	r5, [r2, #0]
 800d81e:	060a      	lsls	r2, r1, #24
 800d820:	d50b      	bpl.n	800d83a <_printf_i+0x162>
 800d822:	07ca      	lsls	r2, r1, #31
 800d824:	bf44      	itt	mi
 800d826:	f041 0120 	orrmi.w	r1, r1, #32
 800d82a:	6021      	strmi	r1, [r4, #0]
 800d82c:	b91b      	cbnz	r3, 800d836 <_printf_i+0x15e>
 800d82e:	6822      	ldr	r2, [r4, #0]
 800d830:	f022 0220 	bic.w	r2, r2, #32
 800d834:	6022      	str	r2, [r4, #0]
 800d836:	2210      	movs	r2, #16
 800d838:	e7b7      	b.n	800d7aa <_printf_i+0xd2>
 800d83a:	064d      	lsls	r5, r1, #25
 800d83c:	bf48      	it	mi
 800d83e:	b29b      	uxthmi	r3, r3
 800d840:	e7ef      	b.n	800d822 <_printf_i+0x14a>
 800d842:	4665      	mov	r5, ip
 800d844:	fbb3 f1f2 	udiv	r1, r3, r2
 800d848:	fb02 3311 	mls	r3, r2, r1, r3
 800d84c:	5cc3      	ldrb	r3, [r0, r3]
 800d84e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d852:	460b      	mov	r3, r1
 800d854:	2900      	cmp	r1, #0
 800d856:	d1f5      	bne.n	800d844 <_printf_i+0x16c>
 800d858:	e7b9      	b.n	800d7ce <_printf_i+0xf6>
 800d85a:	6813      	ldr	r3, [r2, #0]
 800d85c:	6825      	ldr	r5, [r4, #0]
 800d85e:	6961      	ldr	r1, [r4, #20]
 800d860:	1d18      	adds	r0, r3, #4
 800d862:	6010      	str	r0, [r2, #0]
 800d864:	0628      	lsls	r0, r5, #24
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	d501      	bpl.n	800d86e <_printf_i+0x196>
 800d86a:	6019      	str	r1, [r3, #0]
 800d86c:	e002      	b.n	800d874 <_printf_i+0x19c>
 800d86e:	066a      	lsls	r2, r5, #25
 800d870:	d5fb      	bpl.n	800d86a <_printf_i+0x192>
 800d872:	8019      	strh	r1, [r3, #0]
 800d874:	2300      	movs	r3, #0
 800d876:	6123      	str	r3, [r4, #16]
 800d878:	4665      	mov	r5, ip
 800d87a:	e7b9      	b.n	800d7f0 <_printf_i+0x118>
 800d87c:	6813      	ldr	r3, [r2, #0]
 800d87e:	1d19      	adds	r1, r3, #4
 800d880:	6011      	str	r1, [r2, #0]
 800d882:	681d      	ldr	r5, [r3, #0]
 800d884:	6862      	ldr	r2, [r4, #4]
 800d886:	2100      	movs	r1, #0
 800d888:	4628      	mov	r0, r5
 800d88a:	f7f2 fca9 	bl	80001e0 <memchr>
 800d88e:	b108      	cbz	r0, 800d894 <_printf_i+0x1bc>
 800d890:	1b40      	subs	r0, r0, r5
 800d892:	6060      	str	r0, [r4, #4]
 800d894:	6863      	ldr	r3, [r4, #4]
 800d896:	6123      	str	r3, [r4, #16]
 800d898:	2300      	movs	r3, #0
 800d89a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d89e:	e7a7      	b.n	800d7f0 <_printf_i+0x118>
 800d8a0:	6923      	ldr	r3, [r4, #16]
 800d8a2:	462a      	mov	r2, r5
 800d8a4:	4639      	mov	r1, r7
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	47c0      	blx	r8
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d0aa      	beq.n	800d804 <_printf_i+0x12c>
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	079b      	lsls	r3, r3, #30
 800d8b2:	d413      	bmi.n	800d8dc <_printf_i+0x204>
 800d8b4:	68e0      	ldr	r0, [r4, #12]
 800d8b6:	9b03      	ldr	r3, [sp, #12]
 800d8b8:	4298      	cmp	r0, r3
 800d8ba:	bfb8      	it	lt
 800d8bc:	4618      	movlt	r0, r3
 800d8be:	e7a3      	b.n	800d808 <_printf_i+0x130>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	464a      	mov	r2, r9
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	47c0      	blx	r8
 800d8ca:	3001      	adds	r0, #1
 800d8cc:	d09a      	beq.n	800d804 <_printf_i+0x12c>
 800d8ce:	3501      	adds	r5, #1
 800d8d0:	68e3      	ldr	r3, [r4, #12]
 800d8d2:	9a03      	ldr	r2, [sp, #12]
 800d8d4:	1a9b      	subs	r3, r3, r2
 800d8d6:	42ab      	cmp	r3, r5
 800d8d8:	dcf2      	bgt.n	800d8c0 <_printf_i+0x1e8>
 800d8da:	e7eb      	b.n	800d8b4 <_printf_i+0x1dc>
 800d8dc:	2500      	movs	r5, #0
 800d8de:	f104 0919 	add.w	r9, r4, #25
 800d8e2:	e7f5      	b.n	800d8d0 <_printf_i+0x1f8>
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1ac      	bne.n	800d842 <_printf_i+0x16a>
 800d8e8:	7803      	ldrb	r3, [r0, #0]
 800d8ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8f2:	e76c      	b.n	800d7ce <_printf_i+0xf6>
 800d8f4:	0800f005 	.word	0x0800f005
 800d8f8:	0800f016 	.word	0x0800f016

0800d8fc <memmove>:
 800d8fc:	4288      	cmp	r0, r1
 800d8fe:	b510      	push	{r4, lr}
 800d900:	eb01 0302 	add.w	r3, r1, r2
 800d904:	d807      	bhi.n	800d916 <memmove+0x1a>
 800d906:	1e42      	subs	r2, r0, #1
 800d908:	4299      	cmp	r1, r3
 800d90a:	d00a      	beq.n	800d922 <memmove+0x26>
 800d90c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d910:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d914:	e7f8      	b.n	800d908 <memmove+0xc>
 800d916:	4283      	cmp	r3, r0
 800d918:	d9f5      	bls.n	800d906 <memmove+0xa>
 800d91a:	1881      	adds	r1, r0, r2
 800d91c:	1ad2      	subs	r2, r2, r3
 800d91e:	42d3      	cmn	r3, r2
 800d920:	d100      	bne.n	800d924 <memmove+0x28>
 800d922:	bd10      	pop	{r4, pc}
 800d924:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d928:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d92c:	e7f7      	b.n	800d91e <memmove+0x22>
	...

0800d930 <_free_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4605      	mov	r5, r0
 800d934:	2900      	cmp	r1, #0
 800d936:	d045      	beq.n	800d9c4 <_free_r+0x94>
 800d938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d93c:	1f0c      	subs	r4, r1, #4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	bfb8      	it	lt
 800d942:	18e4      	addlt	r4, r4, r3
 800d944:	f000 f8d2 	bl	800daec <__malloc_lock>
 800d948:	4a1f      	ldr	r2, [pc, #124]	; (800d9c8 <_free_r+0x98>)
 800d94a:	6813      	ldr	r3, [r2, #0]
 800d94c:	4610      	mov	r0, r2
 800d94e:	b933      	cbnz	r3, 800d95e <_free_r+0x2e>
 800d950:	6063      	str	r3, [r4, #4]
 800d952:	6014      	str	r4, [r2, #0]
 800d954:	4628      	mov	r0, r5
 800d956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d95a:	f000 b8c8 	b.w	800daee <__malloc_unlock>
 800d95e:	42a3      	cmp	r3, r4
 800d960:	d90c      	bls.n	800d97c <_free_r+0x4c>
 800d962:	6821      	ldr	r1, [r4, #0]
 800d964:	1862      	adds	r2, r4, r1
 800d966:	4293      	cmp	r3, r2
 800d968:	bf04      	itt	eq
 800d96a:	681a      	ldreq	r2, [r3, #0]
 800d96c:	685b      	ldreq	r3, [r3, #4]
 800d96e:	6063      	str	r3, [r4, #4]
 800d970:	bf04      	itt	eq
 800d972:	1852      	addeq	r2, r2, r1
 800d974:	6022      	streq	r2, [r4, #0]
 800d976:	6004      	str	r4, [r0, #0]
 800d978:	e7ec      	b.n	800d954 <_free_r+0x24>
 800d97a:	4613      	mov	r3, r2
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	b10a      	cbz	r2, 800d984 <_free_r+0x54>
 800d980:	42a2      	cmp	r2, r4
 800d982:	d9fa      	bls.n	800d97a <_free_r+0x4a>
 800d984:	6819      	ldr	r1, [r3, #0]
 800d986:	1858      	adds	r0, r3, r1
 800d988:	42a0      	cmp	r0, r4
 800d98a:	d10b      	bne.n	800d9a4 <_free_r+0x74>
 800d98c:	6820      	ldr	r0, [r4, #0]
 800d98e:	4401      	add	r1, r0
 800d990:	1858      	adds	r0, r3, r1
 800d992:	4282      	cmp	r2, r0
 800d994:	6019      	str	r1, [r3, #0]
 800d996:	d1dd      	bne.n	800d954 <_free_r+0x24>
 800d998:	6810      	ldr	r0, [r2, #0]
 800d99a:	6852      	ldr	r2, [r2, #4]
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	4401      	add	r1, r0
 800d9a0:	6019      	str	r1, [r3, #0]
 800d9a2:	e7d7      	b.n	800d954 <_free_r+0x24>
 800d9a4:	d902      	bls.n	800d9ac <_free_r+0x7c>
 800d9a6:	230c      	movs	r3, #12
 800d9a8:	602b      	str	r3, [r5, #0]
 800d9aa:	e7d3      	b.n	800d954 <_free_r+0x24>
 800d9ac:	6820      	ldr	r0, [r4, #0]
 800d9ae:	1821      	adds	r1, r4, r0
 800d9b0:	428a      	cmp	r2, r1
 800d9b2:	bf04      	itt	eq
 800d9b4:	6811      	ldreq	r1, [r2, #0]
 800d9b6:	6852      	ldreq	r2, [r2, #4]
 800d9b8:	6062      	str	r2, [r4, #4]
 800d9ba:	bf04      	itt	eq
 800d9bc:	1809      	addeq	r1, r1, r0
 800d9be:	6021      	streq	r1, [r4, #0]
 800d9c0:	605c      	str	r4, [r3, #4]
 800d9c2:	e7c7      	b.n	800d954 <_free_r+0x24>
 800d9c4:	bd38      	pop	{r3, r4, r5, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20000400 	.word	0x20000400

0800d9cc <_malloc_r>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	1ccd      	adds	r5, r1, #3
 800d9d0:	f025 0503 	bic.w	r5, r5, #3
 800d9d4:	3508      	adds	r5, #8
 800d9d6:	2d0c      	cmp	r5, #12
 800d9d8:	bf38      	it	cc
 800d9da:	250c      	movcc	r5, #12
 800d9dc:	2d00      	cmp	r5, #0
 800d9de:	4606      	mov	r6, r0
 800d9e0:	db01      	blt.n	800d9e6 <_malloc_r+0x1a>
 800d9e2:	42a9      	cmp	r1, r5
 800d9e4:	d903      	bls.n	800d9ee <_malloc_r+0x22>
 800d9e6:	230c      	movs	r3, #12
 800d9e8:	6033      	str	r3, [r6, #0]
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	bd70      	pop	{r4, r5, r6, pc}
 800d9ee:	f000 f87d 	bl	800daec <__malloc_lock>
 800d9f2:	4a21      	ldr	r2, [pc, #132]	; (800da78 <_malloc_r+0xac>)
 800d9f4:	6814      	ldr	r4, [r2, #0]
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	b991      	cbnz	r1, 800da20 <_malloc_r+0x54>
 800d9fa:	4c20      	ldr	r4, [pc, #128]	; (800da7c <_malloc_r+0xb0>)
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	b91b      	cbnz	r3, 800da08 <_malloc_r+0x3c>
 800da00:	4630      	mov	r0, r6
 800da02:	f000 f863 	bl	800dacc <_sbrk_r>
 800da06:	6020      	str	r0, [r4, #0]
 800da08:	4629      	mov	r1, r5
 800da0a:	4630      	mov	r0, r6
 800da0c:	f000 f85e 	bl	800dacc <_sbrk_r>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d124      	bne.n	800da5e <_malloc_r+0x92>
 800da14:	230c      	movs	r3, #12
 800da16:	6033      	str	r3, [r6, #0]
 800da18:	4630      	mov	r0, r6
 800da1a:	f000 f868 	bl	800daee <__malloc_unlock>
 800da1e:	e7e4      	b.n	800d9ea <_malloc_r+0x1e>
 800da20:	680b      	ldr	r3, [r1, #0]
 800da22:	1b5b      	subs	r3, r3, r5
 800da24:	d418      	bmi.n	800da58 <_malloc_r+0x8c>
 800da26:	2b0b      	cmp	r3, #11
 800da28:	d90f      	bls.n	800da4a <_malloc_r+0x7e>
 800da2a:	600b      	str	r3, [r1, #0]
 800da2c:	50cd      	str	r5, [r1, r3]
 800da2e:	18cc      	adds	r4, r1, r3
 800da30:	4630      	mov	r0, r6
 800da32:	f000 f85c 	bl	800daee <__malloc_unlock>
 800da36:	f104 000b 	add.w	r0, r4, #11
 800da3a:	1d23      	adds	r3, r4, #4
 800da3c:	f020 0007 	bic.w	r0, r0, #7
 800da40:	1ac3      	subs	r3, r0, r3
 800da42:	d0d3      	beq.n	800d9ec <_malloc_r+0x20>
 800da44:	425a      	negs	r2, r3
 800da46:	50e2      	str	r2, [r4, r3]
 800da48:	e7d0      	b.n	800d9ec <_malloc_r+0x20>
 800da4a:	428c      	cmp	r4, r1
 800da4c:	684b      	ldr	r3, [r1, #4]
 800da4e:	bf16      	itet	ne
 800da50:	6063      	strne	r3, [r4, #4]
 800da52:	6013      	streq	r3, [r2, #0]
 800da54:	460c      	movne	r4, r1
 800da56:	e7eb      	b.n	800da30 <_malloc_r+0x64>
 800da58:	460c      	mov	r4, r1
 800da5a:	6849      	ldr	r1, [r1, #4]
 800da5c:	e7cc      	b.n	800d9f8 <_malloc_r+0x2c>
 800da5e:	1cc4      	adds	r4, r0, #3
 800da60:	f024 0403 	bic.w	r4, r4, #3
 800da64:	42a0      	cmp	r0, r4
 800da66:	d005      	beq.n	800da74 <_malloc_r+0xa8>
 800da68:	1a21      	subs	r1, r4, r0
 800da6a:	4630      	mov	r0, r6
 800da6c:	f000 f82e 	bl	800dacc <_sbrk_r>
 800da70:	3001      	adds	r0, #1
 800da72:	d0cf      	beq.n	800da14 <_malloc_r+0x48>
 800da74:	6025      	str	r5, [r4, #0]
 800da76:	e7db      	b.n	800da30 <_malloc_r+0x64>
 800da78:	20000400 	.word	0x20000400
 800da7c:	20000404 	.word	0x20000404

0800da80 <_realloc_r>:
 800da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da82:	4607      	mov	r7, r0
 800da84:	4614      	mov	r4, r2
 800da86:	460e      	mov	r6, r1
 800da88:	b921      	cbnz	r1, 800da94 <_realloc_r+0x14>
 800da8a:	4611      	mov	r1, r2
 800da8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da90:	f7ff bf9c 	b.w	800d9cc <_malloc_r>
 800da94:	b922      	cbnz	r2, 800daa0 <_realloc_r+0x20>
 800da96:	f7ff ff4b 	bl	800d930 <_free_r>
 800da9a:	4625      	mov	r5, r4
 800da9c:	4628      	mov	r0, r5
 800da9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa0:	f000 f826 	bl	800daf0 <_malloc_usable_size_r>
 800daa4:	42a0      	cmp	r0, r4
 800daa6:	d20f      	bcs.n	800dac8 <_realloc_r+0x48>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4638      	mov	r0, r7
 800daac:	f7ff ff8e 	bl	800d9cc <_malloc_r>
 800dab0:	4605      	mov	r5, r0
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0f2      	beq.n	800da9c <_realloc_r+0x1c>
 800dab6:	4631      	mov	r1, r6
 800dab8:	4622      	mov	r2, r4
 800daba:	f7ff fbff 	bl	800d2bc <memcpy>
 800dabe:	4631      	mov	r1, r6
 800dac0:	4638      	mov	r0, r7
 800dac2:	f7ff ff35 	bl	800d930 <_free_r>
 800dac6:	e7e9      	b.n	800da9c <_realloc_r+0x1c>
 800dac8:	4635      	mov	r5, r6
 800daca:	e7e7      	b.n	800da9c <_realloc_r+0x1c>

0800dacc <_sbrk_r>:
 800dacc:	b538      	push	{r3, r4, r5, lr}
 800dace:	4c06      	ldr	r4, [pc, #24]	; (800dae8 <_sbrk_r+0x1c>)
 800dad0:	2300      	movs	r3, #0
 800dad2:	4605      	mov	r5, r0
 800dad4:	4608      	mov	r0, r1
 800dad6:	6023      	str	r3, [r4, #0]
 800dad8:	f7f6 f9cc 	bl	8003e74 <_sbrk>
 800dadc:	1c43      	adds	r3, r0, #1
 800dade:	d102      	bne.n	800dae6 <_sbrk_r+0x1a>
 800dae0:	6823      	ldr	r3, [r4, #0]
 800dae2:	b103      	cbz	r3, 800dae6 <_sbrk_r+0x1a>
 800dae4:	602b      	str	r3, [r5, #0]
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	200122c4 	.word	0x200122c4

0800daec <__malloc_lock>:
 800daec:	4770      	bx	lr

0800daee <__malloc_unlock>:
 800daee:	4770      	bx	lr

0800daf0 <_malloc_usable_size_r>:
 800daf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daf4:	1f18      	subs	r0, r3, #4
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	bfbc      	itt	lt
 800dafa:	580b      	ldrlt	r3, [r1, r0]
 800dafc:	18c0      	addlt	r0, r0, r3
 800dafe:	4770      	bx	lr

0800db00 <sin>:
 800db00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db02:	ec51 0b10 	vmov	r0, r1, d0
 800db06:	4a20      	ldr	r2, [pc, #128]	; (800db88 <sin+0x88>)
 800db08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db0c:	4293      	cmp	r3, r2
 800db0e:	dc07      	bgt.n	800db20 <sin+0x20>
 800db10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800db80 <sin+0x80>
 800db14:	2000      	movs	r0, #0
 800db16:	f000 fe37 	bl	800e788 <__kernel_sin>
 800db1a:	ec51 0b10 	vmov	r0, r1, d0
 800db1e:	e007      	b.n	800db30 <sin+0x30>
 800db20:	4a1a      	ldr	r2, [pc, #104]	; (800db8c <sin+0x8c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	dd09      	ble.n	800db3a <sin+0x3a>
 800db26:	ee10 2a10 	vmov	r2, s0
 800db2a:	460b      	mov	r3, r1
 800db2c:	f7f2 fbac 	bl	8000288 <__aeabi_dsub>
 800db30:	ec41 0b10 	vmov	d0, r0, r1
 800db34:	b005      	add	sp, #20
 800db36:	f85d fb04 	ldr.w	pc, [sp], #4
 800db3a:	4668      	mov	r0, sp
 800db3c:	f000 f828 	bl	800db90 <__ieee754_rem_pio2>
 800db40:	f000 0003 	and.w	r0, r0, #3
 800db44:	2801      	cmp	r0, #1
 800db46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db4a:	ed9d 0b00 	vldr	d0, [sp]
 800db4e:	d004      	beq.n	800db5a <sin+0x5a>
 800db50:	2802      	cmp	r0, #2
 800db52:	d005      	beq.n	800db60 <sin+0x60>
 800db54:	b970      	cbnz	r0, 800db74 <sin+0x74>
 800db56:	2001      	movs	r0, #1
 800db58:	e7dd      	b.n	800db16 <sin+0x16>
 800db5a:	f000 fa0d 	bl	800df78 <__kernel_cos>
 800db5e:	e7dc      	b.n	800db1a <sin+0x1a>
 800db60:	2001      	movs	r0, #1
 800db62:	f000 fe11 	bl	800e788 <__kernel_sin>
 800db66:	ec53 2b10 	vmov	r2, r3, d0
 800db6a:	ee10 0a10 	vmov	r0, s0
 800db6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db72:	e7dd      	b.n	800db30 <sin+0x30>
 800db74:	f000 fa00 	bl	800df78 <__kernel_cos>
 800db78:	e7f5      	b.n	800db66 <sin+0x66>
 800db7a:	bf00      	nop
 800db7c:	f3af 8000 	nop.w
	...
 800db88:	3fe921fb 	.word	0x3fe921fb
 800db8c:	7fefffff 	.word	0x7fefffff

0800db90 <__ieee754_rem_pio2>:
 800db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	ec57 6b10 	vmov	r6, r7, d0
 800db98:	4bc3      	ldr	r3, [pc, #780]	; (800dea8 <__ieee754_rem_pio2+0x318>)
 800db9a:	b08d      	sub	sp, #52	; 0x34
 800db9c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dba0:	4598      	cmp	r8, r3
 800dba2:	4604      	mov	r4, r0
 800dba4:	9704      	str	r7, [sp, #16]
 800dba6:	dc07      	bgt.n	800dbb8 <__ieee754_rem_pio2+0x28>
 800dba8:	2200      	movs	r2, #0
 800dbaa:	2300      	movs	r3, #0
 800dbac:	ed84 0b00 	vstr	d0, [r4]
 800dbb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dbb4:	2500      	movs	r5, #0
 800dbb6:	e027      	b.n	800dc08 <__ieee754_rem_pio2+0x78>
 800dbb8:	4bbc      	ldr	r3, [pc, #752]	; (800deac <__ieee754_rem_pio2+0x31c>)
 800dbba:	4598      	cmp	r8, r3
 800dbbc:	dc75      	bgt.n	800dcaa <__ieee754_rem_pio2+0x11a>
 800dbbe:	9b04      	ldr	r3, [sp, #16]
 800dbc0:	4dbb      	ldr	r5, [pc, #748]	; (800deb0 <__ieee754_rem_pio2+0x320>)
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	ee10 0a10 	vmov	r0, s0
 800dbc8:	a3a9      	add	r3, pc, #676	; (adr r3, 800de70 <__ieee754_rem_pio2+0x2e0>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	4639      	mov	r1, r7
 800dbd0:	dd36      	ble.n	800dc40 <__ieee754_rem_pio2+0xb0>
 800dbd2:	f7f2 fb59 	bl	8000288 <__aeabi_dsub>
 800dbd6:	45a8      	cmp	r8, r5
 800dbd8:	4606      	mov	r6, r0
 800dbda:	460f      	mov	r7, r1
 800dbdc:	d018      	beq.n	800dc10 <__ieee754_rem_pio2+0x80>
 800dbde:	a3a6      	add	r3, pc, #664	; (adr r3, 800de78 <__ieee754_rem_pio2+0x2e8>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f7f2 fb50 	bl	8000288 <__aeabi_dsub>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	e9c4 2300 	strd	r2, r3, [r4]
 800dbf0:	4630      	mov	r0, r6
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	f7f2 fb48 	bl	8000288 <__aeabi_dsub>
 800dbf8:	a39f      	add	r3, pc, #636	; (adr r3, 800de78 <__ieee754_rem_pio2+0x2e8>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fb43 	bl	8000288 <__aeabi_dsub>
 800dc02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc06:	2501      	movs	r5, #1
 800dc08:	4628      	mov	r0, r5
 800dc0a:	b00d      	add	sp, #52	; 0x34
 800dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc10:	a39b      	add	r3, pc, #620	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2f0>)
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	f7f2 fb37 	bl	8000288 <__aeabi_dsub>
 800dc1a:	a39b      	add	r3, pc, #620	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f8>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	4606      	mov	r6, r0
 800dc22:	460f      	mov	r7, r1
 800dc24:	f7f2 fb30 	bl	8000288 <__aeabi_dsub>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	e9c4 2300 	strd	r2, r3, [r4]
 800dc30:	4630      	mov	r0, r6
 800dc32:	4639      	mov	r1, r7
 800dc34:	f7f2 fb28 	bl	8000288 <__aeabi_dsub>
 800dc38:	a393      	add	r3, pc, #588	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f8>)
 800dc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3e:	e7de      	b.n	800dbfe <__ieee754_rem_pio2+0x6e>
 800dc40:	f7f2 fb24 	bl	800028c <__adddf3>
 800dc44:	45a8      	cmp	r8, r5
 800dc46:	4606      	mov	r6, r0
 800dc48:	460f      	mov	r7, r1
 800dc4a:	d016      	beq.n	800dc7a <__ieee754_rem_pio2+0xea>
 800dc4c:	a38a      	add	r3, pc, #552	; (adr r3, 800de78 <__ieee754_rem_pio2+0x2e8>)
 800dc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc52:	f7f2 fb1b 	bl	800028c <__adddf3>
 800dc56:	4602      	mov	r2, r0
 800dc58:	460b      	mov	r3, r1
 800dc5a:	e9c4 2300 	strd	r2, r3, [r4]
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fb11 	bl	8000288 <__aeabi_dsub>
 800dc66:	a384      	add	r3, pc, #528	; (adr r3, 800de78 <__ieee754_rem_pio2+0x2e8>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	f7f2 fb0e 	bl	800028c <__adddf3>
 800dc70:	f04f 35ff 	mov.w	r5, #4294967295
 800dc74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc78:	e7c6      	b.n	800dc08 <__ieee754_rem_pio2+0x78>
 800dc7a:	a381      	add	r3, pc, #516	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2f0>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	f7f2 fb04 	bl	800028c <__adddf3>
 800dc84:	a380      	add	r3, pc, #512	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f8>)
 800dc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	460f      	mov	r7, r1
 800dc8e:	f7f2 fafd 	bl	800028c <__adddf3>
 800dc92:	4602      	mov	r2, r0
 800dc94:	460b      	mov	r3, r1
 800dc96:	e9c4 2300 	strd	r2, r3, [r4]
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	f7f2 faf3 	bl	8000288 <__aeabi_dsub>
 800dca2:	a379      	add	r3, pc, #484	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f8>)
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	e7e0      	b.n	800dc6c <__ieee754_rem_pio2+0xdc>
 800dcaa:	4b82      	ldr	r3, [pc, #520]	; (800deb4 <__ieee754_rem_pio2+0x324>)
 800dcac:	4598      	cmp	r8, r3
 800dcae:	f300 80d0 	bgt.w	800de52 <__ieee754_rem_pio2+0x2c2>
 800dcb2:	f000 fe23 	bl	800e8fc <fabs>
 800dcb6:	ec57 6b10 	vmov	r6, r7, d0
 800dcba:	ee10 0a10 	vmov	r0, s0
 800dcbe:	a374      	add	r3, pc, #464	; (adr r3, 800de90 <__ieee754_rem_pio2+0x300>)
 800dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc4:	4639      	mov	r1, r7
 800dcc6:	f7f2 fc97 	bl	80005f8 <__aeabi_dmul>
 800dcca:	2200      	movs	r2, #0
 800dccc:	4b7a      	ldr	r3, [pc, #488]	; (800deb8 <__ieee754_rem_pio2+0x328>)
 800dcce:	f7f2 fadd 	bl	800028c <__adddf3>
 800dcd2:	f7f2 ff2b 	bl	8000b2c <__aeabi_d2iz>
 800dcd6:	4605      	mov	r5, r0
 800dcd8:	f7f2 fc24 	bl	8000524 <__aeabi_i2d>
 800dcdc:	a364      	add	r3, pc, #400	; (adr r3, 800de70 <__ieee754_rem_pio2+0x2e0>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dce6:	f7f2 fc87 	bl	80005f8 <__aeabi_dmul>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4630      	mov	r0, r6
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	f7f2 fac9 	bl	8000288 <__aeabi_dsub>
 800dcf6:	a360      	add	r3, pc, #384	; (adr r3, 800de78 <__ieee754_rem_pio2+0x2e8>)
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	468b      	mov	fp, r1
 800dd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd04:	f7f2 fc78 	bl	80005f8 <__aeabi_dmul>
 800dd08:	2d1f      	cmp	r5, #31
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	460f      	mov	r7, r1
 800dd0e:	dc0c      	bgt.n	800dd2a <__ieee754_rem_pio2+0x19a>
 800dd10:	1e6a      	subs	r2, r5, #1
 800dd12:	4b6a      	ldr	r3, [pc, #424]	; (800debc <__ieee754_rem_pio2+0x32c>)
 800dd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd18:	4543      	cmp	r3, r8
 800dd1a:	d006      	beq.n	800dd2a <__ieee754_rem_pio2+0x19a>
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	463b      	mov	r3, r7
 800dd20:	4650      	mov	r0, sl
 800dd22:	4659      	mov	r1, fp
 800dd24:	f7f2 fab0 	bl	8000288 <__aeabi_dsub>
 800dd28:	e00e      	b.n	800dd48 <__ieee754_rem_pio2+0x1b8>
 800dd2a:	4632      	mov	r2, r6
 800dd2c:	463b      	mov	r3, r7
 800dd2e:	4650      	mov	r0, sl
 800dd30:	4659      	mov	r1, fp
 800dd32:	f7f2 faa9 	bl	8000288 <__aeabi_dsub>
 800dd36:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dd3a:	9305      	str	r3, [sp, #20]
 800dd3c:	9a05      	ldr	r2, [sp, #20]
 800dd3e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	2b10      	cmp	r3, #16
 800dd46:	dc02      	bgt.n	800dd4e <__ieee754_rem_pio2+0x1be>
 800dd48:	e9c4 0100 	strd	r0, r1, [r4]
 800dd4c:	e039      	b.n	800ddc2 <__ieee754_rem_pio2+0x232>
 800dd4e:	a34c      	add	r3, pc, #304	; (adr r3, 800de80 <__ieee754_rem_pio2+0x2f0>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd58:	f7f2 fc4e 	bl	80005f8 <__aeabi_dmul>
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	460f      	mov	r7, r1
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	4650      	mov	r0, sl
 800dd66:	4659      	mov	r1, fp
 800dd68:	f7f2 fa8e 	bl	8000288 <__aeabi_dsub>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4680      	mov	r8, r0
 800dd72:	4689      	mov	r9, r1
 800dd74:	4650      	mov	r0, sl
 800dd76:	4659      	mov	r1, fp
 800dd78:	f7f2 fa86 	bl	8000288 <__aeabi_dsub>
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	463b      	mov	r3, r7
 800dd80:	f7f2 fa82 	bl	8000288 <__aeabi_dsub>
 800dd84:	a340      	add	r3, pc, #256	; (adr r3, 800de88 <__ieee754_rem_pio2+0x2f8>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	460f      	mov	r7, r1
 800dd8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd92:	f7f2 fc31 	bl	80005f8 <__aeabi_dmul>
 800dd96:	4632      	mov	r2, r6
 800dd98:	463b      	mov	r3, r7
 800dd9a:	f7f2 fa75 	bl	8000288 <__aeabi_dsub>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	460b      	mov	r3, r1
 800dda2:	4606      	mov	r6, r0
 800dda4:	460f      	mov	r7, r1
 800dda6:	4640      	mov	r0, r8
 800dda8:	4649      	mov	r1, r9
 800ddaa:	f7f2 fa6d 	bl	8000288 <__aeabi_dsub>
 800ddae:	9a05      	ldr	r2, [sp, #20]
 800ddb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	2b31      	cmp	r3, #49	; 0x31
 800ddb8:	dc20      	bgt.n	800ddfc <__ieee754_rem_pio2+0x26c>
 800ddba:	e9c4 0100 	strd	r0, r1, [r4]
 800ddbe:	46c2      	mov	sl, r8
 800ddc0:	46cb      	mov	fp, r9
 800ddc2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	4642      	mov	r2, r8
 800ddca:	464b      	mov	r3, r9
 800ddcc:	4659      	mov	r1, fp
 800ddce:	f7f2 fa5b 	bl	8000288 <__aeabi_dsub>
 800ddd2:	463b      	mov	r3, r7
 800ddd4:	4632      	mov	r2, r6
 800ddd6:	f7f2 fa57 	bl	8000288 <__aeabi_dsub>
 800ddda:	9b04      	ldr	r3, [sp, #16]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dde2:	f6bf af11 	bge.w	800dc08 <__ieee754_rem_pio2+0x78>
 800dde6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ddea:	6063      	str	r3, [r4, #4]
 800ddec:	f8c4 8000 	str.w	r8, [r4]
 800ddf0:	60a0      	str	r0, [r4, #8]
 800ddf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddf6:	60e3      	str	r3, [r4, #12]
 800ddf8:	426d      	negs	r5, r5
 800ddfa:	e705      	b.n	800dc08 <__ieee754_rem_pio2+0x78>
 800ddfc:	a326      	add	r3, pc, #152	; (adr r3, 800de98 <__ieee754_rem_pio2+0x308>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de06:	f7f2 fbf7 	bl	80005f8 <__aeabi_dmul>
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	4602      	mov	r2, r0
 800de10:	460b      	mov	r3, r1
 800de12:	4640      	mov	r0, r8
 800de14:	4649      	mov	r1, r9
 800de16:	f7f2 fa37 	bl	8000288 <__aeabi_dsub>
 800de1a:	4602      	mov	r2, r0
 800de1c:	460b      	mov	r3, r1
 800de1e:	4682      	mov	sl, r0
 800de20:	468b      	mov	fp, r1
 800de22:	4640      	mov	r0, r8
 800de24:	4649      	mov	r1, r9
 800de26:	f7f2 fa2f 	bl	8000288 <__aeabi_dsub>
 800de2a:	4632      	mov	r2, r6
 800de2c:	463b      	mov	r3, r7
 800de2e:	f7f2 fa2b 	bl	8000288 <__aeabi_dsub>
 800de32:	a31b      	add	r3, pc, #108	; (adr r3, 800dea0 <__ieee754_rem_pio2+0x310>)
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	4606      	mov	r6, r0
 800de3a:	460f      	mov	r7, r1
 800de3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de40:	f7f2 fbda 	bl	80005f8 <__aeabi_dmul>
 800de44:	4632      	mov	r2, r6
 800de46:	463b      	mov	r3, r7
 800de48:	f7f2 fa1e 	bl	8000288 <__aeabi_dsub>
 800de4c:	4606      	mov	r6, r0
 800de4e:	460f      	mov	r7, r1
 800de50:	e764      	b.n	800dd1c <__ieee754_rem_pio2+0x18c>
 800de52:	4b1b      	ldr	r3, [pc, #108]	; (800dec0 <__ieee754_rem_pio2+0x330>)
 800de54:	4598      	cmp	r8, r3
 800de56:	dd35      	ble.n	800dec4 <__ieee754_rem_pio2+0x334>
 800de58:	ee10 2a10 	vmov	r2, s0
 800de5c:	463b      	mov	r3, r7
 800de5e:	4630      	mov	r0, r6
 800de60:	4639      	mov	r1, r7
 800de62:	f7f2 fa11 	bl	8000288 <__aeabi_dsub>
 800de66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de6a:	e9c4 0100 	strd	r0, r1, [r4]
 800de6e:	e6a1      	b.n	800dbb4 <__ieee754_rem_pio2+0x24>
 800de70:	54400000 	.word	0x54400000
 800de74:	3ff921fb 	.word	0x3ff921fb
 800de78:	1a626331 	.word	0x1a626331
 800de7c:	3dd0b461 	.word	0x3dd0b461
 800de80:	1a600000 	.word	0x1a600000
 800de84:	3dd0b461 	.word	0x3dd0b461
 800de88:	2e037073 	.word	0x2e037073
 800de8c:	3ba3198a 	.word	0x3ba3198a
 800de90:	6dc9c883 	.word	0x6dc9c883
 800de94:	3fe45f30 	.word	0x3fe45f30
 800de98:	2e000000 	.word	0x2e000000
 800de9c:	3ba3198a 	.word	0x3ba3198a
 800dea0:	252049c1 	.word	0x252049c1
 800dea4:	397b839a 	.word	0x397b839a
 800dea8:	3fe921fb 	.word	0x3fe921fb
 800deac:	4002d97b 	.word	0x4002d97b
 800deb0:	3ff921fb 	.word	0x3ff921fb
 800deb4:	413921fb 	.word	0x413921fb
 800deb8:	3fe00000 	.word	0x3fe00000
 800debc:	0800f028 	.word	0x0800f028
 800dec0:	7fefffff 	.word	0x7fefffff
 800dec4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dec8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800decc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ded0:	4630      	mov	r0, r6
 800ded2:	460f      	mov	r7, r1
 800ded4:	f7f2 fe2a 	bl	8000b2c <__aeabi_d2iz>
 800ded8:	f7f2 fb24 	bl	8000524 <__aeabi_i2d>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4630      	mov	r0, r6
 800dee2:	4639      	mov	r1, r7
 800dee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dee8:	f7f2 f9ce 	bl	8000288 <__aeabi_dsub>
 800deec:	2200      	movs	r2, #0
 800deee:	4b1f      	ldr	r3, [pc, #124]	; (800df6c <__ieee754_rem_pio2+0x3dc>)
 800def0:	f7f2 fb82 	bl	80005f8 <__aeabi_dmul>
 800def4:	460f      	mov	r7, r1
 800def6:	4606      	mov	r6, r0
 800def8:	f7f2 fe18 	bl	8000b2c <__aeabi_d2iz>
 800defc:	f7f2 fb12 	bl	8000524 <__aeabi_i2d>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	4630      	mov	r0, r6
 800df06:	4639      	mov	r1, r7
 800df08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df0c:	f7f2 f9bc 	bl	8000288 <__aeabi_dsub>
 800df10:	2200      	movs	r2, #0
 800df12:	4b16      	ldr	r3, [pc, #88]	; (800df6c <__ieee754_rem_pio2+0x3dc>)
 800df14:	f7f2 fb70 	bl	80005f8 <__aeabi_dmul>
 800df18:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800df1c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800df20:	f04f 0803 	mov.w	r8, #3
 800df24:	2600      	movs	r6, #0
 800df26:	2700      	movs	r7, #0
 800df28:	4632      	mov	r2, r6
 800df2a:	463b      	mov	r3, r7
 800df2c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800df30:	f108 3aff 	add.w	sl, r8, #4294967295
 800df34:	f7f2 fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800df38:	b9b0      	cbnz	r0, 800df68 <__ieee754_rem_pio2+0x3d8>
 800df3a:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <__ieee754_rem_pio2+0x3e0>)
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	2302      	movs	r3, #2
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	462a      	mov	r2, r5
 800df44:	4643      	mov	r3, r8
 800df46:	4621      	mov	r1, r4
 800df48:	a806      	add	r0, sp, #24
 800df4a:	f000 f8dd 	bl	800e108 <__kernel_rem_pio2>
 800df4e:	9b04      	ldr	r3, [sp, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	4605      	mov	r5, r0
 800df54:	f6bf ae58 	bge.w	800dc08 <__ieee754_rem_pio2+0x78>
 800df58:	6863      	ldr	r3, [r4, #4]
 800df5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df5e:	6063      	str	r3, [r4, #4]
 800df60:	68e3      	ldr	r3, [r4, #12]
 800df62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df66:	e746      	b.n	800ddf6 <__ieee754_rem_pio2+0x266>
 800df68:	46d0      	mov	r8, sl
 800df6a:	e7dd      	b.n	800df28 <__ieee754_rem_pio2+0x398>
 800df6c:	41700000 	.word	0x41700000
 800df70:	0800f0a8 	.word	0x0800f0a8
 800df74:	00000000 	.word	0x00000000

0800df78 <__kernel_cos>:
 800df78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	ec59 8b10 	vmov	r8, r9, d0
 800df80:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800df84:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800df88:	ed2d 8b02 	vpush	{d8}
 800df8c:	eeb0 8a41 	vmov.f32	s16, s2
 800df90:	eef0 8a61 	vmov.f32	s17, s3
 800df94:	da07      	bge.n	800dfa6 <__kernel_cos+0x2e>
 800df96:	ee10 0a10 	vmov	r0, s0
 800df9a:	4649      	mov	r1, r9
 800df9c:	f7f2 fdc6 	bl	8000b2c <__aeabi_d2iz>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	f000 8089 	beq.w	800e0b8 <__kernel_cos+0x140>
 800dfa6:	4642      	mov	r2, r8
 800dfa8:	464b      	mov	r3, r9
 800dfaa:	4640      	mov	r0, r8
 800dfac:	4649      	mov	r1, r9
 800dfae:	f7f2 fb23 	bl	80005f8 <__aeabi_dmul>
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4b4e      	ldr	r3, [pc, #312]	; (800e0f0 <__kernel_cos+0x178>)
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	f7f2 fb1d 	bl	80005f8 <__aeabi_dmul>
 800dfbe:	a340      	add	r3, pc, #256	; (adr r3, 800e0c0 <__kernel_cos+0x148>)
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	4682      	mov	sl, r0
 800dfc6:	468b      	mov	fp, r1
 800dfc8:	4620      	mov	r0, r4
 800dfca:	4629      	mov	r1, r5
 800dfcc:	f7f2 fb14 	bl	80005f8 <__aeabi_dmul>
 800dfd0:	a33d      	add	r3, pc, #244	; (adr r3, 800e0c8 <__kernel_cos+0x150>)
 800dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd6:	f7f2 f959 	bl	800028c <__adddf3>
 800dfda:	4622      	mov	r2, r4
 800dfdc:	462b      	mov	r3, r5
 800dfde:	f7f2 fb0b 	bl	80005f8 <__aeabi_dmul>
 800dfe2:	a33b      	add	r3, pc, #236	; (adr r3, 800e0d0 <__kernel_cos+0x158>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 f94e 	bl	8000288 <__aeabi_dsub>
 800dfec:	4622      	mov	r2, r4
 800dfee:	462b      	mov	r3, r5
 800dff0:	f7f2 fb02 	bl	80005f8 <__aeabi_dmul>
 800dff4:	a338      	add	r3, pc, #224	; (adr r3, 800e0d8 <__kernel_cos+0x160>)
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	f7f2 f947 	bl	800028c <__adddf3>
 800dffe:	4622      	mov	r2, r4
 800e000:	462b      	mov	r3, r5
 800e002:	f7f2 faf9 	bl	80005f8 <__aeabi_dmul>
 800e006:	a336      	add	r3, pc, #216	; (adr r3, 800e0e0 <__kernel_cos+0x168>)
 800e008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00c:	f7f2 f93c 	bl	8000288 <__aeabi_dsub>
 800e010:	4622      	mov	r2, r4
 800e012:	462b      	mov	r3, r5
 800e014:	f7f2 faf0 	bl	80005f8 <__aeabi_dmul>
 800e018:	a333      	add	r3, pc, #204	; (adr r3, 800e0e8 <__kernel_cos+0x170>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f7f2 f935 	bl	800028c <__adddf3>
 800e022:	4622      	mov	r2, r4
 800e024:	462b      	mov	r3, r5
 800e026:	f7f2 fae7 	bl	80005f8 <__aeabi_dmul>
 800e02a:	4622      	mov	r2, r4
 800e02c:	462b      	mov	r3, r5
 800e02e:	f7f2 fae3 	bl	80005f8 <__aeabi_dmul>
 800e032:	ec53 2b18 	vmov	r2, r3, d8
 800e036:	4604      	mov	r4, r0
 800e038:	460d      	mov	r5, r1
 800e03a:	4640      	mov	r0, r8
 800e03c:	4649      	mov	r1, r9
 800e03e:	f7f2 fadb 	bl	80005f8 <__aeabi_dmul>
 800e042:	460b      	mov	r3, r1
 800e044:	4602      	mov	r2, r0
 800e046:	4629      	mov	r1, r5
 800e048:	4620      	mov	r0, r4
 800e04a:	f7f2 f91d 	bl	8000288 <__aeabi_dsub>
 800e04e:	4b29      	ldr	r3, [pc, #164]	; (800e0f4 <__kernel_cos+0x17c>)
 800e050:	429e      	cmp	r6, r3
 800e052:	4680      	mov	r8, r0
 800e054:	4689      	mov	r9, r1
 800e056:	dc11      	bgt.n	800e07c <__kernel_cos+0x104>
 800e058:	4602      	mov	r2, r0
 800e05a:	460b      	mov	r3, r1
 800e05c:	4650      	mov	r0, sl
 800e05e:	4659      	mov	r1, fp
 800e060:	f7f2 f912 	bl	8000288 <__aeabi_dsub>
 800e064:	460b      	mov	r3, r1
 800e066:	4924      	ldr	r1, [pc, #144]	; (800e0f8 <__kernel_cos+0x180>)
 800e068:	4602      	mov	r2, r0
 800e06a:	2000      	movs	r0, #0
 800e06c:	f7f2 f90c 	bl	8000288 <__aeabi_dsub>
 800e070:	ecbd 8b02 	vpop	{d8}
 800e074:	ec41 0b10 	vmov	d0, r0, r1
 800e078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07c:	4b1f      	ldr	r3, [pc, #124]	; (800e0fc <__kernel_cos+0x184>)
 800e07e:	491e      	ldr	r1, [pc, #120]	; (800e0f8 <__kernel_cos+0x180>)
 800e080:	429e      	cmp	r6, r3
 800e082:	bfcc      	ite	gt
 800e084:	4d1e      	ldrgt	r5, [pc, #120]	; (800e100 <__kernel_cos+0x188>)
 800e086:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e08a:	2400      	movs	r4, #0
 800e08c:	4622      	mov	r2, r4
 800e08e:	462b      	mov	r3, r5
 800e090:	2000      	movs	r0, #0
 800e092:	f7f2 f8f9 	bl	8000288 <__aeabi_dsub>
 800e096:	4622      	mov	r2, r4
 800e098:	4606      	mov	r6, r0
 800e09a:	460f      	mov	r7, r1
 800e09c:	462b      	mov	r3, r5
 800e09e:	4650      	mov	r0, sl
 800e0a0:	4659      	mov	r1, fp
 800e0a2:	f7f2 f8f1 	bl	8000288 <__aeabi_dsub>
 800e0a6:	4642      	mov	r2, r8
 800e0a8:	464b      	mov	r3, r9
 800e0aa:	f7f2 f8ed 	bl	8000288 <__aeabi_dsub>
 800e0ae:	4602      	mov	r2, r0
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	4639      	mov	r1, r7
 800e0b6:	e7d9      	b.n	800e06c <__kernel_cos+0xf4>
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	490f      	ldr	r1, [pc, #60]	; (800e0f8 <__kernel_cos+0x180>)
 800e0bc:	e7d8      	b.n	800e070 <__kernel_cos+0xf8>
 800e0be:	bf00      	nop
 800e0c0:	be8838d4 	.word	0xbe8838d4
 800e0c4:	bda8fae9 	.word	0xbda8fae9
 800e0c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e0cc:	3e21ee9e 	.word	0x3e21ee9e
 800e0d0:	809c52ad 	.word	0x809c52ad
 800e0d4:	3e927e4f 	.word	0x3e927e4f
 800e0d8:	19cb1590 	.word	0x19cb1590
 800e0dc:	3efa01a0 	.word	0x3efa01a0
 800e0e0:	16c15177 	.word	0x16c15177
 800e0e4:	3f56c16c 	.word	0x3f56c16c
 800e0e8:	5555554c 	.word	0x5555554c
 800e0ec:	3fa55555 	.word	0x3fa55555
 800e0f0:	3fe00000 	.word	0x3fe00000
 800e0f4:	3fd33332 	.word	0x3fd33332
 800e0f8:	3ff00000 	.word	0x3ff00000
 800e0fc:	3fe90000 	.word	0x3fe90000
 800e100:	3fd20000 	.word	0x3fd20000
 800e104:	00000000 	.word	0x00000000

0800e108 <__kernel_rem_pio2>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	ed2d 8b02 	vpush	{d8}
 800e110:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e114:	1ed4      	subs	r4, r2, #3
 800e116:	9308      	str	r3, [sp, #32]
 800e118:	9101      	str	r1, [sp, #4]
 800e11a:	4bc5      	ldr	r3, [pc, #788]	; (800e430 <__kernel_rem_pio2+0x328>)
 800e11c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e11e:	9009      	str	r0, [sp, #36]	; 0x24
 800e120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e124:	9304      	str	r3, [sp, #16]
 800e126:	9b08      	ldr	r3, [sp, #32]
 800e128:	3b01      	subs	r3, #1
 800e12a:	9307      	str	r3, [sp, #28]
 800e12c:	2318      	movs	r3, #24
 800e12e:	fb94 f4f3 	sdiv	r4, r4, r3
 800e132:	f06f 0317 	mvn.w	r3, #23
 800e136:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e13a:	fb04 3303 	mla	r3, r4, r3, r3
 800e13e:	eb03 0a02 	add.w	sl, r3, r2
 800e142:	9b04      	ldr	r3, [sp, #16]
 800e144:	9a07      	ldr	r2, [sp, #28]
 800e146:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e420 <__kernel_rem_pio2+0x318>
 800e14a:	eb03 0802 	add.w	r8, r3, r2
 800e14e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e150:	1aa7      	subs	r7, r4, r2
 800e152:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e156:	ae22      	add	r6, sp, #136	; 0x88
 800e158:	2500      	movs	r5, #0
 800e15a:	4545      	cmp	r5, r8
 800e15c:	dd13      	ble.n	800e186 <__kernel_rem_pio2+0x7e>
 800e15e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800e420 <__kernel_rem_pio2+0x318>
 800e162:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e166:	2600      	movs	r6, #0
 800e168:	9b04      	ldr	r3, [sp, #16]
 800e16a:	429e      	cmp	r6, r3
 800e16c:	dc32      	bgt.n	800e1d4 <__kernel_rem_pio2+0xcc>
 800e16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e170:	9302      	str	r3, [sp, #8]
 800e172:	9b08      	ldr	r3, [sp, #32]
 800e174:	199d      	adds	r5, r3, r6
 800e176:	ab22      	add	r3, sp, #136	; 0x88
 800e178:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e17c:	9306      	str	r3, [sp, #24]
 800e17e:	ec59 8b18 	vmov	r8, r9, d8
 800e182:	2700      	movs	r7, #0
 800e184:	e01f      	b.n	800e1c6 <__kernel_rem_pio2+0xbe>
 800e186:	42ef      	cmn	r7, r5
 800e188:	d407      	bmi.n	800e19a <__kernel_rem_pio2+0x92>
 800e18a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e18e:	f7f2 f9c9 	bl	8000524 <__aeabi_i2d>
 800e192:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e196:	3501      	adds	r5, #1
 800e198:	e7df      	b.n	800e15a <__kernel_rem_pio2+0x52>
 800e19a:	ec51 0b18 	vmov	r0, r1, d8
 800e19e:	e7f8      	b.n	800e192 <__kernel_rem_pio2+0x8a>
 800e1a0:	9906      	ldr	r1, [sp, #24]
 800e1a2:	9d02      	ldr	r5, [sp, #8]
 800e1a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e1a8:	9106      	str	r1, [sp, #24]
 800e1aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800e1ae:	9502      	str	r5, [sp, #8]
 800e1b0:	f7f2 fa22 	bl	80005f8 <__aeabi_dmul>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f7f2 f866 	bl	800028c <__adddf3>
 800e1c0:	3701      	adds	r7, #1
 800e1c2:	4680      	mov	r8, r0
 800e1c4:	4689      	mov	r9, r1
 800e1c6:	9b07      	ldr	r3, [sp, #28]
 800e1c8:	429f      	cmp	r7, r3
 800e1ca:	dde9      	ble.n	800e1a0 <__kernel_rem_pio2+0x98>
 800e1cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800e1d0:	3601      	adds	r6, #1
 800e1d2:	e7c9      	b.n	800e168 <__kernel_rem_pio2+0x60>
 800e1d4:	9b04      	ldr	r3, [sp, #16]
 800e1d6:	aa0e      	add	r2, sp, #56	; 0x38
 800e1d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e1dc:	930c      	str	r3, [sp, #48]	; 0x30
 800e1de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e1e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e1e4:	9c04      	ldr	r4, [sp, #16]
 800e1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1e8:	ab9a      	add	r3, sp, #616	; 0x268
 800e1ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800e1ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e1f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e1f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800e1fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e1fe:	ab9a      	add	r3, sp, #616	; 0x268
 800e200:	445b      	add	r3, fp
 800e202:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800e206:	2500      	movs	r5, #0
 800e208:	1b63      	subs	r3, r4, r5
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	dc78      	bgt.n	800e300 <__kernel_rem_pio2+0x1f8>
 800e20e:	4650      	mov	r0, sl
 800e210:	ec49 8b10 	vmov	d0, r8, r9
 800e214:	f000 fc00 	bl	800ea18 <scalbn>
 800e218:	ec57 6b10 	vmov	r6, r7, d0
 800e21c:	2200      	movs	r2, #0
 800e21e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e222:	ee10 0a10 	vmov	r0, s0
 800e226:	4639      	mov	r1, r7
 800e228:	f7f2 f9e6 	bl	80005f8 <__aeabi_dmul>
 800e22c:	ec41 0b10 	vmov	d0, r0, r1
 800e230:	f000 fb6e 	bl	800e910 <floor>
 800e234:	2200      	movs	r2, #0
 800e236:	ec51 0b10 	vmov	r0, r1, d0
 800e23a:	4b7e      	ldr	r3, [pc, #504]	; (800e434 <__kernel_rem_pio2+0x32c>)
 800e23c:	f7f2 f9dc 	bl	80005f8 <__aeabi_dmul>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4630      	mov	r0, r6
 800e246:	4639      	mov	r1, r7
 800e248:	f7f2 f81e 	bl	8000288 <__aeabi_dsub>
 800e24c:	460f      	mov	r7, r1
 800e24e:	4606      	mov	r6, r0
 800e250:	f7f2 fc6c 	bl	8000b2c <__aeabi_d2iz>
 800e254:	9006      	str	r0, [sp, #24]
 800e256:	f7f2 f965 	bl	8000524 <__aeabi_i2d>
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	4630      	mov	r0, r6
 800e260:	4639      	mov	r1, r7
 800e262:	f7f2 f811 	bl	8000288 <__aeabi_dsub>
 800e266:	f1ba 0f00 	cmp.w	sl, #0
 800e26a:	4606      	mov	r6, r0
 800e26c:	460f      	mov	r7, r1
 800e26e:	dd6c      	ble.n	800e34a <__kernel_rem_pio2+0x242>
 800e270:	1e62      	subs	r2, r4, #1
 800e272:	ab0e      	add	r3, sp, #56	; 0x38
 800e274:	f1ca 0118 	rsb	r1, sl, #24
 800e278:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e27c:	9d06      	ldr	r5, [sp, #24]
 800e27e:	fa40 f301 	asr.w	r3, r0, r1
 800e282:	441d      	add	r5, r3
 800e284:	408b      	lsls	r3, r1
 800e286:	1ac0      	subs	r0, r0, r3
 800e288:	ab0e      	add	r3, sp, #56	; 0x38
 800e28a:	9506      	str	r5, [sp, #24]
 800e28c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e290:	f1ca 0317 	rsb	r3, sl, #23
 800e294:	fa40 f303 	asr.w	r3, r0, r3
 800e298:	9302      	str	r3, [sp, #8]
 800e29a:	9b02      	ldr	r3, [sp, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	dd62      	ble.n	800e366 <__kernel_rem_pio2+0x25e>
 800e2a0:	9b06      	ldr	r3, [sp, #24]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	9306      	str	r3, [sp, #24]
 800e2a8:	4615      	mov	r5, r2
 800e2aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e2ae:	4294      	cmp	r4, r2
 800e2b0:	f300 8095 	bgt.w	800e3de <__kernel_rem_pio2+0x2d6>
 800e2b4:	f1ba 0f00 	cmp.w	sl, #0
 800e2b8:	dd07      	ble.n	800e2ca <__kernel_rem_pio2+0x1c2>
 800e2ba:	f1ba 0f01 	cmp.w	sl, #1
 800e2be:	f000 80a2 	beq.w	800e406 <__kernel_rem_pio2+0x2fe>
 800e2c2:	f1ba 0f02 	cmp.w	sl, #2
 800e2c6:	f000 80c1 	beq.w	800e44c <__kernel_rem_pio2+0x344>
 800e2ca:	9b02      	ldr	r3, [sp, #8]
 800e2cc:	2b02      	cmp	r3, #2
 800e2ce:	d14a      	bne.n	800e366 <__kernel_rem_pio2+0x25e>
 800e2d0:	4632      	mov	r2, r6
 800e2d2:	463b      	mov	r3, r7
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	4958      	ldr	r1, [pc, #352]	; (800e438 <__kernel_rem_pio2+0x330>)
 800e2d8:	f7f1 ffd6 	bl	8000288 <__aeabi_dsub>
 800e2dc:	4606      	mov	r6, r0
 800e2de:	460f      	mov	r7, r1
 800e2e0:	2d00      	cmp	r5, #0
 800e2e2:	d040      	beq.n	800e366 <__kernel_rem_pio2+0x25e>
 800e2e4:	4650      	mov	r0, sl
 800e2e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e428 <__kernel_rem_pio2+0x320>
 800e2ea:	f000 fb95 	bl	800ea18 <scalbn>
 800e2ee:	4630      	mov	r0, r6
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	ec53 2b10 	vmov	r2, r3, d0
 800e2f6:	f7f1 ffc7 	bl	8000288 <__aeabi_dsub>
 800e2fa:	4606      	mov	r6, r0
 800e2fc:	460f      	mov	r7, r1
 800e2fe:	e032      	b.n	800e366 <__kernel_rem_pio2+0x25e>
 800e300:	2200      	movs	r2, #0
 800e302:	4b4e      	ldr	r3, [pc, #312]	; (800e43c <__kernel_rem_pio2+0x334>)
 800e304:	4640      	mov	r0, r8
 800e306:	4649      	mov	r1, r9
 800e308:	f7f2 f976 	bl	80005f8 <__aeabi_dmul>
 800e30c:	f7f2 fc0e 	bl	8000b2c <__aeabi_d2iz>
 800e310:	f7f2 f908 	bl	8000524 <__aeabi_i2d>
 800e314:	2200      	movs	r2, #0
 800e316:	4b4a      	ldr	r3, [pc, #296]	; (800e440 <__kernel_rem_pio2+0x338>)
 800e318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e31c:	f7f2 f96c 	bl	80005f8 <__aeabi_dmul>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4640      	mov	r0, r8
 800e326:	4649      	mov	r1, r9
 800e328:	f7f1 ffae 	bl	8000288 <__aeabi_dsub>
 800e32c:	f7f2 fbfe 	bl	8000b2c <__aeabi_d2iz>
 800e330:	ab0e      	add	r3, sp, #56	; 0x38
 800e332:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e336:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e33e:	f7f1 ffa5 	bl	800028c <__adddf3>
 800e342:	3501      	adds	r5, #1
 800e344:	4680      	mov	r8, r0
 800e346:	4689      	mov	r9, r1
 800e348:	e75e      	b.n	800e208 <__kernel_rem_pio2+0x100>
 800e34a:	d105      	bne.n	800e358 <__kernel_rem_pio2+0x250>
 800e34c:	1e63      	subs	r3, r4, #1
 800e34e:	aa0e      	add	r2, sp, #56	; 0x38
 800e350:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e354:	15c3      	asrs	r3, r0, #23
 800e356:	e79f      	b.n	800e298 <__kernel_rem_pio2+0x190>
 800e358:	2200      	movs	r2, #0
 800e35a:	4b3a      	ldr	r3, [pc, #232]	; (800e444 <__kernel_rem_pio2+0x33c>)
 800e35c:	f7f2 fbd2 	bl	8000b04 <__aeabi_dcmpge>
 800e360:	2800      	cmp	r0, #0
 800e362:	d139      	bne.n	800e3d8 <__kernel_rem_pio2+0x2d0>
 800e364:	9002      	str	r0, [sp, #8]
 800e366:	2200      	movs	r2, #0
 800e368:	2300      	movs	r3, #0
 800e36a:	4630      	mov	r0, r6
 800e36c:	4639      	mov	r1, r7
 800e36e:	f7f2 fbab 	bl	8000ac8 <__aeabi_dcmpeq>
 800e372:	2800      	cmp	r0, #0
 800e374:	f000 80c7 	beq.w	800e506 <__kernel_rem_pio2+0x3fe>
 800e378:	1e65      	subs	r5, r4, #1
 800e37a:	462b      	mov	r3, r5
 800e37c:	2200      	movs	r2, #0
 800e37e:	9904      	ldr	r1, [sp, #16]
 800e380:	428b      	cmp	r3, r1
 800e382:	da6a      	bge.n	800e45a <__kernel_rem_pio2+0x352>
 800e384:	2a00      	cmp	r2, #0
 800e386:	f000 8088 	beq.w	800e49a <__kernel_rem_pio2+0x392>
 800e38a:	ab0e      	add	r3, sp, #56	; 0x38
 800e38c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e390:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e394:	2b00      	cmp	r3, #0
 800e396:	f000 80b4 	beq.w	800e502 <__kernel_rem_pio2+0x3fa>
 800e39a:	4650      	mov	r0, sl
 800e39c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800e428 <__kernel_rem_pio2+0x320>
 800e3a0:	f000 fb3a 	bl	800ea18 <scalbn>
 800e3a4:	00ec      	lsls	r4, r5, #3
 800e3a6:	ab72      	add	r3, sp, #456	; 0x1c8
 800e3a8:	191e      	adds	r6, r3, r4
 800e3aa:	ec59 8b10 	vmov	r8, r9, d0
 800e3ae:	f106 0a08 	add.w	sl, r6, #8
 800e3b2:	462f      	mov	r7, r5
 800e3b4:	2f00      	cmp	r7, #0
 800e3b6:	f280 80df 	bge.w	800e578 <__kernel_rem_pio2+0x470>
 800e3ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e420 <__kernel_rem_pio2+0x318>
 800e3be:	f04f 0a00 	mov.w	sl, #0
 800e3c2:	eba5 030a 	sub.w	r3, r5, sl
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f2c0 810a 	blt.w	800e5e0 <__kernel_rem_pio2+0x4d8>
 800e3cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e448 <__kernel_rem_pio2+0x340>
 800e3d0:	ec59 8b18 	vmov	r8, r9, d8
 800e3d4:	2700      	movs	r7, #0
 800e3d6:	e0f5      	b.n	800e5c4 <__kernel_rem_pio2+0x4bc>
 800e3d8:	2302      	movs	r3, #2
 800e3da:	9302      	str	r3, [sp, #8]
 800e3dc:	e760      	b.n	800e2a0 <__kernel_rem_pio2+0x198>
 800e3de:	ab0e      	add	r3, sp, #56	; 0x38
 800e3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e4:	b94d      	cbnz	r5, 800e3fa <__kernel_rem_pio2+0x2f2>
 800e3e6:	b12b      	cbz	r3, 800e3f4 <__kernel_rem_pio2+0x2ec>
 800e3e8:	a80e      	add	r0, sp, #56	; 0x38
 800e3ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e3ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	3201      	adds	r2, #1
 800e3f6:	461d      	mov	r5, r3
 800e3f8:	e759      	b.n	800e2ae <__kernel_rem_pio2+0x1a6>
 800e3fa:	a80e      	add	r0, sp, #56	; 0x38
 800e3fc:	1acb      	subs	r3, r1, r3
 800e3fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e402:	462b      	mov	r3, r5
 800e404:	e7f6      	b.n	800e3f4 <__kernel_rem_pio2+0x2ec>
 800e406:	1e62      	subs	r2, r4, #1
 800e408:	ab0e      	add	r3, sp, #56	; 0x38
 800e40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e40e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e412:	a90e      	add	r1, sp, #56	; 0x38
 800e414:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e418:	e757      	b.n	800e2ca <__kernel_rem_pio2+0x1c2>
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w
	...
 800e42c:	3ff00000 	.word	0x3ff00000
 800e430:	0800f1f0 	.word	0x0800f1f0
 800e434:	40200000 	.word	0x40200000
 800e438:	3ff00000 	.word	0x3ff00000
 800e43c:	3e700000 	.word	0x3e700000
 800e440:	41700000 	.word	0x41700000
 800e444:	3fe00000 	.word	0x3fe00000
 800e448:	0800f1b0 	.word	0x0800f1b0
 800e44c:	1e62      	subs	r2, r4, #1
 800e44e:	ab0e      	add	r3, sp, #56	; 0x38
 800e450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e454:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e458:	e7db      	b.n	800e412 <__kernel_rem_pio2+0x30a>
 800e45a:	a90e      	add	r1, sp, #56	; 0x38
 800e45c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e460:	3b01      	subs	r3, #1
 800e462:	430a      	orrs	r2, r1
 800e464:	e78b      	b.n	800e37e <__kernel_rem_pio2+0x276>
 800e466:	3301      	adds	r3, #1
 800e468:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e46c:	2900      	cmp	r1, #0
 800e46e:	d0fa      	beq.n	800e466 <__kernel_rem_pio2+0x35e>
 800e470:	9a08      	ldr	r2, [sp, #32]
 800e472:	4422      	add	r2, r4
 800e474:	00d2      	lsls	r2, r2, #3
 800e476:	a922      	add	r1, sp, #136	; 0x88
 800e478:	18e3      	adds	r3, r4, r3
 800e47a:	9206      	str	r2, [sp, #24]
 800e47c:	440a      	add	r2, r1
 800e47e:	9302      	str	r3, [sp, #8]
 800e480:	f10b 0108 	add.w	r1, fp, #8
 800e484:	f102 0308 	add.w	r3, r2, #8
 800e488:	1c66      	adds	r6, r4, #1
 800e48a:	910a      	str	r1, [sp, #40]	; 0x28
 800e48c:	2500      	movs	r5, #0
 800e48e:	930d      	str	r3, [sp, #52]	; 0x34
 800e490:	9b02      	ldr	r3, [sp, #8]
 800e492:	42b3      	cmp	r3, r6
 800e494:	da04      	bge.n	800e4a0 <__kernel_rem_pio2+0x398>
 800e496:	461c      	mov	r4, r3
 800e498:	e6a6      	b.n	800e1e8 <__kernel_rem_pio2+0xe0>
 800e49a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e49c:	2301      	movs	r3, #1
 800e49e:	e7e3      	b.n	800e468 <__kernel_rem_pio2+0x360>
 800e4a0:	9b06      	ldr	r3, [sp, #24]
 800e4a2:	18ef      	adds	r7, r5, r3
 800e4a4:	ab22      	add	r3, sp, #136	; 0x88
 800e4a6:	441f      	add	r7, r3
 800e4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e4ae:	f7f2 f839 	bl	8000524 <__aeabi_i2d>
 800e4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4b4:	461c      	mov	r4, r3
 800e4b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4b8:	e9c7 0100 	strd	r0, r1, [r7]
 800e4bc:	eb03 0b05 	add.w	fp, r3, r5
 800e4c0:	2700      	movs	r7, #0
 800e4c2:	f04f 0800 	mov.w	r8, #0
 800e4c6:	f04f 0900 	mov.w	r9, #0
 800e4ca:	9b07      	ldr	r3, [sp, #28]
 800e4cc:	429f      	cmp	r7, r3
 800e4ce:	dd08      	ble.n	800e4e2 <__kernel_rem_pio2+0x3da>
 800e4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4d2:	aa72      	add	r2, sp, #456	; 0x1c8
 800e4d4:	18eb      	adds	r3, r5, r3
 800e4d6:	4413      	add	r3, r2
 800e4d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800e4dc:	3601      	adds	r6, #1
 800e4de:	3508      	adds	r5, #8
 800e4e0:	e7d6      	b.n	800e490 <__kernel_rem_pio2+0x388>
 800e4e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e4e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e4ea:	f7f2 f885 	bl	80005f8 <__aeabi_dmul>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	4640      	mov	r0, r8
 800e4f4:	4649      	mov	r1, r9
 800e4f6:	f7f1 fec9 	bl	800028c <__adddf3>
 800e4fa:	3701      	adds	r7, #1
 800e4fc:	4680      	mov	r8, r0
 800e4fe:	4689      	mov	r9, r1
 800e500:	e7e3      	b.n	800e4ca <__kernel_rem_pio2+0x3c2>
 800e502:	3d01      	subs	r5, #1
 800e504:	e741      	b.n	800e38a <__kernel_rem_pio2+0x282>
 800e506:	f1ca 0000 	rsb	r0, sl, #0
 800e50a:	ec47 6b10 	vmov	d0, r6, r7
 800e50e:	f000 fa83 	bl	800ea18 <scalbn>
 800e512:	ec57 6b10 	vmov	r6, r7, d0
 800e516:	2200      	movs	r2, #0
 800e518:	4b99      	ldr	r3, [pc, #612]	; (800e780 <__kernel_rem_pio2+0x678>)
 800e51a:	ee10 0a10 	vmov	r0, s0
 800e51e:	4639      	mov	r1, r7
 800e520:	f7f2 faf0 	bl	8000b04 <__aeabi_dcmpge>
 800e524:	b1f8      	cbz	r0, 800e566 <__kernel_rem_pio2+0x45e>
 800e526:	2200      	movs	r2, #0
 800e528:	4b96      	ldr	r3, [pc, #600]	; (800e784 <__kernel_rem_pio2+0x67c>)
 800e52a:	4630      	mov	r0, r6
 800e52c:	4639      	mov	r1, r7
 800e52e:	f7f2 f863 	bl	80005f8 <__aeabi_dmul>
 800e532:	f7f2 fafb 	bl	8000b2c <__aeabi_d2iz>
 800e536:	4680      	mov	r8, r0
 800e538:	f7f1 fff4 	bl	8000524 <__aeabi_i2d>
 800e53c:	2200      	movs	r2, #0
 800e53e:	4b90      	ldr	r3, [pc, #576]	; (800e780 <__kernel_rem_pio2+0x678>)
 800e540:	f7f2 f85a 	bl	80005f8 <__aeabi_dmul>
 800e544:	460b      	mov	r3, r1
 800e546:	4602      	mov	r2, r0
 800e548:	4639      	mov	r1, r7
 800e54a:	4630      	mov	r0, r6
 800e54c:	f7f1 fe9c 	bl	8000288 <__aeabi_dsub>
 800e550:	f7f2 faec 	bl	8000b2c <__aeabi_d2iz>
 800e554:	1c65      	adds	r5, r4, #1
 800e556:	ab0e      	add	r3, sp, #56	; 0x38
 800e558:	f10a 0a18 	add.w	sl, sl, #24
 800e55c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e560:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e564:	e719      	b.n	800e39a <__kernel_rem_pio2+0x292>
 800e566:	4630      	mov	r0, r6
 800e568:	4639      	mov	r1, r7
 800e56a:	f7f2 fadf 	bl	8000b2c <__aeabi_d2iz>
 800e56e:	ab0e      	add	r3, sp, #56	; 0x38
 800e570:	4625      	mov	r5, r4
 800e572:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e576:	e710      	b.n	800e39a <__kernel_rem_pio2+0x292>
 800e578:	ab0e      	add	r3, sp, #56	; 0x38
 800e57a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e57e:	f7f1 ffd1 	bl	8000524 <__aeabi_i2d>
 800e582:	4642      	mov	r2, r8
 800e584:	464b      	mov	r3, r9
 800e586:	f7f2 f837 	bl	80005f8 <__aeabi_dmul>
 800e58a:	2200      	movs	r2, #0
 800e58c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e590:	4b7c      	ldr	r3, [pc, #496]	; (800e784 <__kernel_rem_pio2+0x67c>)
 800e592:	4640      	mov	r0, r8
 800e594:	4649      	mov	r1, r9
 800e596:	f7f2 f82f 	bl	80005f8 <__aeabi_dmul>
 800e59a:	3f01      	subs	r7, #1
 800e59c:	4680      	mov	r8, r0
 800e59e:	4689      	mov	r9, r1
 800e5a0:	e708      	b.n	800e3b4 <__kernel_rem_pio2+0x2ac>
 800e5a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800e5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800e5ae:	f7f2 f823 	bl	80005f8 <__aeabi_dmul>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	4640      	mov	r0, r8
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	f7f1 fe67 	bl	800028c <__adddf3>
 800e5be:	3701      	adds	r7, #1
 800e5c0:	4680      	mov	r8, r0
 800e5c2:	4689      	mov	r9, r1
 800e5c4:	9b04      	ldr	r3, [sp, #16]
 800e5c6:	429f      	cmp	r7, r3
 800e5c8:	dc01      	bgt.n	800e5ce <__kernel_rem_pio2+0x4c6>
 800e5ca:	45ba      	cmp	sl, r7
 800e5cc:	dae9      	bge.n	800e5a2 <__kernel_rem_pio2+0x49a>
 800e5ce:	ab4a      	add	r3, sp, #296	; 0x128
 800e5d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5d4:	e9c3 8900 	strd	r8, r9, [r3]
 800e5d8:	f10a 0a01 	add.w	sl, sl, #1
 800e5dc:	3e08      	subs	r6, #8
 800e5de:	e6f0      	b.n	800e3c2 <__kernel_rem_pio2+0x2ba>
 800e5e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e5e2:	2b03      	cmp	r3, #3
 800e5e4:	d85b      	bhi.n	800e69e <__kernel_rem_pio2+0x596>
 800e5e6:	e8df f003 	tbb	[pc, r3]
 800e5ea:	264a      	.short	0x264a
 800e5ec:	0226      	.short	0x0226
 800e5ee:	ab9a      	add	r3, sp, #616	; 0x268
 800e5f0:	441c      	add	r4, r3
 800e5f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e5f6:	46a2      	mov	sl, r4
 800e5f8:	46ab      	mov	fp, r5
 800e5fa:	f1bb 0f00 	cmp.w	fp, #0
 800e5fe:	dc6c      	bgt.n	800e6da <__kernel_rem_pio2+0x5d2>
 800e600:	46a2      	mov	sl, r4
 800e602:	46ab      	mov	fp, r5
 800e604:	f1bb 0f01 	cmp.w	fp, #1
 800e608:	f300 8086 	bgt.w	800e718 <__kernel_rem_pio2+0x610>
 800e60c:	2000      	movs	r0, #0
 800e60e:	2100      	movs	r1, #0
 800e610:	2d01      	cmp	r5, #1
 800e612:	f300 80a0 	bgt.w	800e756 <__kernel_rem_pio2+0x64e>
 800e616:	9b02      	ldr	r3, [sp, #8]
 800e618:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e61c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e620:	2b00      	cmp	r3, #0
 800e622:	f040 809e 	bne.w	800e762 <__kernel_rem_pio2+0x65a>
 800e626:	9b01      	ldr	r3, [sp, #4]
 800e628:	e9c3 7800 	strd	r7, r8, [r3]
 800e62c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e630:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e634:	e033      	b.n	800e69e <__kernel_rem_pio2+0x596>
 800e636:	3408      	adds	r4, #8
 800e638:	ab4a      	add	r3, sp, #296	; 0x128
 800e63a:	441c      	add	r4, r3
 800e63c:	462e      	mov	r6, r5
 800e63e:	2000      	movs	r0, #0
 800e640:	2100      	movs	r1, #0
 800e642:	2e00      	cmp	r6, #0
 800e644:	da3a      	bge.n	800e6bc <__kernel_rem_pio2+0x5b4>
 800e646:	9b02      	ldr	r3, [sp, #8]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d03d      	beq.n	800e6c8 <__kernel_rem_pio2+0x5c0>
 800e64c:	4602      	mov	r2, r0
 800e64e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e652:	9c01      	ldr	r4, [sp, #4]
 800e654:	e9c4 2300 	strd	r2, r3, [r4]
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e660:	f7f1 fe12 	bl	8000288 <__aeabi_dsub>
 800e664:	ae4c      	add	r6, sp, #304	; 0x130
 800e666:	2401      	movs	r4, #1
 800e668:	42a5      	cmp	r5, r4
 800e66a:	da30      	bge.n	800e6ce <__kernel_rem_pio2+0x5c6>
 800e66c:	9b02      	ldr	r3, [sp, #8]
 800e66e:	b113      	cbz	r3, 800e676 <__kernel_rem_pio2+0x56e>
 800e670:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e674:	4619      	mov	r1, r3
 800e676:	9b01      	ldr	r3, [sp, #4]
 800e678:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e67c:	e00f      	b.n	800e69e <__kernel_rem_pio2+0x596>
 800e67e:	ab9a      	add	r3, sp, #616	; 0x268
 800e680:	441c      	add	r4, r3
 800e682:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e686:	2000      	movs	r0, #0
 800e688:	2100      	movs	r1, #0
 800e68a:	2d00      	cmp	r5, #0
 800e68c:	da10      	bge.n	800e6b0 <__kernel_rem_pio2+0x5a8>
 800e68e:	9b02      	ldr	r3, [sp, #8]
 800e690:	b113      	cbz	r3, 800e698 <__kernel_rem_pio2+0x590>
 800e692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e696:	4619      	mov	r1, r3
 800e698:	9b01      	ldr	r3, [sp, #4]
 800e69a:	e9c3 0100 	strd	r0, r1, [r3]
 800e69e:	9b06      	ldr	r3, [sp, #24]
 800e6a0:	f003 0007 	and.w	r0, r3, #7
 800e6a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e6a8:	ecbd 8b02 	vpop	{d8}
 800e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e6b4:	f7f1 fdea 	bl	800028c <__adddf3>
 800e6b8:	3d01      	subs	r5, #1
 800e6ba:	e7e6      	b.n	800e68a <__kernel_rem_pio2+0x582>
 800e6bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e6c0:	f7f1 fde4 	bl	800028c <__adddf3>
 800e6c4:	3e01      	subs	r6, #1
 800e6c6:	e7bc      	b.n	800e642 <__kernel_rem_pio2+0x53a>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	e7c1      	b.n	800e652 <__kernel_rem_pio2+0x54a>
 800e6ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e6d2:	f7f1 fddb 	bl	800028c <__adddf3>
 800e6d6:	3401      	adds	r4, #1
 800e6d8:	e7c6      	b.n	800e668 <__kernel_rem_pio2+0x560>
 800e6da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e6de:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e6e2:	4640      	mov	r0, r8
 800e6e4:	ec53 2b17 	vmov	r2, r3, d7
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e6ee:	f7f1 fdcd 	bl	800028c <__adddf3>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	f7f1 fdc3 	bl	8000288 <__aeabi_dsub>
 800e702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e706:	f7f1 fdc1 	bl	800028c <__adddf3>
 800e70a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e70e:	e9ca 0100 	strd	r0, r1, [sl]
 800e712:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e716:	e770      	b.n	800e5fa <__kernel_rem_pio2+0x4f2>
 800e718:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e71c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e720:	4630      	mov	r0, r6
 800e722:	ec53 2b17 	vmov	r2, r3, d7
 800e726:	4639      	mov	r1, r7
 800e728:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e72c:	f7f1 fdae 	bl	800028c <__adddf3>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4680      	mov	r8, r0
 800e736:	4689      	mov	r9, r1
 800e738:	4630      	mov	r0, r6
 800e73a:	4639      	mov	r1, r7
 800e73c:	f7f1 fda4 	bl	8000288 <__aeabi_dsub>
 800e740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e744:	f7f1 fda2 	bl	800028c <__adddf3>
 800e748:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e74c:	e9ca 0100 	strd	r0, r1, [sl]
 800e750:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e754:	e756      	b.n	800e604 <__kernel_rem_pio2+0x4fc>
 800e756:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e75a:	f7f1 fd97 	bl	800028c <__adddf3>
 800e75e:	3d01      	subs	r5, #1
 800e760:	e756      	b.n	800e610 <__kernel_rem_pio2+0x508>
 800e762:	9b01      	ldr	r3, [sp, #4]
 800e764:	9a01      	ldr	r2, [sp, #4]
 800e766:	601f      	str	r7, [r3, #0]
 800e768:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e76c:	605c      	str	r4, [r3, #4]
 800e76e:	609d      	str	r5, [r3, #8]
 800e770:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e774:	60d3      	str	r3, [r2, #12]
 800e776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e77a:	6110      	str	r0, [r2, #16]
 800e77c:	6153      	str	r3, [r2, #20]
 800e77e:	e78e      	b.n	800e69e <__kernel_rem_pio2+0x596>
 800e780:	41700000 	.word	0x41700000
 800e784:	3e700000 	.word	0x3e700000

0800e788 <__kernel_sin>:
 800e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e78c:	ec55 4b10 	vmov	r4, r5, d0
 800e790:	b085      	sub	sp, #20
 800e792:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e796:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e79a:	ed8d 1b00 	vstr	d1, [sp]
 800e79e:	9002      	str	r0, [sp, #8]
 800e7a0:	da06      	bge.n	800e7b0 <__kernel_sin+0x28>
 800e7a2:	ee10 0a10 	vmov	r0, s0
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	f7f2 f9c0 	bl	8000b2c <__aeabi_d2iz>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d051      	beq.n	800e854 <__kernel_sin+0xcc>
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	f7f1 ff1e 	bl	80005f8 <__aeabi_dmul>
 800e7bc:	4682      	mov	sl, r0
 800e7be:	468b      	mov	fp, r1
 800e7c0:	4602      	mov	r2, r0
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	4629      	mov	r1, r5
 800e7c8:	f7f1 ff16 	bl	80005f8 <__aeabi_dmul>
 800e7cc:	a341      	add	r3, pc, #260	; (adr r3, 800e8d4 <__kernel_sin+0x14c>)
 800e7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d2:	4680      	mov	r8, r0
 800e7d4:	4689      	mov	r9, r1
 800e7d6:	4650      	mov	r0, sl
 800e7d8:	4659      	mov	r1, fp
 800e7da:	f7f1 ff0d 	bl	80005f8 <__aeabi_dmul>
 800e7de:	a33f      	add	r3, pc, #252	; (adr r3, 800e8dc <__kernel_sin+0x154>)
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	f7f1 fd50 	bl	8000288 <__aeabi_dsub>
 800e7e8:	4652      	mov	r2, sl
 800e7ea:	465b      	mov	r3, fp
 800e7ec:	f7f1 ff04 	bl	80005f8 <__aeabi_dmul>
 800e7f0:	a33c      	add	r3, pc, #240	; (adr r3, 800e8e4 <__kernel_sin+0x15c>)
 800e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f6:	f7f1 fd49 	bl	800028c <__adddf3>
 800e7fa:	4652      	mov	r2, sl
 800e7fc:	465b      	mov	r3, fp
 800e7fe:	f7f1 fefb 	bl	80005f8 <__aeabi_dmul>
 800e802:	a33a      	add	r3, pc, #232	; (adr r3, 800e8ec <__kernel_sin+0x164>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	f7f1 fd3e 	bl	8000288 <__aeabi_dsub>
 800e80c:	4652      	mov	r2, sl
 800e80e:	465b      	mov	r3, fp
 800e810:	f7f1 fef2 	bl	80005f8 <__aeabi_dmul>
 800e814:	a337      	add	r3, pc, #220	; (adr r3, 800e8f4 <__kernel_sin+0x16c>)
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	f7f1 fd37 	bl	800028c <__adddf3>
 800e81e:	9b02      	ldr	r3, [sp, #8]
 800e820:	4606      	mov	r6, r0
 800e822:	460f      	mov	r7, r1
 800e824:	b9db      	cbnz	r3, 800e85e <__kernel_sin+0xd6>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4650      	mov	r0, sl
 800e82c:	4659      	mov	r1, fp
 800e82e:	f7f1 fee3 	bl	80005f8 <__aeabi_dmul>
 800e832:	a325      	add	r3, pc, #148	; (adr r3, 800e8c8 <__kernel_sin+0x140>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 fd26 	bl	8000288 <__aeabi_dsub>
 800e83c:	4642      	mov	r2, r8
 800e83e:	464b      	mov	r3, r9
 800e840:	f7f1 feda 	bl	80005f8 <__aeabi_dmul>
 800e844:	4602      	mov	r2, r0
 800e846:	460b      	mov	r3, r1
 800e848:	4620      	mov	r0, r4
 800e84a:	4629      	mov	r1, r5
 800e84c:	f7f1 fd1e 	bl	800028c <__adddf3>
 800e850:	4604      	mov	r4, r0
 800e852:	460d      	mov	r5, r1
 800e854:	ec45 4b10 	vmov	d0, r4, r5
 800e858:	b005      	add	sp, #20
 800e85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85e:	2200      	movs	r2, #0
 800e860:	4b1b      	ldr	r3, [pc, #108]	; (800e8d0 <__kernel_sin+0x148>)
 800e862:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e866:	f7f1 fec7 	bl	80005f8 <__aeabi_dmul>
 800e86a:	4632      	mov	r2, r6
 800e86c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e870:	463b      	mov	r3, r7
 800e872:	4640      	mov	r0, r8
 800e874:	4649      	mov	r1, r9
 800e876:	f7f1 febf 	bl	80005f8 <__aeabi_dmul>
 800e87a:	4602      	mov	r2, r0
 800e87c:	460b      	mov	r3, r1
 800e87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e882:	f7f1 fd01 	bl	8000288 <__aeabi_dsub>
 800e886:	4652      	mov	r2, sl
 800e888:	465b      	mov	r3, fp
 800e88a:	f7f1 feb5 	bl	80005f8 <__aeabi_dmul>
 800e88e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e892:	f7f1 fcf9 	bl	8000288 <__aeabi_dsub>
 800e896:	a30c      	add	r3, pc, #48	; (adr r3, 800e8c8 <__kernel_sin+0x140>)
 800e898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89c:	4606      	mov	r6, r0
 800e89e:	460f      	mov	r7, r1
 800e8a0:	4640      	mov	r0, r8
 800e8a2:	4649      	mov	r1, r9
 800e8a4:	f7f1 fea8 	bl	80005f8 <__aeabi_dmul>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	4639      	mov	r1, r7
 800e8b0:	f7f1 fcec 	bl	800028c <__adddf3>
 800e8b4:	4602      	mov	r2, r0
 800e8b6:	460b      	mov	r3, r1
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	f7f1 fce4 	bl	8000288 <__aeabi_dsub>
 800e8c0:	e7c6      	b.n	800e850 <__kernel_sin+0xc8>
 800e8c2:	bf00      	nop
 800e8c4:	f3af 8000 	nop.w
 800e8c8:	55555549 	.word	0x55555549
 800e8cc:	3fc55555 	.word	0x3fc55555
 800e8d0:	3fe00000 	.word	0x3fe00000
 800e8d4:	5acfd57c 	.word	0x5acfd57c
 800e8d8:	3de5d93a 	.word	0x3de5d93a
 800e8dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e8e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e8e4:	57b1fe7d 	.word	0x57b1fe7d
 800e8e8:	3ec71de3 	.word	0x3ec71de3
 800e8ec:	19c161d5 	.word	0x19c161d5
 800e8f0:	3f2a01a0 	.word	0x3f2a01a0
 800e8f4:	1110f8a6 	.word	0x1110f8a6
 800e8f8:	3f811111 	.word	0x3f811111

0800e8fc <fabs>:
 800e8fc:	ec51 0b10 	vmov	r0, r1, d0
 800e900:	ee10 2a10 	vmov	r2, s0
 800e904:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e908:	ec43 2b10 	vmov	d0, r2, r3
 800e90c:	4770      	bx	lr
	...

0800e910 <floor>:
 800e910:	ec51 0b10 	vmov	r0, r1, d0
 800e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e918:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e91c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e920:	2e13      	cmp	r6, #19
 800e922:	460c      	mov	r4, r1
 800e924:	ee10 5a10 	vmov	r5, s0
 800e928:	4680      	mov	r8, r0
 800e92a:	dc34      	bgt.n	800e996 <floor+0x86>
 800e92c:	2e00      	cmp	r6, #0
 800e92e:	da16      	bge.n	800e95e <floor+0x4e>
 800e930:	a335      	add	r3, pc, #212	; (adr r3, 800ea08 <floor+0xf8>)
 800e932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e936:	f7f1 fca9 	bl	800028c <__adddf3>
 800e93a:	2200      	movs	r2, #0
 800e93c:	2300      	movs	r3, #0
 800e93e:	f7f2 f8eb 	bl	8000b18 <__aeabi_dcmpgt>
 800e942:	b148      	cbz	r0, 800e958 <floor+0x48>
 800e944:	2c00      	cmp	r4, #0
 800e946:	da59      	bge.n	800e9fc <floor+0xec>
 800e948:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e94c:	4a30      	ldr	r2, [pc, #192]	; (800ea10 <floor+0x100>)
 800e94e:	432b      	orrs	r3, r5
 800e950:	2500      	movs	r5, #0
 800e952:	42ab      	cmp	r3, r5
 800e954:	bf18      	it	ne
 800e956:	4614      	movne	r4, r2
 800e958:	4621      	mov	r1, r4
 800e95a:	4628      	mov	r0, r5
 800e95c:	e025      	b.n	800e9aa <floor+0x9a>
 800e95e:	4f2d      	ldr	r7, [pc, #180]	; (800ea14 <floor+0x104>)
 800e960:	4137      	asrs	r7, r6
 800e962:	ea01 0307 	and.w	r3, r1, r7
 800e966:	4303      	orrs	r3, r0
 800e968:	d01f      	beq.n	800e9aa <floor+0x9a>
 800e96a:	a327      	add	r3, pc, #156	; (adr r3, 800ea08 <floor+0xf8>)
 800e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e970:	f7f1 fc8c 	bl	800028c <__adddf3>
 800e974:	2200      	movs	r2, #0
 800e976:	2300      	movs	r3, #0
 800e978:	f7f2 f8ce 	bl	8000b18 <__aeabi_dcmpgt>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d0eb      	beq.n	800e958 <floor+0x48>
 800e980:	2c00      	cmp	r4, #0
 800e982:	bfbe      	ittt	lt
 800e984:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e988:	fa43 f606 	asrlt.w	r6, r3, r6
 800e98c:	19a4      	addlt	r4, r4, r6
 800e98e:	ea24 0407 	bic.w	r4, r4, r7
 800e992:	2500      	movs	r5, #0
 800e994:	e7e0      	b.n	800e958 <floor+0x48>
 800e996:	2e33      	cmp	r6, #51	; 0x33
 800e998:	dd0b      	ble.n	800e9b2 <floor+0xa2>
 800e99a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e99e:	d104      	bne.n	800e9aa <floor+0x9a>
 800e9a0:	ee10 2a10 	vmov	r2, s0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	f7f1 fc71 	bl	800028c <__adddf3>
 800e9aa:	ec41 0b10 	vmov	d0, r0, r1
 800e9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ba:	fa23 f707 	lsr.w	r7, r3, r7
 800e9be:	4207      	tst	r7, r0
 800e9c0:	d0f3      	beq.n	800e9aa <floor+0x9a>
 800e9c2:	a311      	add	r3, pc, #68	; (adr r3, 800ea08 <floor+0xf8>)
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	f7f1 fc60 	bl	800028c <__adddf3>
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	f7f2 f8a2 	bl	8000b18 <__aeabi_dcmpgt>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	d0bf      	beq.n	800e958 <floor+0x48>
 800e9d8:	2c00      	cmp	r4, #0
 800e9da:	da02      	bge.n	800e9e2 <floor+0xd2>
 800e9dc:	2e14      	cmp	r6, #20
 800e9de:	d103      	bne.n	800e9e8 <floor+0xd8>
 800e9e0:	3401      	adds	r4, #1
 800e9e2:	ea25 0507 	bic.w	r5, r5, r7
 800e9e6:	e7b7      	b.n	800e958 <floor+0x48>
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e9ee:	fa03 f606 	lsl.w	r6, r3, r6
 800e9f2:	4435      	add	r5, r6
 800e9f4:	4545      	cmp	r5, r8
 800e9f6:	bf38      	it	cc
 800e9f8:	18e4      	addcc	r4, r4, r3
 800e9fa:	e7f2      	b.n	800e9e2 <floor+0xd2>
 800e9fc:	2500      	movs	r5, #0
 800e9fe:	462c      	mov	r4, r5
 800ea00:	e7aa      	b.n	800e958 <floor+0x48>
 800ea02:	bf00      	nop
 800ea04:	f3af 8000 	nop.w
 800ea08:	8800759c 	.word	0x8800759c
 800ea0c:	7e37e43c 	.word	0x7e37e43c
 800ea10:	bff00000 	.word	0xbff00000
 800ea14:	000fffff 	.word	0x000fffff

0800ea18 <scalbn>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	ec55 4b10 	vmov	r4, r5, d0
 800ea1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ea22:	4606      	mov	r6, r0
 800ea24:	462b      	mov	r3, r5
 800ea26:	b9aa      	cbnz	r2, 800ea54 <scalbn+0x3c>
 800ea28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea2c:	4323      	orrs	r3, r4
 800ea2e:	d03b      	beq.n	800eaa8 <scalbn+0x90>
 800ea30:	4b31      	ldr	r3, [pc, #196]	; (800eaf8 <scalbn+0xe0>)
 800ea32:	4629      	mov	r1, r5
 800ea34:	2200      	movs	r2, #0
 800ea36:	ee10 0a10 	vmov	r0, s0
 800ea3a:	f7f1 fddd 	bl	80005f8 <__aeabi_dmul>
 800ea3e:	4b2f      	ldr	r3, [pc, #188]	; (800eafc <scalbn+0xe4>)
 800ea40:	429e      	cmp	r6, r3
 800ea42:	4604      	mov	r4, r0
 800ea44:	460d      	mov	r5, r1
 800ea46:	da12      	bge.n	800ea6e <scalbn+0x56>
 800ea48:	a327      	add	r3, pc, #156	; (adr r3, 800eae8 <scalbn+0xd0>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	f7f1 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ea52:	e009      	b.n	800ea68 <scalbn+0x50>
 800ea54:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ea58:	428a      	cmp	r2, r1
 800ea5a:	d10c      	bne.n	800ea76 <scalbn+0x5e>
 800ea5c:	ee10 2a10 	vmov	r2, s0
 800ea60:	4620      	mov	r0, r4
 800ea62:	4629      	mov	r1, r5
 800ea64:	f7f1 fc12 	bl	800028c <__adddf3>
 800ea68:	4604      	mov	r4, r0
 800ea6a:	460d      	mov	r5, r1
 800ea6c:	e01c      	b.n	800eaa8 <scalbn+0x90>
 800ea6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ea72:	460b      	mov	r3, r1
 800ea74:	3a36      	subs	r2, #54	; 0x36
 800ea76:	4432      	add	r2, r6
 800ea78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ea7c:	428a      	cmp	r2, r1
 800ea7e:	dd0b      	ble.n	800ea98 <scalbn+0x80>
 800ea80:	ec45 4b11 	vmov	d1, r4, r5
 800ea84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800eaf0 <scalbn+0xd8>
 800ea88:	f000 f83c 	bl	800eb04 <copysign>
 800ea8c:	a318      	add	r3, pc, #96	; (adr r3, 800eaf0 <scalbn+0xd8>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	ec51 0b10 	vmov	r0, r1, d0
 800ea96:	e7da      	b.n	800ea4e <scalbn+0x36>
 800ea98:	2a00      	cmp	r2, #0
 800ea9a:	dd08      	ble.n	800eaae <scalbn+0x96>
 800ea9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eaa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eaa8:	ec45 4b10 	vmov	d0, r4, r5
 800eaac:	bd70      	pop	{r4, r5, r6, pc}
 800eaae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eab2:	da0d      	bge.n	800ead0 <scalbn+0xb8>
 800eab4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eab8:	429e      	cmp	r6, r3
 800eaba:	ec45 4b11 	vmov	d1, r4, r5
 800eabe:	dce1      	bgt.n	800ea84 <scalbn+0x6c>
 800eac0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800eae8 <scalbn+0xd0>
 800eac4:	f000 f81e 	bl	800eb04 <copysign>
 800eac8:	a307      	add	r3, pc, #28	; (adr r3, 800eae8 <scalbn+0xd0>)
 800eaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eace:	e7e0      	b.n	800ea92 <scalbn+0x7a>
 800ead0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ead4:	3236      	adds	r2, #54	; 0x36
 800ead6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eada:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eade:	4620      	mov	r0, r4
 800eae0:	4629      	mov	r1, r5
 800eae2:	2200      	movs	r2, #0
 800eae4:	4b06      	ldr	r3, [pc, #24]	; (800eb00 <scalbn+0xe8>)
 800eae6:	e7b2      	b.n	800ea4e <scalbn+0x36>
 800eae8:	c2f8f359 	.word	0xc2f8f359
 800eaec:	01a56e1f 	.word	0x01a56e1f
 800eaf0:	8800759c 	.word	0x8800759c
 800eaf4:	7e37e43c 	.word	0x7e37e43c
 800eaf8:	43500000 	.word	0x43500000
 800eafc:	ffff3cb0 	.word	0xffff3cb0
 800eb00:	3c900000 	.word	0x3c900000

0800eb04 <copysign>:
 800eb04:	ec51 0b10 	vmov	r0, r1, d0
 800eb08:	ee11 0a90 	vmov	r0, s3
 800eb0c:	ee10 2a10 	vmov	r2, s0
 800eb10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eb14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800eb18:	ea41 0300 	orr.w	r3, r1, r0
 800eb1c:	ec43 2b10 	vmov	d0, r2, r3
 800eb20:	4770      	bx	lr
	...

0800eb24 <_init>:
 800eb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb26:	bf00      	nop
 800eb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb2a:	bc08      	pop	{r3}
 800eb2c:	469e      	mov	lr, r3
 800eb2e:	4770      	bx	lr

0800eb30 <_fini>:
 800eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb32:	bf00      	nop
 800eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb36:	bc08      	pop	{r3}
 800eb38:	469e      	mov	lr, r3
 800eb3a:	4770      	bx	lr
